/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var __webpack_modules__={594:(e,t,n)=>{"use strict";n.d(t,{Z:()=>we});var r=n(7294),o=n.n(r),i=n(5053);function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,a(e,t)}var u=n(5697),s=n.n(u);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function f(e){return"/"===e.charAt(0)}function p(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}const d=function(e,t){if(!e)throw new Error("Invariant failed")};function h(e){return"/"===e.charAt(0)?e:"/"+e}function m(e){return"/"===e.charAt(0)?e.substr(1):e}function v(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function y(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function g(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function b(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=c({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&f(e),a=t&&f(t),l=i||a;if(e&&f(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var u=o[o.length-1];n="."===u||".."===u||""===u}else n=!1;for(var s=0,c=o.length;c>=0;c--){var d=o[c];"."===d?p(o,c):".."===d?(p(o,c),s++):s&&(p(o,c),s--)}if(!l)for(;s--;s)o.unshift("..");!l||""===o[0]||o[0]&&f(o[0])||o.unshift("");var h=o.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h}(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function w(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var _=!("undefined"==typeof window||!window.document||!window.document.createElement);function k(e,t){t(window.confirm(e))}var x="hashchange",S={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+m(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:m,decodePath:h},slash:{encodePath:h,decodePath:h}};function E(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function C(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function T(e){window.location.replace(E(window.location.href)+"#"+e)}function P(e){void 0===e&&(e={}),_||d(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?k:r,i=n.hashType,a=void 0===i?"slash":i,l=e.basename?y(h(e.basename)):"",u=S[a],s=u.encodePath,f=u.decodePath;function p(){var e=f(C());return l&&(e=v(e,l)),b(e)}var m=w();function P(e){c(F,e),F.length=t.length,m.notifyListeners(F.location,F.action)}var O=!1,j=null;function R(){var e,t,n=C(),r=s(n);if(n!==r)T(r);else{var i=p(),a=F.location;if(!O&&(t=i,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(j===g(i))return;j=null,function(e){if(O)O=!1,P();else{m.confirmTransitionTo(e,"POP",o,(function(t){t?P({action:"POP",location:e}):function(e){var t=F.location,n=A.lastIndexOf(g(t));-1===n&&(n=0);var r=A.lastIndexOf(g(e));-1===r&&(r=0);var o=n-r;o&&(O=!0,L(o))}(e)}))}}(i)}}var I=C(),M=s(I);I!==M&&T(M);var N=p(),A=[g(N)];function L(e){t.go(e)}var D=0;function z(e){1===(D+=e)&&1===e?window.addEventListener(x,R):0===D&&window.removeEventListener(x,R)}var U=!1,F={length:t.length,action:"POP",location:N,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=E(window.location.href)),n+"#"+s(l+g(e))},push:function(e,t){var n="PUSH",r=b(e,void 0,void 0,F.location);m.confirmTransitionTo(r,n,o,(function(e){if(e){var t=g(r),o=s(l+t);if(C()!==o){j=t,function(e){window.location.hash=e}(o);var i=A.lastIndexOf(g(F.location)),a=A.slice(0,i+1);a.push(t),A=a,P({action:n,location:r})}else P()}}))},replace:function(e,t){var n="REPLACE",r=b(e,void 0,void 0,F.location);m.confirmTransitionTo(r,n,o,(function(e){if(e){var t=g(r),o=s(l+t);C()!==o&&(j=t,T(o));var i=A.indexOf(g(F.location));-1!==i&&(A[i]=t),P({action:n,location:r})}}))},go:L,goBack:function(){L(-1)},goForward:function(){L(1)},block:function(e){void 0===e&&(e=!1);var t=m.setPrompt(e);return U||(z(1),U=!0),function(){return U&&(U=!1,z(-1)),t()}},listen:function(e){var t=m.appendListener(e);return z(1),function(){z(-1),t()}}};return F}var O=1073741823,j="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function R(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const I=o().createContext||function(e,t){var n,o,i,a="__create-react-context-"+((j[i="__global_unique_id__"]=(j[i]||0)+1)+"__"),u=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=R(t.props.value),t}l(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[a]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):O,0!=(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(r.Component);u.childContextTypes=((n={})[a]=s().object.isRequired,n);var c=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}l(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?O:t},r.componentDidMount=function(){this.context[a]&&this.context[a].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?O:e},r.componentWillUnmount=function(){this.context[a]&&this.context[a].off(this.onUpdate)},r.getValue=function(){return this.context[a]?this.context[a].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return c.contextTypes=((o={})[a]=s().object,o),{Provider:u,Consumer:c}};var M=n(9658),N=n.n(M);function A(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n(9864),n(8420);var L=function(e){var t=I();return t.displayName="Router-History",t}(),D=function(e){var t=I();return t.displayName="Router",t}(),z=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}l(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return o().createElement(D.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},o().createElement(L.Provider,{children:this.props.children||null,value:this.props.history}))},t}(o().Component);o().Component,o().Component;var U={},F=0;function W(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,l=void 0!==a&&a,u=n.sensitive,s=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=U[n]||(U[n]={});if(r[e])return r[e];var o=[],i={regexp:N()(e,o,t),keys:o};return F<1e4&&(r[e]=i,F++),i}(n,{end:i,strict:l,sensitive:s}),o=r.regexp,a=r.keys,u=o.exec(e);if(!u)return null;var c=u[0],f=u.slice(1),p=e===c;return i&&!p?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:p,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var q=function(e){function t(){return e.apply(this,arguments)||this}return l(t,e),t.prototype.render=function(){var e=this;return o().createElement(D.Consumer,null,(function(t){t||d(!1);var n=e.props.location||t.location,r=c({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?W(n.pathname,e.props):t.match}),i=e.props,a=i.children,l=i.component,u=i.render;return Array.isArray(a)&&0===a.length&&(a=null),o().createElement(D.Provider,{value:r},r.match?a?"function"==typeof a?a(r):a:l?o().createElement(l,r):u?u(r):null:"function"==typeof a?a(r):null)}))},t}(o().Component);o().Component;var H=function(e){function t(){return e.apply(this,arguments)||this}return l(t,e),t.prototype.render=function(){var e=this;return o().createElement(D.Consumer,null,(function(t){t||d(!1);var n,r,i=e.props.location||t.location;return o().Children.forEach(e.props.children,(function(e){if(null==r&&o().isValidElement(e)){n=e;var a=e.props.path||e.props.from;r=a?W(i.pathname,c({},e.props,{path:a})):t.match}})),r?o().cloneElement(n,{location:i,computedMatch:r}):null}))},t}(o().Component);o().useContext,o().Component;var $=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=P(t.props),t}return l(t,e),t.prototype.render=function(){return o().createElement(z,{history:this.history,children:this.props.children})},t}(o().Component),B=function(e,t){return"function"==typeof e?e(t):e},V=function(e,t){return"string"==typeof e?b(e,null,null,t):e},K=function(e){return e},Q=o().forwardRef;void 0===Q&&(Q=K);var Y=Q((function(e,t){var n=e.innerRef,r=e.navigate,i=e.onClick,a=A(e,["innerRef","navigate","onClick"]),l=a.target,u=c({},a,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return u.ref=K!==Q&&t||n,o().createElement("a",u)})),X=Q((function(e,t){var n=e.component,r=void 0===n?Y:n,i=e.replace,a=e.to,l=e.innerRef,u=A(e,["component","replace","to","innerRef"]);return o().createElement(D.Consumer,null,(function(e){e||d(!1);var n=e.history,s=V(B(a,e.location),e.location),f=s?n.createHref(s):"",p=c({},u,{href:f,navigate:function(){var t=B(a,e.location);(i?n.replace:n.push)(t)}});return K!==Q?p.ref=t||l:p.innerRef=l,o().createElement(r,p)}))})),G=function(e){return e},J=o().forwardRef;void 0===J&&(J=G),J((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,i=e.activeClassName,a=void 0===i?"active":i,l=e.activeStyle,u=e.className,s=e.exact,f=e.isActive,p=e.location,h=e.sensitive,m=e.strict,v=e.style,y=e.to,g=e.innerRef,b=A(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return o().createElement(D.Consumer,null,(function(e){e||d(!1);var n=p||e.location,i=V(B(y,n),n),w=i.pathname,_=w&&w.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),k=_?W(n.pathname,{path:_,exact:s,sensitive:h,strict:m}):null,x=!!(f?f(k,n):k),S=x?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(u,a):u,E=x?c({},v,{},l):v,C=c({"aria-current":x&&r||null,className:S,style:E,to:i},b);return G!==J?C.ref=t||g:C.innerRef=g,o().createElement(X,C)}))}));var Z,ee=n(4624),te=(n(5587),Z=function(e,t){return(Z=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Z(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});const ne=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return te(t,e),t.prototype.render=function(){return r.createElement("section",{className:"profile"},r.createElement("div",null,r.createElement("img",{alt:"My head shot picture",src:ee}),r.createElement("h1",null,"Hi, I'm Joshua Sperry"),r.createElement("h2",null,"I'm a front-end web developer and software developer"),r.createElement(X,{to:"/portfolio",className:"portfolio-link"},"View my portfolio")),r.createElement("footer",null,r.createElement("a",{target:"_blank",href:"../../assets/resume.pdf"},"Resume"),r.createElement("a",{title:"mrjoshuasperry@gmail.com",href:"mailto:mrjoshuasperry@gmail.com"},"Email"),r.createElement("a",{rel:"noopener",target:"_blank",href:"https://github.com/mrsperry"},"Github")))},t}(r.Component);n(7825);var re=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const oe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return re(t,e),t.prototype.render=function(){for(var e,t=[],o=0;o<this.props.data.length;o++){var i=this.props.data[o],a=i.name,l=i.description,u=i.alt,s=a.toLowerCase().split(" ").join("-"),c=this.props.assetFolder+"/"+s+".jpg",f=n(990)("./"+c),p=null!==(e=this.props.urlPrefix)&&void 0!==e?e:"";""!==p&&(p+="/");var d="https://mrsperry.github.io/"+p+s;t.push(r.createElement("a",{key:o,href:d,className:"project"},r.createElement("figure",{title:a},r.createElement("img",{src:f,alt:u}),r.createElement("figcaption",null,r.createElement("span",{className:"title"},a),l?r.createElement("span",{className:"description"},l):""))))}return r.createElement("section",{className:"project-display"},this.props.title?r.createElement("h1",null,this.props.title):"",t)},t}(r.PureComponent),ie=JSON.parse('[{"name":"CyntraSafe","description":"A modern cybersecurity business site","alt":"A modern cybersecurity business site"},{"name":"Fanlite Engineering","description":"An architectural design company\'s site","alt":"An architectural design company\'s site"},{"name":"Iota Online","description":"A futuristic online game website","alt":"A futuristic online game website"},{"name":"LoveLotus","description":"A simple, modern dating app","alt":"A simple, modern dating app"},{"name":"Opinionated","description":"A minimal personal blog","alt":"A minimal personal blog"},{"name":"SineStats","description":"A personal server dashboard","alt":"A personal server dashboard"},{"name":"sudo news","description":"A programmer targeted tech blog","alt":"A programmer targeted tech blog"}]');n(2251);var ae=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const le=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ae(t,e),t.prototype.render=function(){for(var e=["Home","Portfolio","Games","Visuals"],t=[],n=0;n<e.length;n++){var o,i=e[n],a=i.toLowerCase();o=this.props.view===a?r.createElement("a",{className:"active"},i):r.createElement(X,{to:"/"+a},i),t.push(r.createElement("li",{key:n},o))}return r.createElement("nav",{className:"navigation"},r.createElement("ul",null,t))},t}(r.PureComponent);var ue=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const se=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ue(t,e),t.prototype.render=function(){return r.createElement(r.Fragment,null,r.createElement(le,{view:"portfolio"}),r.createElement("section",{className:"portfolio"},r.createElement(oe,{title:"Personal Projects",data:ie,assetFolder:"portfolio",urlPrefix:"portfolio/projects"})))},t}(r.Component),ce=JSON.parse('[{"name":"Overseer","description":"An incremental virus scanner experience","alt":"A dark shield with a green circle in the center"},{"name":"Fishing Enterprises","description":"An idle/incremental fishing business management simulator","alt":"A pixel art rendition of a fish"},{"name":"Asteroids","description":"A remake of the classic Atari game","alt":"A view of a blue ship in the middle of an asteroid field"}]');var fe=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const pe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return fe(t,e),t.prototype.render=function(){return r.createElement(r.Fragment,null,r.createElement(le,{view:"games"}),r.createElement("section",{className:"games"},r.createElement(oe,{title:"Browser Games",data:ce,assetFolder:"games"})))},t}(r.PureComponent),de=JSON.parse('{"p":["Falling Lights","Cubic Audio Visualizer","Random Walkers"],"q":[{"name":"Falling Lights","alt":"Streaks of colored lights falling down"},{"name":"Geometric Constellations","alt":"Circles floating in space connecting with other nearby circles to create constellations"},{"name":"Rainbow Black Hole","alt":"A rainbow of colors descending towards the center of a circle"},{"name":"Cubic Audio Visualizer","alt":"An audio visualizer that uses colored cubes to display the audio level"},{"name":"Falling Text","alt":"Small sequences of randomly changing letters falling down"},{"name":"Reaching Arms","alt":"Many arms reaching out from the center giving the illusion of being pulled in"},{"name":"Raindrops","alt":"Raindrops splashing after falling"},{"name":"Futuristic Audio Visualizer","alt":"An audio visualizer that uses moving bars and many dots to display the audio level"},{"name":"Rotating Spiral","alt":"A series of dots, emanating from the center, slowly expanding outwards in a rotating spiral"},{"name":"Random Walkers","alt":"Multiple colored walkers move out along random paths from the center"},{"name":"Abstract Squares","alt":"A series of collections of randomly placed colored squares"},{"name":"Bouncing Laser","alt":"A laser bouncing around randomly hitting nodes"},{"name":"Gradient Circuit","alt":"A circuit shape generated with a gradient of colors from the center"},{"name":"Meteor Shower","alt":"Small lines of light coming from the center of the screen to create a meteor shower effect"}]}');n(5456);var he=n(615),me=(n(5450),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),ve=function(){return(ve=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};const ye=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return me(t,e),t.prototype.render=function(){var e=de.p,t=de.q;return r.createElement(r.Fragment,null,r.createElement(le,{view:"visuals"}),r.createElement("section",{className:"visuals"},r.createElement(he.lr,ve({},{autoPlay:!0,interval:5e3,infiniteLoop:!0,showIndicators:!1,showStatus:!1,showThumbs:!1,transitionTime:1e3}),e.map((function(e,o){for(var i=n(1168)("./carousel-"+(o+1)+".jpg"),a="",l=0,u=t;l<u.length;l++){var s=u[l];if(s.name===e){a=s.alt;break}}var c=e.toLowerCase().split(" ").join("-");return r.createElement("a",{key:o,tabIndex:-1,title:e,href:"https://mrsperry.github.io/visuals/projects/"+c},r.createElement("img",{src:i,alt:a}),r.createElement("p",{className:"legend"},e))}))),r.createElement(oe,{data:t,assetFolder:"visuals",urlPrefix:"visuals/projects"})))},t}(r.PureComponent);n(9127),n(6442),n(6176),e=n.hmd(e);var ge=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),be=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ge(t,e),t.updateHash=function(e){window.location.hash="#"+e},t.prototype.componentDidMount=function(){var e=this;window.addEventListener("hashchange",(function(){return e.forceUpdate()}),!1)},t.prototype.render=function(){var e=window.location.hash;return e.substring(e.indexOf("#")+1).toLowerCase(),r.createElement($,null,r.createElement(H,null,r.createElement(q,{path:"/portfolio"},r.createElement(se,null)),r.createElement(q,{path:"/games"},r.createElement(pe,null)),r.createElement(q,{path:"/visuals"},r.createElement(ye,null)),r.createElement(q,{path:"/"},r.createElement(ne,null))))},t}(r.PureComponent);const we=(0,i.hot)(e)(be)},4323:(e,t,n)=>{"use strict";var r=n(7294),o=n(3935),i=n(594);o.render(r.createElement(i.Z,null),document.getElementById("root"))},4184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var i=typeof n;if("string"===i||"number"===i)e.push(n);else if(Array.isArray(n)){if(n.length){var a=o.apply(null,n);a&&e.push(a)}}else if("object"===i)if(n.toString===Object.prototype.toString)for(var l in n)r.call(n,l)&&n[l]&&e.push(l);else e.push(n.toString())}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},6704:(e,t,n)=>{(e.exports=n(9252)(!1)).push([e.id,".carousel .control-arrow,.carousel.carousel-slider .control-arrow{-webkit-transition:all .25s ease-in;-moz-transition:all .25s ease-in;-ms-transition:all .25s ease-in;-o-transition:all .25s ease-in;transition:all .25s ease-in;opacity:.4;filter:alpha(opacity=40);position:absolute;z-index:2;top:20px;background:none;border:0;font-size:32px;cursor:pointer}.carousel .control-arrow:focus,.carousel .control-arrow:hover{opacity:1;filter:alpha(opacity=100)}.carousel .control-arrow:before,.carousel.carousel-slider .control-arrow:before{margin:0 5px;display:inline-block;border-top:8px solid transparent;border-bottom:8px solid transparent;content:''}.carousel .control-disabled.control-arrow{opacity:0;filter:alpha(opacity=0);cursor:inherit;display:none}.carousel .control-prev.control-arrow{left:0}.carousel .control-prev.control-arrow:before{border-right:8px solid #fff}.carousel .control-next.control-arrow{right:0}.carousel .control-next.control-arrow:before{border-left:8px solid #fff}.carousel-root{outline:none}.carousel{position:relative;width:100%}.carousel *{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.carousel img{width:100%;display:inline-block;pointer-events:none}.carousel .carousel{position:relative}.carousel .control-arrow{outline:0;border:0;background:none;top:50%;margin-top:-13px;font-size:18px}.carousel .thumbs-wrapper{margin:20px;overflow:hidden}.carousel .thumbs{-webkit-transition:all .15s ease-in;-moz-transition:all .15s ease-in;-ms-transition:all .15s ease-in;-o-transition:all .15s ease-in;transition:all .15s ease-in;-webkit-transform:translate3d(0, 0, 0);-moz-transform:translate3d(0, 0, 0);-ms-transform:translate3d(0, 0, 0);-o-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);position:relative;list-style:none;white-space:nowrap}.carousel .thumb{-webkit-transition:border .15s ease-in;-moz-transition:border .15s ease-in;-ms-transition:border .15s ease-in;-o-transition:border .15s ease-in;transition:border .15s ease-in;display:inline-block;margin-right:6px;white-space:nowrap;overflow:hidden;border:3px solid #fff;padding:2px}.carousel .thumb:focus{border:3px solid #ccc;outline:none}.carousel .thumb.selected,.carousel .thumb:hover{border:3px solid #333}.carousel .thumb img{vertical-align:top}.carousel.carousel-slider{position:relative;margin:0;overflow:hidden}.carousel.carousel-slider .control-arrow{top:0;color:#fff;font-size:26px;bottom:0;margin-top:0;padding:5px}.carousel.carousel-slider .control-arrow:hover{background:rgba(0,0,0,0.2)}.carousel .slider-wrapper{overflow:hidden;margin:auto;width:100%;-webkit-transition:height .15s ease-in;-moz-transition:height .15s ease-in;-ms-transition:height .15s ease-in;-o-transition:height .15s ease-in;transition:height .15s ease-in}.carousel .slider-wrapper.axis-horizontal .slider{-ms-box-orient:horizontal;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-moz-flex;display:-webkit-flex;display:flex}.carousel .slider-wrapper.axis-horizontal .slider .slide{flex-direction:column;flex-flow:column}.carousel .slider-wrapper.axis-vertical{-ms-box-orient:horizontal;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-moz-flex;display:-webkit-flex;display:flex}.carousel .slider-wrapper.axis-vertical .slider{-webkit-flex-direction:column;flex-direction:column}.carousel .slider{margin:0;padding:0;position:relative;list-style:none;width:100%}.carousel .slider.animated{-webkit-transition:all .35s ease-in-out;-moz-transition:all .35s ease-in-out;-ms-transition:all .35s ease-in-out;-o-transition:all .35s ease-in-out;transition:all .35s ease-in-out}.carousel .slide{min-width:100%;margin:0;position:relative;text-align:center}.carousel .slide img{width:100%;vertical-align:top;border:0}.carousel .slide iframe{display:inline-block;width:calc(100% - 80px);margin:0 40px 40px;border:0}.carousel .slide .legend{-webkit-transition:all .5s ease-in-out;-moz-transition:all .5s ease-in-out;-ms-transition:all .5s ease-in-out;-o-transition:all .5s ease-in-out;transition:all .5s ease-in-out;position:absolute;bottom:40px;left:50%;margin-left:-45%;width:90%;border-radius:10px;background:#000;color:#fff;padding:10px;font-size:12px;text-align:center;opacity:0.25;-webkit-transition:opacity .35s ease-in-out;-moz-transition:opacity .35s ease-in-out;-ms-transition:opacity .35s ease-in-out;-o-transition:opacity .35s ease-in-out;transition:opacity .35s ease-in-out}.carousel .control-dots{position:absolute;bottom:0;margin:10px 0;padding:0;text-align:center;width:100%;z-index:1}@media (min-width: 960px){.carousel .control-dots{bottom:0}}.carousel .control-dots .dot{-webkit-transition:opacity .25s ease-in;-moz-transition:opacity .25s ease-in;-ms-transition:opacity .25s ease-in;-o-transition:opacity .25s ease-in;transition:opacity .25s ease-in;opacity:.3;filter:alpha(opacity=30);box-shadow:1px 1px 2px rgba(0,0,0,0.9);background:#fff;border-radius:50%;width:8px;height:8px;cursor:pointer;display:inline-block;margin:0 8px}.carousel .control-dots .dot.selected,.carousel .control-dots .dot:hover{opacity:1;filter:alpha(opacity=100)}.carousel .carousel-status{position:absolute;top:0;right:0;padding:5px;font-size:10px;text-shadow:1px 1px 1px rgba(0,0,0,0.9);color:#fff}.carousel:hover .slide .legend{opacity:1}\n",""])},514:(e,t,n)=>{var r=n(3456);(e.exports=n(9252)(!1)).push([e.id,'@font-face{font-family:"Klein";src:url('+r(n(7394))+') format("truetype");font-style:normal}:root{font-family:"Klein";font-size:16px;color:#121212}body{background-color:#FAFAFA;margin:0}#root{display:flex;flex-direction:column;justify-content:flex-start;align-items:center;margin-left:calc(100vw - 100%)}#root nav,#root section{max-width:1024px}\n',""])},6486:(e,t,n)=>{(e.exports=n(9252)(!1)).push([e.id,".navigation{width:100%;margin:2rem 2rem 4rem}.navigation ul{display:flex;flex-direction:row;justify-content:flex-end;align-items:center}.navigation li+li{padding-left:2rem}.navigation a{color:#121212;font-size:1.15rem}.navigation a:hover,.navigation a:active,.navigation a:focus,.navigation a.active{color:#121212}.navigation a::after{background-color:#121212}\n",""])},5912:(e,t,n)=>{(e.exports=n(9252)(!1)).push([e.id,".project-display{display:flex;flex-direction:row;justify-content:center;align-items:center;flex-wrap:wrap}.project-display h1{flex-basis:100%;padding:0 0.5rem;border-bottom:1px solid #CCCCCC}.project-display a{border-radius:1rem;box-shadow:0rem 0rem 2rem #CCCCCC;overflow:hidden;padding:0;margin:1rem}.project-display a::after{content:none}.project-display a:hover figcaption,.project-display a:active figcaption,.project-display a:focus figcaption{transform:translateY(0%)}.project-display figure{position:relative}.project-display figure img{display:block;border-radius:inherit}.project-display figure figcaption{transition:transform 250ms ease-in-out;position:absolute;background-color:rgba(0,0,0,0.85);transform:translateY(100%);bottom:0;left:0;right:0;padding:1.5rem}.project-display figure figcaption span{display:block;color:#FAFAFA;background-color:transparent}.project-display figure figcaption .title{font-weight:bold}.project-display figure figcaption .description{margin-top:0.5rem;font-size:0.8rem}\n",""])},7342:(e,t,n)=>{(e.exports=n(9252)(!1)).push([e.id,".profile{display:flex;flex-direction:column;justify-content:center;align-items:center;width:100vw;height:100vh}.profile div{display:flex;flex-direction:column;justify-content:center;align-items:center}.profile img{border-radius:50%;box-shadow:0 0 1rem #AAAAAA}.profile h1{font-size:2.25rem;margin:2rem 0 1rem}.profile .portfolio-link{transition:color 250ms ease-in-out,background-color 250ms ease-in-out;color:#121212;outline:none;padding:1rem 4rem;border:2px solid #121212;margin:3rem 0}.profile .portfolio-link:hover,.profile .portfolio-link:active,.profile .portfolio-link:focus{color:#FAFAFA;background-color:#121212}.profile .portfolio-link::after{content:none}.profile a{font-size:1.15rem}.profile a+a{margin-left:4rem}\n",""])},5374:(e,t,n)=>{(e.exports=n(9252)(!1)).push([e.id,".visuals .carousel{margin-bottom:2rem}.visuals .carousel .slide{display:flex}.visuals .carousel .slide .legend{font-size:1rem;color:#FFFFFF;background-color:transparent;opacity:1;bottom:1rem}.visuals .carousel .slide a{padding:0}.visuals .carousel .slide a::after{content:none}.visuals .project{margin:0.5rem}.visuals .project figcaption{background-color:transparent;padding:0 0 1rem}.visuals .project figcaption .title{text-align:center;font-weight:normal}\n",""])},3746:(e,t,n)=>{(e.exports=n(9252)(!1)).push([e.id,'a{position:relative;color:#0070cc;outline:none;padding:0rem 0.5rem}a:hover,a:active,a:focus,a.active{transition:color 250ms ease-in-out;color:#0086f3}a:hover::after,a:active::after,a:focus::after,a.active::after{width:100%;left:0%}a::after{transition:width 250ms ease-in-out,left 250ms ease-in-out;content:"";position:absolute;background-color:#0086f3;width:0;height:1px;left:50%;bottom:0}\n',""])},9203:(e,t,n)=>{(e.exports=n(9252)(!1)).push([e.id,"*{color:inherit;background-color:inherit;padding:0;border:none;margin:0}ul,ol{list-style-type:none}a{text-decoration:none}button{cursor:pointer;color:inherit;background-color:inherit;font-family:inherit;font-size:inherit}h1,h2{font-weight:normal}\n",""])},9252:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n,r=e[1]||"",o=e[3];if(!o)return r;if(t&&"function"==typeof btoa){var i=(n=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"),a=o.sources.map((function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"}));return[r].concat(a).concat([i]).join("\n")}return[r].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},3456:e=>{e.exports=function(e){return"string"!=typeof e?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),/["'() \t\n]/.test(e)?'"'+e.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':e)}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,l,u=o(e),s=1;s<arguments.length;s++){for(var c in a=Object(arguments[s]))n.call(a,c)&&(u[c]=a[c]);if(t){l=t(a);for(var f=0;f<l.length;f++)r.call(a,l[f])&&(u[l[f]]=a[l[f]])}}return u}},2703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(7418),i=n(297);function a(e,t,n,r,o,i,a,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,i,a,l],s=0;(e=Error(t.replace(/%s/g,(function(){return u[s++]})))).name="Invariant Violation"}throw e.framesToPop=1,e}}function l(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);a(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}function u(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}r||l("227");var s=!1,c=null,f=!1,p=null,d={onError:function(e){s=!0,c=e}};function h(e,t,n,r,o,i,a,l,f){s=!1,c=null,u.apply(d,arguments)}var m=null,v={};function y(){if(m)for(var e in v){var t=v[e],n=m.indexOf(e);if(-1<n||l("96",e),!b[n])for(var r in t.extractEvents||l("97",e),b[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,u=r;w.hasOwnProperty(u)&&l("99",u),w[u]=i;var s=i.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&g(s[o],a,u);o=!0}else i.registrationName?(g(i.registrationName,a,u),o=!0):o=!1;o||l("98",r,e)}}}function g(e,t,n){_[e]&&l("100",e),_[e]=t,k[e]=t.eventTypes[n].dependencies}var b=[],w={},_={},k={},x=null,S=null,E=null;function C(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=E(r),function(e,t,n,r,o,i,a,u,d){if(h.apply(this,arguments),s){if(s){var m=c;s=!1,c=null}else l("198"),m=void 0;f||(f=!0,p=m)}}(t,n,void 0,e),e.currentTarget=null}function T(e,t){return null==t&&l("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function P(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var O=null;function j(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)C(e,t,n[o],r[o]);else n&&C(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function R(e){return j(e,!0)}function I(e){return j(e,!1)}var M={injectEventPluginOrder:function(e){m&&l("101"),m=Array.prototype.slice.call(e),y()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];v.hasOwnProperty(t)&&v[t]===r||(v[t]&&l("102",t),v[t]=r,n=!0)}n&&y()}};function N(e,t){var n=e.stateNode;if(!n)return null;var r=x(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&l("231",t,typeof n),n)}function A(e,t){if(null!==e&&(O=T(O,e)),e=O,O=null,e&&(P(e,t?R:I),O&&l("95"),f))throw t=p,f=!1,p=null,t}var L=Math.random().toString(36).slice(2),D="__reactInternalInstance$"+L,z="__reactEventHandlers$"+L;function U(e){if(e[D])return e[D];for(;!e[D];){if(!e.parentNode)return null;e=e.parentNode}return 7===(e=e[D]).tag||8===e.tag?e:null}function F(e){return!(e=e[D])||7!==e.tag&&8!==e.tag?null:e}function W(e){if(7===e.tag||8===e.tag)return e.stateNode;l("33")}function q(e){return e[z]||null}function H(e){do{e=e.return}while(e&&7!==e.tag);return e||null}function $(e,t,n){(t=N(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=T(n._dispatchListeners,t),n._dispatchInstances=T(n._dispatchInstances,e))}function B(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=H(t);for(t=n.length;0<t--;)$(n[t],"captured",e);for(t=0;t<n.length;t++)$(n[t],"bubbled",e)}}function V(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=N(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=T(n._dispatchListeners,t),n._dispatchInstances=T(n._dispatchInstances,e))}function K(e){e&&e.dispatchConfig.registrationName&&V(e._targetInst,null,e)}function Q(e){P(e,B)}var Y=!("undefined"==typeof window||!window.document||!window.document.createElement);function X(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var G={animationend:X("Animation","AnimationEnd"),animationiteration:X("Animation","AnimationIteration"),animationstart:X("Animation","AnimationStart"),transitionend:X("Transition","TransitionEnd")},J={},Z={};function ee(e){if(J[e])return J[e];if(!G[e])return e;var t,n=G[e];for(t in n)if(n.hasOwnProperty(t)&&t in Z)return J[e]=n[t];return e}Y&&(Z=document.createElement("div").style,"AnimationEvent"in window||(delete G.animationend.animation,delete G.animationiteration.animation,delete G.animationstart.animation),"TransitionEvent"in window||delete G.transitionend.transition);var te=ee("animationend"),ne=ee("animationiteration"),re=ee("animationstart"),oe=ee("transitionend"),ie="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ae=null,le=null,ue=null;function se(){if(ue)return ue;var e,t,n=le,r=n.length,o="value"in ae?ae.value:ae.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ue=o.slice(e,1<t?1-t:void 0)}function ce(){return!0}function fe(){return!1}function pe(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ce:fe,this.isPropagationStopped=fe,this}function de(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function he(e){e instanceof this||l("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function me(e){e.eventPool=[],e.getPooled=de,e.release=he}o(pe.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ce)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ce)},persist:function(){this.isPersistent=ce},isPersistent:fe,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=fe,this._dispatchInstances=this._dispatchListeners=null}}),pe.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},pe.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,me(n),n},me(pe);var ve=pe.extend({data:null}),ye=pe.extend({data:null}),ge=[9,13,27,32],be=Y&&"CompositionEvent"in window,we=null;Y&&"documentMode"in document&&(we=document.documentMode);var _e=Y&&"TextEvent"in window&&!we,ke=Y&&(!be||we&&8<we&&11>=we),xe=String.fromCharCode(32),Se={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Ee=!1;function Ce(e,t){switch(e){case"keyup":return-1!==ge.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Te(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Pe=!1,Oe={eventTypes:Se,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(be)e:{switch(e){case"compositionstart":o=Se.compositionStart;break e;case"compositionend":o=Se.compositionEnd;break e;case"compositionupdate":o=Se.compositionUpdate;break e}o=void 0}else Pe?Ce(e,n)&&(o=Se.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Se.compositionStart);return o?(ke&&"ko"!==n.locale&&(Pe||o!==Se.compositionStart?o===Se.compositionEnd&&Pe&&(i=se()):(le="value"in(ae=r)?ae.value:ae.textContent,Pe=!0)),o=ve.getPooled(o,t,n,r),(i||null!==(i=Te(n)))&&(o.data=i),Q(o),i=o):i=null,(e=_e?function(e,t){switch(e){case"compositionend":return Te(t);case"keypress":return 32!==t.which?null:(Ee=!0,xe);case"textInput":return(e=t.data)===xe&&Ee?null:e;default:return null}}(e,n):function(e,t){if(Pe)return"compositionend"===e||!be&&Ce(e,t)?(e=se(),ue=le=ae=null,Pe=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ke&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=ye.getPooled(Se.beforeInput,t,n,r)).data=e,Q(t)):t=null,null===i?t:null===t?i:[i,t]}},je=null,Re=null,Ie=null;function Me(e){if(e=S(e)){"function"!=typeof je&&l("280");var t=x(e.stateNode);je(e.stateNode,e.type,t)}}function Ne(e){Re?Ie?Ie.push(e):Ie=[e]:Re=e}function Ae(){if(Re){var e=Re,t=Ie;if(Ie=Re=null,Me(e),t)for(e=0;e<t.length;e++)Me(t[e])}}function Le(e,t){return e(t)}function De(e,t,n){return e(t,n)}function ze(){}var Ue=!1;function Fe(e,t){if(Ue)return e(t);Ue=!0;try{return Le(e,t)}finally{Ue=!1,(null!==Re||null!==Ie)&&(ze(),Ae())}}var We={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qe(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!We[e.type]:"textarea"===t}function He(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function $e(e){if(!Y)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function Be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ve(e){e._valueTracker||(e._valueTracker=function(e){var t=Be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Ke(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Qe=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Ye=/^(.*)[\\\/]/,Xe="function"==typeof Symbol&&Symbol.for,Ge=Xe?Symbol.for("react.element"):60103,Je=Xe?Symbol.for("react.portal"):60106,Ze=Xe?Symbol.for("react.fragment"):60107,et=Xe?Symbol.for("react.strict_mode"):60108,tt=Xe?Symbol.for("react.profiler"):60114,nt=Xe?Symbol.for("react.provider"):60109,rt=Xe?Symbol.for("react.context"):60110,ot=Xe?Symbol.for("react.async_mode"):60111,it=Xe?Symbol.for("react.forward_ref"):60112,at=Xe?Symbol.for("react.placeholder"):60113,lt="function"==typeof Symbol&&Symbol.iterator;function ut(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=lt&&e[lt]||e["@@iterator"])?e:null}function st(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ot:return"AsyncMode";case Ze:return"Fragment";case Je:return"Portal";case tt:return"Profiler";case et:return"StrictMode";case at:return"Placeholder"}if("object"==typeof e){switch(e.$$typeof){case rt:return"Context.Consumer";case nt:return"Context.Provider";case it:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef")}if("function"==typeof e.then&&(e=1===e._reactStatus?e._reactResult:null))return st(e)}return null}function ct(e){var t="";do{e:switch(e.tag){case 4:case 0:case 1:case 2:case 3:case 7:case 10:var n=e._debugOwner,r=e._debugSource,o=st(e.type),i=null;n&&(i=st(n.type)),n=o,o="",r?o=" (at "+r.fileName.replace(Ye,"")+":"+r.lineNumber+")":i&&(o=" (created by "+i+")"),i="\n    in "+(n||"Unknown")+o;break e;default:i=""}t+=i,e=e.return}while(e);return t}var ft=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pt=Object.prototype.hasOwnProperty,dt={},ht={};function mt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var vt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){vt[e]=new mt(e,0,!1,e,null)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];vt[t]=new mt(t,1,!1,e[1],null)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){vt[e]=new mt(e,2,!1,e.toLowerCase(),null)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){vt[e]=new mt(e,2,!1,e,null)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){vt[e]=new mt(e,3,!1,e.toLowerCase(),null)})),["checked","multiple","muted","selected"].forEach((function(e){vt[e]=new mt(e,3,!0,e,null)})),["capture","download"].forEach((function(e){vt[e]=new mt(e,4,!1,e,null)})),["cols","rows","size","span"].forEach((function(e){vt[e]=new mt(e,6,!1,e,null)})),["rowSpan","start"].forEach((function(e){vt[e]=new mt(e,5,!1,e.toLowerCase(),null)}));var yt=/[\-:]([a-z])/g;function gt(e){return e[1].toUpperCase()}function bt(e,t,n,r){var o=vt.hasOwnProperty(t)?vt[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!pt.call(ht,e)||!pt.call(dt,e)&&(ft.test(e)?ht[e]=!0:(dt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function wt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function _t(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function kt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=wt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xt(e,t){null!=(t=t.checked)&&bt(e,"checked",t,!1)}function St(e,t){xt(e,t);var n=wt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ct(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ct(e,t.type,wt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Et(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ct(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(yt,gt);vt[t]=new mt(t,1,!1,e,null)})),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(yt,gt);vt[t]=new mt(t,1,!1,e,"http://www.w3.org/1999/xlink")})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(yt,gt);vt[t]=new mt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")})),vt.tabIndex=new mt("tabIndex",1,!1,"tabindex",null);var Tt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Pt(e,t,n){return(e=pe.getPooled(Tt.change,e,t,n)).type="change",Ne(n),Q(e),e}var Ot=null,jt=null;function Rt(e){A(e,!1)}function It(e){if(Ke(W(e)))return e}function Mt(e,t){if("change"===e)return t}var Nt=!1;function At(){Ot&&(Ot.detachEvent("onpropertychange",Lt),jt=Ot=null)}function Lt(e){"value"===e.propertyName&&It(jt)&&Fe(Rt,e=Pt(jt,e,He(e)))}function Dt(e,t,n){"focus"===e?(At(),jt=n,(Ot=t).attachEvent("onpropertychange",Lt)):"blur"===e&&At()}function zt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return It(jt)}function Ut(e,t){if("click"===e)return It(t)}function Ft(e,t){if("input"===e||"change"===e)return It(t)}Y&&(Nt=$e("input")&&(!document.documentMode||9<document.documentMode));var Wt={eventTypes:Tt,_isInputEventSupported:Nt,extractEvents:function(e,t,n,r){var o=t?W(t):window,i=void 0,a=void 0,l=o.nodeName&&o.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===o.type?i=Mt:qe(o)?Nt?i=Ft:(i=zt,a=Dt):(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Ut),i&&(i=i(e,t)))return Pt(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Ct(o,"number",o.value)}},qt=pe.extend({view:null,detail:null}),Ht={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function $t(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ht[e])&&!!t[e]}function Bt(){return $t}var Vt=0,Kt=0,Qt=!1,Yt=!1,Xt=qt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Bt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Vt;return Vt=e.screenX,Qt?"mousemove"===e.type?e.screenX-t:0:(Qt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Kt;return Kt=e.screenY,Yt?"mousemove"===e.type?e.screenY-t:0:(Yt=!0,0)}}),Gt=Xt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Jt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Zt={eventTypes:Jt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?U(t):null):i=null,i===t)return null;var a=void 0,l=void 0,u=void 0,s=void 0;"mouseout"===e||"mouseover"===e?(a=Xt,l=Jt.mouseLeave,u=Jt.mouseEnter,s="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Gt,l=Jt.pointerLeave,u=Jt.pointerEnter,s="pointer");var c=null==i?o:W(i);if(o=null==t?o:W(t),(e=a.getPooled(l,i,n,r)).type=s+"leave",e.target=c,e.relatedTarget=o,(n=a.getPooled(u,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=c,r=t,i&&r)e:{for(o=r,s=0,a=t=i;a;a=H(a))s++;for(a=0,u=o;u;u=H(u))a++;for(;0<s-a;)t=H(t),s--;for(;0<a-s;)o=H(o),a--;for(;s--;){if(t===o||t===o.alternate)break e;t=H(t),o=H(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(s=i.alternate)||s!==o);)t.push(i),i=H(i);for(i=[];r&&r!==o&&(null===(s=r.alternate)||s!==o);)i.push(r),r=H(r);for(r=0;r<t.length;r++)V(t[r],"bubbled",e);for(r=i.length;0<r--;)V(i[r],"captured",n);return[e,n]}},en=Object.prototype.hasOwnProperty;function tn(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function nn(e,t){if(tn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!en.call(t,n[r])||!tn(e[n[r]],t[n[r]]))return!1;return!0}function rn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 5===t.tag?2:3}function on(e){2!==rn(e)&&l("188")}function an(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=rn(e))&&l("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return on(o),e;if(a===r)return on(o),t;a=a.sibling}l("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var u=o.child;u;){if(u===n){a=!0,n=o,r=i;break}if(u===r){a=!0,r=o,n=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===n){a=!0,n=i,r=o;break}if(u===r){a=!0,r=i,n=o;break}u=u.sibling}a||l("189")}}n.alternate!==r&&l("190")}return 5!==n.tag&&l("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(7===t.tag||8===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var ln=pe.extend({animationName:null,elapsedTime:null,pseudoElement:null}),un=pe.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),sn=qt.extend({relatedTarget:null});function cn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var fn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},pn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dn=qt.extend({key:function(e){if(e.key){var t=fn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=cn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?pn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Bt,charCode:function(e){return"keypress"===e.type?cn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?cn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),hn=Xt.extend({dataTransfer:null}),mn=qt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Bt}),vn=pe.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),yn=Xt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),gn=[["abort","abort"],[te,"animationEnd"],[ne,"animationIteration"],[re,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[oe,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],bn={},wn={};function _n(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},bn[e]=t,wn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach((function(e){_n(e,!0)})),gn.forEach((function(e){_n(e,!1)}));var kn={eventTypes:bn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=wn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=wn[e];if(!o)return null;switch(e){case"keypress":if(0===cn(n))return null;case"keydown":case"keyup":e=dn;break;case"blur":case"focus":e=sn;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Xt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=hn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=mn;break;case te:case ne:case re:e=ln;break;case oe:e=vn;break;case"scroll":e=qt;break;case"wheel":e=yn;break;case"copy":case"cut":case"paste":e=un;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Gt;break;default:e=pe}return Q(t=e.getPooled(o,t,n,r)),t}},xn=kn.isInteractiveTopLevelEventType,Sn=[];function En(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=5!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=U(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=He(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,l=0;l<b.length;l++){var u=b[l];u&&(u=u.extractEvents(r,t,i,o))&&(a=T(a,u))}A(a,!1)}}var Cn=!0;function Tn(e,t){if(!t)return null;var n=(xn(e)?On:jn).bind(null,e);t.addEventListener(e,n,!1)}function Pn(e,t){if(!t)return null;var n=(xn(e)?On:jn).bind(null,e);t.addEventListener(e,n,!0)}function On(e,t){De(jn,e,t)}function jn(e,t){if(Cn){var n=He(t);if(null===(n=U(n))||"number"!=typeof n.tag||2===rn(n)||(n=null),Sn.length){var r=Sn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Fe(En,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Sn.length&&Sn.push(e)}}}var Rn={},In=0,Mn="_reactListenersID"+(""+Math.random()).slice(2);function Nn(e){return Object.prototype.hasOwnProperty.call(e,Mn)||(e[Mn]=In++,Rn[e[Mn]]={}),Rn[e[Mn]]}function An(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Ln(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Dn(e,t){var n,r=Ln(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Ln(r)}}function zn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?zn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Un(){for(var e=window,t=An();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=An(e.document)}return t}function Fn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Wn=Y&&"documentMode"in document&&11>=document.documentMode,qn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Hn=null,$n=null,Bn=null,Vn=!1;function Kn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Vn||null==Hn||Hn!==An(n)?null:(n="selectionStart"in(n=Hn)&&Fn(n)?{start:n.selectionStart,end:n.selectionEnd}:{anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Bn&&nn(Bn,n)?null:(Bn=n,(e=pe.getPooled(qn.select,$n,e,t)).type="select",e.target=Hn,Q(e),e))}var Qn={eventTypes:qn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Nn(i),o=k.onSelect;for(var a=0;a<o.length;a++){var l=o[a];if(!i.hasOwnProperty(l)||!i[l]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?W(t):window,e){case"focus":(qe(i)||"true"===i.contentEditable)&&(Hn=i,$n=t,Bn=null);break;case"blur":Bn=$n=Hn=null;break;case"mousedown":Vn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Vn=!1,Kn(n,r);case"selectionchange":if(Wn)break;case"keydown":case"keyup":return Kn(n,r)}return null}};function Yn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Xn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+wt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Gn(e,t){return null!=t.dangerouslySetInnerHTML&&l("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Jn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&l("92"),Array.isArray(t)&&(1>=t.length||l("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:wt(n)}}function Zn(e,t){var n=wt(t.value),r=wt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function er(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}M.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=q,S=F,E=W,M.injectEventPluginsByName({SimpleEventPlugin:kn,EnterLeaveEventPlugin:Zt,ChangeEventPlugin:Wt,SelectEventPlugin:Qn,BeforeInputEventPlugin:Oe});var tr="http://www.w3.org/1999/xhtml";function nr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function rr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?nr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var or,ir=void 0,ar=(or=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ir=ir||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=ir.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return or(e,t)}))}:or);function lr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ur={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},sr=["Webkit","ms","Moz","O"];function cr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||ur.hasOwnProperty(o)&&ur[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ur).forEach((function(e){sr.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ur[t]=ur[e]}))}));var fr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function pr(e,t){t&&(fr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&l("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&l("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||l("61")),null!=t.style&&"object"!=typeof t.style&&l("62",""))}function dr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function hr(e,t){var n=Nn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=k[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Pn("scroll",e);break;case"focus":case"blur":Pn("focus",e),Pn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":$e(o)&&Pn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===ie.indexOf(o)&&Tn(o,e)}n[o]=!0}}}function mr(){}var vr=null,yr=null;function gr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function br(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}function wr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function _r(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var kr=[],xr=-1;function Sr(e){0>xr||(e.current=kr[xr],kr[xr]=null,xr--)}function Er(e,t){xr++,kr[xr]=e.current,e.current=t}var Cr={},Tr={current:Cr},Pr={current:!1},Or=Cr;function jr(e,t){var n=e.type.contextTypes;if(!n)return Cr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Rr(e){return null!=e.childContextTypes}function Ir(e){Sr(Pr),Sr(Tr)}function Mr(e){Sr(Pr),Sr(Tr)}function Nr(e,t,n){Tr.current!==Cr&&l("168"),Er(Tr,t),Er(Pr,n)}function Ar(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||l("108",st(t)||"Unknown",i);return o({},n,r)}function Lr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Cr,Or=Tr.current,Er(Tr,t),Er(Pr,Pr.current),!0}function Dr(e,t,n){var r=e.stateNode;r||l("169"),n?(t=Ar(e,t,Or),r.__reactInternalMemoizedMergedChildContext=t,Sr(Pr),Sr(Tr),Er(Tr,t)):Sr(Pr),Er(Pr,n)}var zr=null,Ur=null;function Fr(e){return function(t){try{return e(t)}catch(e){}}}function Wr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function qr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Hr(e,t,n){var r=e.alternate;return null===r?((r=new Wr(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.childExpirationTime=e.childExpirationTime,r.expirationTime=t!==e.pendingProps?n:e.expirationTime,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.firstContextDependency=e.firstContextDependency,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function $r(e,t,n){var r=e.type,o=e.key;e=e.props;var i=void 0;if("function"==typeof r)i=qr(r)?2:4;else if("string"==typeof r)i=7;else e:switch(r){case Ze:return Br(e.children,t,n,o);case ot:i=10,t|=3;break;case et:i=10,t|=2;break;case tt:return(r=new Wr(15,e,o,4|t)).type=tt,r.expirationTime=n,r;case at:i=16;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case nt:i=12;break e;case rt:i=11;break e;case it:i=13;break e;default:if("function"==typeof r.then){i=4;break e}}l("130",null==r?r:typeof r,"")}return(t=new Wr(i,e,o,t)).type=r,t.expirationTime=n,t}function Br(e,t,n,r){return(e=new Wr(9,e,r,t)).expirationTime=n,e}function Vr(e,t,n){return(e=new Wr(8,e,null,t)).expirationTime=n,e}function Kr(e,t,n){return(t=new Wr(6,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Qr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n>t?e.earliestPendingTime=t:e.latestPendingTime<t&&(e.latestPendingTime=t),Yr(t,e)}function Yr(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r>e)&&(o=r),0!==(e=o)&&0!==n&&n<e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}var Xr=!1;function Gr(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Jr(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Zr(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function eo(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function to(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Gr(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Gr(e.memoizedState),o=n.updateQueue=Gr(n.memoizedState)):r=e.updateQueue=Jr(o):null===o&&(o=n.updateQueue=Jr(r));null===o||r===o?eo(r,t):null===r.lastUpdate||null===o.lastUpdate?(eo(r,t),eo(o,t)):(eo(r,t),o.lastUpdate=t)}function no(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Gr(e.memoizedState):ro(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function ro(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Jr(t)),t}function oo(e,t,n,r,i,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case 2:Xr=!0}return r}function io(e,t,n,r,o){Xr=!1;for(var i=(t=ro(e,t)).baseState,a=null,l=0,u=t.firstUpdate,s=i;null!==u;){var c=u.expirationTime;c>o?(null===a&&(a=u,i=s),(0===l||l>c)&&(l=c)):(s=oo(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(c=null,u=t.firstCapturedUpdate;null!==u;){var f=u.expirationTime;f>o?(null===c&&(c=u,null===a&&(i=s)),(0===l||l>f)&&(l=f)):(s=oo(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===a&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===c&&(i=s),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=c,e.expirationTime=l,e.memoizedState=s}function ao(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),lo(t.firstEffect,n),t.firstEffect=t.lastEffect=null,lo(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function lo(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&l("191",n),n.call(r)}e=e.nextEffect}}function uo(e,t){return{value:e,source:t,stack:ct(t)}}var so={current:null},co=null,fo=null,po=null;function ho(e,t){var n=e.type._context;Er(so,n._currentValue),n._currentValue=t}function mo(e){var t=so.current;Sr(so),e.type._context._currentValue=t}function vo(e){co=e,po=fo=null,e.firstContextDependency=null}function yo(e,t){return po!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(po=e,t=1073741823),t={context:e,observedBits:t,next:null},null===fo?(null===co&&l("277"),co.firstContextDependency=fo=t):fo=fo.next=t),e._currentValue}var go={},bo={current:go},wo={current:go},_o={current:go};function ko(e){return e===go&&l("174"),e}function xo(e,t){Er(_o,t),Er(wo,e),Er(bo,go);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:rr(null,"");break;default:t=rr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Sr(bo),Er(bo,t)}function So(e){Sr(bo),Sr(wo),Sr(_o)}function Eo(e){ko(_o.current);var t=ko(bo.current),n=rr(t,e.type);t!==n&&(Er(wo,e),Er(bo,n))}function Co(e){wo.current===e&&(Sr(bo),Sr(wo))}var To=(new r.Component).refs;function Po(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Oo={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===rn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=la(),o=Zr(r=Ni(r,e));o.payload=t,null!=n&&(o.callback=n),to(e,o),Ai(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=la(),o=Zr(r=Ni(r,e));o.tag=1,o.payload=t,null!=n&&(o.callback=n),to(e,o),Ai(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=la(),r=Zr(n=Ni(n,e));r.tag=2,null!=t&&(r.callback=t),to(e,r),Ai(e,n)}};function jo(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&nn(n,r)&&nn(o,i))}function Ro(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Oo.enqueueReplaceState(t,t.state,null)}function Io(e,t,n,r){var o=e.stateNode,i=Rr(t)?Or:Tr.current;o.props=n,o.state=e.memoizedState,o.refs=To,o.context=jr(e,i),null!==(i=e.updateQueue)&&(io(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(Po(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Oo.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(io(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Mo=Array.isArray;function No(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(2!==n.tag&&3!==n.tag&&l("110"),r=n.stateNode),r||l("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===To&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&l("284"),n._owner||l("254",e)}return e}function Ao(e,t){"textarea"!==e.type&&l("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Lo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Hr(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||8!==t.tag?((t=Vr(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function s(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=No(e,t,n),r.return=e,r):((r=$r(n,e.mode,r)).ref=No(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||6!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Kr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function f(e,t,n,r,i){return null===t||9!==t.tag?((t=Br(n,e.mode,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Vr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ge:return(n=$r(t,e.mode,n)).ref=No(e,null,t),n.return=e,n;case Je:return(t=Kr(t,e.mode,n)).return=e,t}if(Mo(t)||ut(t))return(t=Br(t,e.mode,n,null)).return=e,t;Ao(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ge:return n.key===o?n.type===Ze?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case Je:return n.key===o?c(e,t,n,r):null}if(Mo(n)||ut(n))return null!==o?null:f(e,t,n,r,null);Ao(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ge:return e=e.get(null===r.key?n:r.key)||null,r.type===Ze?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case Je:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Mo(r)||ut(r))return f(t,e=e.get(n)||null,r,o,null);Ao(t,r)}return null}function m(o,a,l,u){for(var s=null,c=null,f=a,m=a=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=d(o,f,l[m],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===c?s=y:c.sibling=y,c=y,f=v}if(m===l.length)return n(o,f),s;if(null===f){for(;m<l.length;m++)(f=p(o,l[m],u))&&(a=i(f,a,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),s}function v(o,a,u,s){var c=ut(u);"function"!=typeof c&&l("150"),null==(u=c.call(u))&&l("151");for(var f=c=null,m=a,v=a=0,y=null,g=u.next();null!==m&&!g.done;v++,g=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=d(o,m,g.value,s);if(null===b){m||(m=y);break}e&&m&&null===b.alternate&&t(o,m),a=i(b,a,v),null===f?c=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),c;if(null===m){for(;!g.done;v++,g=u.next())null!==(g=p(o,g.value,s))&&(a=i(g,a,v),null===f?c=g:f.sibling=g,f=g);return c}for(m=r(o,m);!g.done;v++,g=u.next())null!==(g=h(m,o,v,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),a=i(g,a,v),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,u){var s="object"==typeof i&&null!==i&&i.type===Ze&&null===i.key;s&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case Ge:e:{for(c=i.key,s=r;null!==s;){if(s.key===c){if(9===s.tag?i.type===Ze:s.type===i.type){n(e,s.sibling),(r=o(s,i.type===Ze?i.props.children:i.props,u)).ref=No(e,s,i),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}i.type===Ze?((r=Br(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=$r(i,e.mode,u)).ref=No(e,r,i),u.return=e,e=u)}return a(e);case Je:e:{for(s=i.key;null!==r;){if(r.key===s){if(6===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],u)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Kr(i,e.mode,u)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&8===r.tag?(n(e,r.sibling),(r=o(r,i,u)).return=e,e=r):(n(e,r),(r=Vr(i,e.mode,u)).return=e,e=r),a(e);if(Mo(i))return m(e,r,i,u);if(ut(i))return v(e,r,i,u);if(c&&Ao(e,i),void 0===i&&!s)switch(e.tag){case 2:case 3:case 0:l("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var Do=Lo(!0),zo=Lo(!1),Uo=null,Fo=null,Wo=!1;function qo(e,t){var n=new Wr(7,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ho(e,t){switch(e.tag){case 7:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 8:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function $o(e){if(Wo){var t=Fo;if(t){var n=t;if(!Ho(e,t)){if(!(t=wr(n))||!Ho(e,t))return e.effectTag|=2,Wo=!1,void(Uo=e);qo(Uo,n)}Uo=e,Fo=_r(t)}else e.effectTag|=2,Wo=!1,Uo=e}}function Bo(e){for(e=e.return;null!==e&&7!==e.tag&&5!==e.tag;)e=e.return;Uo=e}function Vo(e){if(e!==Uo)return!1;if(!Wo)return Bo(e),Wo=!0,!1;var t=e.type;if(7!==e.tag||"head"!==t&&"body"!==t&&!br(t,e.memoizedProps))for(t=Fo;t;)qo(e,t),t=wr(t);return Bo(e),Fo=Uo?wr(e.stateNode):null,!0}function Ko(){Fo=Uo=null,Wo=!1}var Qo,Yo,Xo=Qe.ReactCurrentOwner;function Go(e,t,n,r){t.child=null===e?zo(t,null,n,r):Do(t,e.child,n,r)}function Jo(e,t,n,r,o){n=n.render;var i=t.ref;return Pr.current||t.memoizedProps!==r||i!==(null!==e?e.ref:null)?(Go(e,t,n=n(r,i),o),t.memoizedProps=r,t.child):ii(e,t,o)}function Zo(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function ei(e,t,n,r,o){var i=Rr(n)?Or:Tr.current;return i=jr(t,i),vo(t),n=n(r,i),t.effectTag|=1,Go(e,t,n,o),t.memoizedProps=r,t.child}function ti(e,t,n,r,o){if(Rr(n)){var i=!0;Lr(t)}else i=!1;if(vo(t),null===e)if(null===t.stateNode){var a=Rr(n)?Or:Tr.current,l=n.contextTypes,u=null!=l,s=new n(r,l=u?jr(t,a):Cr);t.memoizedState=null!==s.state&&void 0!==s.state?s.state:null,s.updater=Oo,t.stateNode=s,s._reactInternalFiber=t,u&&((u=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,u.__reactInternalMemoizedMaskedChildContext=l),Io(t,n,r,o),r=!0}else{a=t.stateNode,l=t.memoizedProps,a.props=l;var c=a.context;u=jr(t,u=Rr(n)?Or:Tr.current);var f=n.getDerivedStateFromProps;(s="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||c!==u)&&Ro(t,a,r,u),Xr=!1;var p=t.memoizedState;c=a.state=p;var d=t.updateQueue;null!==d&&(io(t,d,r,a,o),c=t.memoizedState),l!==r||p!==c||Pr.current||Xr?("function"==typeof f&&(Po(t,n,f,r),c=t.memoizedState),(l=Xr||jo(t,n,l,r,p,c,u))?(s||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=c),a.props=r,a.state=c,a.context=u,r=l):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,l=t.memoizedProps,a.props=l,c=a.context,u=jr(t,u=Rr(n)?Or:Tr.current),(s="function"==typeof(f=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||c!==u)&&Ro(t,a,r,u),Xr=!1,c=t.memoizedState,p=a.state=c,null!==(d=t.updateQueue)&&(io(t,d,r,a,o),p=t.memoizedState),l!==r||c!==p||Pr.current||Xr?("function"==typeof f&&(Po(t,n,f,r),p=t.memoizedState),(f=Xr||jo(t,n,l,r,c,p,u))?(s||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=u,r=f):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),r=!1);return ni(e,t,n,r,i,o)}function ni(e,t,n,r,o,i){Zo(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Dr(t,n,!1),ii(e,t,i);r=t.stateNode,Xo.current=t;var l=a?null:r.render();return t.effectTag|=1,null!==e&&a&&(Go(e,t,null,i),t.child=null),Go(e,t,l,i),t.memoizedState=r.state,t.memoizedProps=r.props,o&&Dr(t,n,!0),t.child}function ri(e){var t=e.stateNode;t.pendingContext?Nr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Nr(0,t.context,!1),xo(e,t.containerInfo)}function oi(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}function ii(e,t,n){null!==e&&(t.firstContextDependency=e.firstContextDependency);var r=t.childExpirationTime;if(0===r||r>n)return null;if(null!==e&&t.child!==e.child&&l("153"),null!==t.child){for(n=Hr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Hr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function ai(e){e.effectTag|=4}function li(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ct(n)),null!==n&&st(n.type),t=t.value,null!==e&&2===e.tag&&st(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function ui(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Mi(e,t)}else t.current=null}function si(e){switch("function"==typeof Ur&&Ur(e),e.tag){case 2:case 3:ui(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Mi(e,t)}break;case 7:ui(e);break;case 6:pi(e)}}function ci(e){return 7===e.tag||5===e.tag||6===e.tag}function fi(e){e:{for(var t=e.return;null!==t;){if(ci(t)){var n=t;break e}t=t.return}l("160"),n=void 0}var r=t=void 0;switch(n.tag){case 7:t=n.stateNode,r=!1;break;case 5:case 6:t=n.stateNode.containerInfo,r=!0;break;default:l("161")}16&n.effectTag&&(lr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ci(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;7!==n.tag&&8!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||6===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(7===o.tag||8===o.tag)if(n)if(r){var i=t,a=o.stateNode,u=n;8===i.nodeType?i.parentNode.insertBefore(a,u):i.insertBefore(a,u)}else t.insertBefore(o.stateNode,n);else r?(i=t,a=o.stateNode,8===i.nodeType?(u=i.parentNode).insertBefore(a,i):(u=i).appendChild(a),null===u.onclick&&(u.onclick=mr)):t.appendChild(o.stateNode);else if(6!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function pi(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&l("160"),n.tag){case 7:r=n.stateNode,o=!1;break e;case 5:case 6:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(7===t.tag||8===t.tag){e:for(var i=t,a=i;;)if(si(a),null!==a.child&&6!==a.tag)a.child.return=a,a=a.child;else{if(a===i)break;for(;null===a.sibling;){if(null===a.return||a.return===i)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}o?(i=r,a=t.stateNode,8===i.nodeType?i.parentNode.removeChild(a):i.removeChild(a)):r.removeChild(t.stateNode)}else if(6===t.tag?(r=t.stateNode.containerInfo,o=!0):si(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;6===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function di(e,t){switch(t.tag){case 2:case 3:break;case 7:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[z]=r,"input"===e&&"radio"===r.type&&null!=r.name&&xt(n,r),dr(e,o),t=dr(e,r),o=0;o<i.length;o+=2){var a=i[o],u=i[o+1];"style"===a?cr(n,u):"dangerouslySetInnerHTML"===a?ar(n,u):"children"===a?lr(n,u):bt(n,a,u,t)}switch(e){case"input":St(n,r);break;case"textarea":Zn(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?Xn(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?Xn(n,!!r.multiple,r.defaultValue,!0):Xn(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 8:null===t.stateNode&&l("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 5:case 15:case 16:break;default:l("163")}}function hi(e,t,n){(n=Zr(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){ha(r),li(e,t)},n}function mi(e,t,n){(n=Zr(n)).tag=3;var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===Pi?Pi=new Set([this]):Pi.add(this);var n=t.value,r=t.stack;li(e,t),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function vi(e){switch(e.tag){case 2:Rr(e.type)&&Ir();var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return Rr(e.type._reactResult)&&Ir(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return So(),Mr(),0!=(64&(t=e.effectTag))&&l("285"),e.effectTag=-1025&t|64,e;case 7:return Co(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 6:return So(),null;case 12:return mo(e),null;default:return null}}Qo=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var l=t.stateNode;switch(ko(bo.current),e=null,n){case"input":a=_t(l,a),r=_t(l,r),e=[];break;case"option":a=Yn(l,a),r=Yn(l,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Gn(l,a),r=Gn(l,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(l.onclick=mr)}pr(n,r),l=n=void 0;var u=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var s=a[n];for(l in s)s.hasOwnProperty(l)&&(u||(u={}),u[l]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(_.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var c=r[n];if(s=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&c!==s&&(null!=c||null!=s))if("style"===n)if(s){for(l in s)!s.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(u||(u={}),u[l]="");for(l in c)c.hasOwnProperty(l)&&s[l]!==c[l]&&(u||(u={}),u[l]=c[l])}else u||(e||(e=[]),e.push(n,u)),u=c;else"dangerouslySetInnerHTML"===n?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(n,""+c)):"children"===n?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(n,""+c):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(_.hasOwnProperty(n)?(null!=c&&hr(i,n),e||s===c||(e=[])):(e=e||[]).push(n,c))}u&&(e=e||[]).push("style",u),i=e,(t.updateQueue=i)&&ai(t)}},Yo=function(e,t,n,r){n!==r&&ai(t)};var yi={readContext:yo},gi=Qe.ReactCurrentOwner,bi=0,wi=0,_i=!1,ki=null,xi=null,Si=0,Ei=!1,Ci=null,Ti=!1,Pi=null;function Oi(){if(null!==ki)for(var e=ki.return;null!==e;){var t=e;switch(t.tag){case 2:var n=t.type.childContextTypes;null!=n&&Ir();break;case 3:null!=(n=t.type._reactResult.childContextTypes)&&Ir();break;case 5:So(),Mr();break;case 7:Co(t);break;case 6:So();break;case 12:mo(t)}e=e.return}xi=null,Si=0,Ei=!1,ki=null}function ji(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){var i=t,a=(t=e).pendingProps;switch(t.tag){case 0:case 1:break;case 2:Rr(t.type)&&Ir();break;case 3:Rr(t.type._reactResult)&&Ir();break;case 5:So(),Mr(),(a=t.stateNode).pendingContext&&(a.context=a.pendingContext,a.pendingContext=null),null!==i&&null!==i.child||(Vo(t),t.effectTag&=-3);break;case 7:Co(t);var u=ko(_o.current),s=t.type;if(null!==i&&null!=t.stateNode)Qo(i,t,s,a,u),i.ref!==t.ref&&(t.effectTag|=128);else if(a){var c=ko(bo.current);if(Vo(t)){i=(a=t).stateNode;var f=a.type,p=a.memoizedProps,d=u;switch(i[D]=a,i[z]=p,s=void 0,u=f){case"iframe":case"object":Tn("load",i);break;case"video":case"audio":for(f=0;f<ie.length;f++)Tn(ie[f],i);break;case"source":Tn("error",i);break;case"img":case"image":case"link":Tn("error",i),Tn("load",i);break;case"form":Tn("reset",i),Tn("submit",i);break;case"details":Tn("toggle",i);break;case"input":kt(i,p),Tn("invalid",i),hr(d,"onChange");break;case"select":i._wrapperState={wasMultiple:!!p.multiple},Tn("invalid",i),hr(d,"onChange");break;case"textarea":Jn(i,p),Tn("invalid",i),hr(d,"onChange")}for(s in pr(u,p),f=null,p)p.hasOwnProperty(s)&&(c=p[s],"children"===s?"string"==typeof c?i.textContent!==c&&(f=["children",c]):"number"==typeof c&&i.textContent!==""+c&&(f=["children",""+c]):_.hasOwnProperty(s)&&null!=c&&hr(d,s));switch(u){case"input":Ve(i),Et(i,p,!0);break;case"textarea":Ve(i),er(i);break;case"select":case"option":break;default:"function"==typeof p.onClick&&(i.onclick=mr)}s=f,a.updateQueue=s,(a=null!==s)&&ai(t)}else{p=t,i=s,d=a,f=9===u.nodeType?u:u.ownerDocument,c===tr&&(c=nr(i)),c===tr?"script"===i?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof d.is?f=f.createElement(i,{is:d.is}):(f=f.createElement(i),"select"===i&&d.multiple&&(f.multiple=!0)):f=f.createElementNS(c,i),(i=f)[D]=p,i[z]=a;e:for(p=i,d=t,f=d.child;null!==f;){if(7===f.tag||8===f.tag)p.appendChild(f.stateNode);else if(6!==f.tag&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===d)break;for(;null===f.sibling;){if(null===f.return||f.return===d)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}d=i;var h=u,m=dr(f=s,p=a);switch(f){case"iframe":case"object":Tn("load",d),u=p;break;case"video":case"audio":for(u=0;u<ie.length;u++)Tn(ie[u],d);u=p;break;case"source":Tn("error",d),u=p;break;case"img":case"image":case"link":Tn("error",d),Tn("load",d),u=p;break;case"form":Tn("reset",d),Tn("submit",d),u=p;break;case"details":Tn("toggle",d),u=p;break;case"input":kt(d,p),u=_t(d,p),Tn("invalid",d),hr(h,"onChange");break;case"option":u=Yn(d,p);break;case"select":d._wrapperState={wasMultiple:!!p.multiple},u=o({},p,{value:void 0}),Tn("invalid",d),hr(h,"onChange");break;case"textarea":Jn(d,p),u=Gn(d,p),Tn("invalid",d),hr(h,"onChange");break;default:u=p}pr(f,u),c=void 0;var v=f,y=d,g=u;for(c in g)if(g.hasOwnProperty(c)){var b=g[c];"style"===c?cr(y,b):"dangerouslySetInnerHTML"===c?null!=(b=b?b.__html:void 0)&&ar(y,b):"children"===c?"string"==typeof b?("textarea"!==v||""!==b)&&lr(y,b):"number"==typeof b&&lr(y,""+b):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(_.hasOwnProperty(c)?null!=b&&hr(h,c):null!=b&&bt(y,c,b,m))}switch(f){case"input":Ve(d),Et(d,p,!1);break;case"textarea":Ve(d),er(d);break;case"option":null!=p.value&&d.setAttribute("value",""+wt(p.value));break;case"select":(u=d).multiple=!!p.multiple,null!=(d=p.value)?Xn(u,!!p.multiple,d,!1):null!=p.defaultValue&&Xn(u,!!p.multiple,p.defaultValue,!0);break;default:"function"==typeof u.onClick&&(d.onclick=mr)}(a=gr(s,a))&&ai(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&l("166");break;case 8:i&&null!=t.stateNode?Yo(0,t,i.memoizedProps,a):("string"!=typeof a&&null===t.stateNode&&l("166"),i=ko(_o.current),ko(bo.current),Vo(t)?(s=(a=t).stateNode,i=a.memoizedProps,s[D]=a,(a=s.nodeValue!==i)&&ai(t)):(s=t,(a=(9===i.nodeType?i:i.ownerDocument).createTextNode(a))[D]=s,t.stateNode=a));break;case 13:case 14:case 16:case 9:case 10:case 15:break;case 6:So();break;case 12:mo(t);break;case 11:break;case 4:l("167");default:l("156")}if(t=ki=null,a=e,1073741823===Si||1073741823!==a.childExpirationTime){for(s=0,i=a.child;null!==i;)u=i.expirationTime,p=i.childExpirationTime,(0===s||0!==u&&u<s)&&(s=u),(0===s||0!==p&&p<s)&&(s=p),i=i.sibling;a.childExpirationTime=s}if(null!==t)return t;null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=vi(e)))return e.effectTag&=511,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512)}if(null!==r)return r;if(null===n)break;e=n}return null}function Ri(e){var t=function(e,t,n){var r=t.expirationTime;if(!Pr.current&&(0===r||r>n)){switch(t.tag){case 5:ri(t),Ko();break;case 7:Eo(t);break;case 2:Rr(t.type)&&Lr(t);break;case 3:Rr(t.type._reactResult)&&Lr(t);break;case 6:xo(t,t.stateNode.containerInfo);break;case 12:ho(t,t.memoizedProps.value)}return ii(e,t,n)}switch(t.expirationTime=0,t.tag){case 4:return function(e,t,n,r){null!==e&&l("155");var o=t.pendingProps;if("object"==typeof n&&null!==n&&"function"==typeof n.then){var i=n=function(e){switch(e._reactStatus){case 1:return e._reactResult;case 2:throw e._reactResult;case 0:throw e;default:throw e._reactStatus=0,e.then((function(t){if(0===e._reactStatus){if(e._reactStatus=1,"object"==typeof t&&null!==t){var n=t.default;t=null!=n?n:t}e._reactResult=t}}),(function(t){0===e._reactStatus&&(e._reactStatus=2,e._reactResult=t)})),e}}(n);i="function"==typeof i?qr(i)?3:1:null!=i&&i.$$typeof?14:4,i=t.tag=i;var a=oi(n,o);switch(i){case 1:return ei(e,t,n,a,r);case 3:return ti(e,t,n,a,r);case 14:return Jo(e,t,n,a,r);default:l("283",n)}}if(i=jr(t,Tr.current),vo(t),i=n(o,i),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){t.tag=2,Rr(n)?(a=!0,Lr(t)):a=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null;var u=n.getDerivedStateFromProps;return"function"==typeof u&&Po(t,n,u,o),i.updater=Oo,t.stateNode=i,i._reactInternalFiber=t,Io(t,n,o,r),ni(e,t,n,!0,a,r)}return t.tag=0,Go(e,t,i,r),t.memoizedProps=o,t.child}(e,t,t.type,n);case 0:return ei(e,t,t.type,t.pendingProps,n);case 1:var o=t.type._reactResult;return e=ei(e,t,o,oi(o,r=t.pendingProps),n),t.memoizedProps=r,e;case 2:return ti(e,t,t.type,t.pendingProps,n);case 3:return e=ti(e,t,o=t.type._reactResult,oi(o,r=t.pendingProps),n),t.memoizedProps=r,e;case 5:return ri(t),null===(r=t.updateQueue)&&l("282"),o=null!==(o=t.memoizedState)?o.element:null,io(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(Ko(),t=ii(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(Fo=_r(t.stateNode.containerInfo),Uo=t,o=Wo=!0),o?(t.effectTag|=2,t.child=zo(t,null,r,n)):(Go(e,t,r,n),Ko()),t=t.child),t;case 7:Eo(t),null===e&&$o(t),r=t.type,o=t.pendingProps;var i=null!==e?e.memoizedProps:null,a=o.children;return br(r,o)?a=null:null!==i&&br(r,i)&&(t.effectTag|=16),Zo(e,t),1073741823!==n&&1&t.mode&&o.hidden?(t.expirationTime=1073741823,t.memoizedProps=o,t=null):(Go(e,t,a,n),t.memoizedProps=o,t=t.child),t;case 8:return null===e&&$o(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 6:return xo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Do(t,null,r,n):Go(e,t,r,n),t.memoizedProps=r,t.child;case 13:return Jo(e,t,t.type,t.pendingProps,n);case 14:return e=Jo(e,t,o=t.type._reactResult,oi(o,r=t.pendingProps),n),t.memoizedProps=r,e;case 9:return Go(e,t,r=t.pendingProps,n),t.memoizedProps=r,t.child;case 10:return Go(e,t,r=t.pendingProps.children,n),t.memoizedProps=r,t.child;case 15:return Go(e,t,(r=t.pendingProps).children,n),t.memoizedProps=r,t.child;case 12:e:{if(r=t.type._context,o=t.pendingProps,a=t.memoizedProps,i=o.value,t.memoizedProps=o,ho(t,i),null!==a){var u=a.value;if(0==(i=u===i&&(0!==u||1/u==1/i)||u!=u&&i!=i?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(a.children===o.children&&!Pr.current){t=ii(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){if(null!==(u=a.firstContextDependency))do{if(u.context===r&&0!=(u.observedBits&i)){if(2===a.tag||3===a.tag){var s=Zr(n);s.tag=2,to(a,s)}(0===a.expirationTime||a.expirationTime>n)&&(a.expirationTime=n),null!==(s=a.alternate)&&(0===s.expirationTime||s.expirationTime>n)&&(s.expirationTime=n);for(var c=a.return;null!==c;){if(s=c.alternate,0===c.childExpirationTime||c.childExpirationTime>n)c.childExpirationTime=n,null!==s&&(0===s.childExpirationTime||s.childExpirationTime>n)&&(s.childExpirationTime=n);else{if(null===s||!(0===s.childExpirationTime||s.childExpirationTime>n))break;s.childExpirationTime=n}c=c.return}}s=a.child,u=u.next}while(null!==u);else s=12===a.tag&&a.type===t.type?null:a.child;if(null!==s)s.return=a;else for(s=a;null!==s;){if(s===t){s=null;break}if(null!==(a=s.sibling)){a.return=s.return,s=a;break}s=s.return}a=s}}Go(e,t,o.children,n),t=t.child}return t;case 11:return i=t.type,o=(r=t.pendingProps).children,vo(t),o=o(i=yo(i,r.unstable_observedBits)),t.effectTag|=1,Go(e,t,o,n),t.memoizedProps=r,t.child;default:l("156")}}(e.alternate,e,Si);return null===t&&(t=ji(e)),gi.current=null,t}function Ii(e,t,n){_i&&l("243"),_i=!0,gi.currentDispatcher=yi;var r=e.nextExpirationTimeToWorkOn;r===Si&&e===xi&&null!==ki||(Oi(),Si=r,ki=Hr((xi=e).current,null,Si),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==ki&&!da();)ki=Ri(ki);else for(;null!==ki;)ki=Ri(ki)}catch(e){if(null===ki)o=!0,ha(e);else{null===ki&&l("271");var i=ki,a=i.return;if(null!==a){e:{var u=a,s=i,c=e;a=Si,s.effectTag|=512,s.firstEffect=s.lastEffect=null,Ei=!0,c=uo(c,s);do{switch(u.tag){case 5:u.effectTag|=1024,u.expirationTime=a,no(u,a=hi(u,c,a));break e;case 2:case 3:s=c;var f=u.stateNode;if(0==(64&u.effectTag)&&null!==f&&"function"==typeof f.componentDidCatch&&(null===Pi||!Pi.has(f))){u.effectTag|=1024,u.expirationTime=a,no(u,a=mi(u,s,a));break e}}u=u.return}while(null!==u)}ki=ji(i);continue}o=!0,ha(e)}}break}if(_i=!1,po=fo=co=gi.currentDispatcher=null,o)xi=null,e.finishedWork=null;else if(null!==ki)e.finishedWork=null;else{if(null===(t=e.current.alternate)&&l("281"),xi=null,Ei){if(o=e.latestPendingTime,i=e.latestSuspendedTime,a=e.latestPingedTime,0!==o&&o>r||0!==i&&i>r||0!==a&&a>r)return e.didError=!1,0!==(n=e.latestPingedTime)&&n<=r&&(e.latestPingedTime=0),n=e.earliestPendingTime,t=e.latestPendingTime,n===r?e.earliestPendingTime=t===r?e.latestPendingTime=0:t:t===r&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,t=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=r:n>r?e.earliestSuspendedTime=r:t<r&&(e.latestSuspendedTime=r),Yr(r,e),void(e.expirationTime=e.expirationTime);if(!e.didError&&!n)return e.didError=!0,e.nextExpirationTimeToWorkOn=r,r=e.expirationTime=1,void(e.expirationTime=r)}e.pendingCommitExpirationTime=r,e.finishedWork=t}}function Mi(e,t){var n;e:{for(_i&&!Ti&&l("263"),n=e.return;null!==n;){switch(n.tag){case 2:case 3:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===Pi||!Pi.has(r))){to(n,e=mi(n,e=uo(t,e),1)),Ai(n,1),n=void 0;break e}break;case 5:to(n,e=hi(n,e=uo(t,e),1)),Ai(n,1),n=void 0;break e}n=n.return}5===e.tag&&(to(e,n=hi(e,n=uo(t,e),1)),Ai(e,1)),n=void 0}return n}function Ni(e,t){return 0!==wi?e=wi:_i?e=Ti?1:Si:1&t.mode?(e=Gi?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)),null!==xi&&e===Si&&(e+=1)):e=1,Gi&&(0===$i||e>$i)&&($i=e),e}function Ai(e,t){e:{(0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t);var n=e.alternate;null!==n&&(0===n.expirationTime||n.expirationTime>t)&&(n.expirationTime=t);var r=e.return;if(null===r&&5===e.tag)e=e.stateNode;else{for(;null!==r;){if(n=r.alternate,(0===r.childExpirationTime||r.childExpirationTime>t)&&(r.childExpirationTime=t),null!==n&&(0===n.childExpirationTime||n.childExpirationTime>t)&&(n.childExpirationTime=t),null===r.return&&5===r.tag){e=r.stateNode;break e}r=r.return}e=null}}null!==e&&(!_i&&0!==Si&&t<Si&&Oi(),Qr(e,t),_i&&!Ti&&xi===e||(t=e,e=e.expirationTime,null===t.nextScheduledRoot?(t.expirationTime=e,null===zi?(Di=zi=t,t.nextScheduledRoot=t):(zi=zi.nextScheduledRoot=t).nextScheduledRoot=Di):(0===(n=t.expirationTime)||e<n)&&(t.expirationTime=e),Wi||(Yi?Xi&&(qi=t,Hi=1,fa(t,1,!0)):1===e?ca(1,null):aa(t,e))),ra>na&&(ra=0,l("185")))}function Li(e,t,n,r,o){var i=wi;wi=1;try{return e(t,n,r,o)}finally{wi=i}}var Di=null,zi=null,Ui=0,Fi=void 0,Wi=!1,qi=null,Hi=0,$i=0,Bi=!1,Vi=!1,Ki=null,Qi=null,Yi=!1,Xi=!1,Gi=!1,Ji=null,Zi=i.unstable_now(),ea=2+(Zi/10|0),ta=ea,na=50,ra=0,oa=null;function ia(){ea=2+((i.unstable_now()-Zi)/10|0)}function aa(e,t){if(0!==Ui){if(t>Ui)return;null!==Fi&&i.unstable_cancelScheduledWork(Fi)}Ui=t,e=i.unstable_now()-Zi,Fi=i.unstable_scheduleWork(sa,{timeout:10*(t-2)-e})}function la(){return Wi||(ua(),0!==Hi&&1073741823!==Hi||(ia(),ta=ea)),ta}function ua(){var e=0,t=null;if(null!==zi)for(var n=zi,r=Di;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===zi)&&l("244"),r===r.nextScheduledRoot){Di=zi=r.nextScheduledRoot=null;break}if(r===Di)Di=o=r.nextScheduledRoot,zi.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===zi){(zi=n).nextScheduledRoot=Di,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===zi)break;if(1===e)break;n=r,r=r.nextScheduledRoot}}qi=t,Hi=e}function sa(e){if(e.didTimeout&&null!==Di){ia();var t=Di;do{var n=t.expirationTime;0!==n&&ea>=n&&(t.nextExpirationTimeToWorkOn=ea),t=t.nextScheduledRoot}while(t!==Di)}ca(0,e)}function ca(e,t){if(Qi=t,ua(),null!==Qi)for(ia(),ta=ea;null!==qi&&0!==Hi&&(0===e||e>=Hi)&&(!Bi||ea>=Hi);)fa(qi,Hi,ea>=Hi),ua(),ia(),ta=ea;else for(;null!==qi&&0!==Hi&&(0===e||e>=Hi);)fa(qi,Hi,!0),ua();if(null!==Qi&&(Ui=0,Fi=null),0!==Hi&&aa(qi,Hi),Qi=null,Bi=!1,ra=0,oa=null,null!==Ji)for(e=Ji,Ji=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){Vi||(Vi=!0,Ki=e)}}if(Vi)throw e=Ki,Ki=null,Vi=!1,e}function fa(e,t,n){if(Wi&&l("245"),Wi=!0,null===Qi||n){var r=e.finishedWork;null!==r?pa(e,r,t):(e.finishedWork=null,Ii(e,!1,n),null!==(r=e.finishedWork)&&pa(e,r,t))}else null!==(r=e.finishedWork)?pa(e,r,t):(e.finishedWork=null,Ii(e,!0,n),null!==(r=e.finishedWork)&&(da()?e.finishedWork=r:pa(e,r,t)));Wi=!1}function pa(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Ji?Ji=[r]:Ji.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===oa?ra++:(oa=e,ra=0),Ti=_i=!0,e.current===t&&l("177"),0===(n=e.pendingCommitExpirationTime)&&l("261"),e.pendingCommitExpirationTime=0,r=t.expirationTime;var o=t.childExpirationTime;if(r=0===r||0!==o&&o<r?o:r,e.didError=!1,0===r?(e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0):(0!==(o=e.latestPendingTime)&&(o<r?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime<r&&(e.earliestPendingTime=e.latestPendingTime)),0===(o=e.earliestSuspendedTime)?Qr(e,r):r>e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Qr(e,r)):r<o&&Qr(e,r)),Yr(0,e),gi.current=null,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,vr=Cn,Fn(o=Un())){if("selectionStart"in o)var i={start:o.selectionStart,end:o.selectionEnd};else e:{var a=(i=(i=o.ownerDocument)&&i.defaultView||window).getSelection&&i.getSelection();if(a&&0!==a.rangeCount){i=a.anchorNode;var u=a.anchorOffset,s=a.focusNode;a=a.focusOffset;try{i.nodeType,s.nodeType}catch(e){i=null;break e}var c=0,f=-1,p=-1,d=0,h=0,m=o,v=null;t:for(;;){for(var y;m!==i||0!==u&&3!==m.nodeType||(f=c+u),m!==s||0!==a&&3!==m.nodeType||(p=c+a),3===m.nodeType&&(c+=m.nodeValue.length),null!==(y=m.firstChild);)v=m,m=y;for(;;){if(m===o)break t;if(v===i&&++d===u&&(f=c),v===s&&++h===a&&(p=c),null!==(y=m.nextSibling))break;v=(m=v).parentNode}m=y}i=-1===f||-1===p?null:{start:f,end:p}}else i=null}i=i||{start:0,end:0}}else i=null;for(yr={focusedElem:o,selectionRange:i},Cn=!1,Ci=r;null!==Ci;){o=!1,i=void 0;try{for(;null!==Ci;){if(256&Ci.effectTag){var g=Ci.alternate;e:switch(u=Ci,u.tag){case 2:case 3:if(256&u.effectTag&&null!==g){var b=g.memoizedProps,w=g.memoizedState,_=u.stateNode;_.props=u.memoizedProps,_.state=u.memoizedState;var k=_.getSnapshotBeforeUpdate(b,w);_.__reactInternalSnapshotBeforeUpdate=k}break e;case 5:case 7:case 8:case 6:break e;default:l("163")}}Ci=Ci.nextEffect}}catch(e){o=!0,i=e}o&&(null===Ci&&l("178"),Mi(Ci,i),null!==Ci&&(Ci=Ci.nextEffect))}for(Ci=r;null!==Ci;){g=!1,b=void 0;try{for(;null!==Ci;){var x=Ci.effectTag;if(16&x&&lr(Ci.stateNode,""),128&x){var S=Ci.alternate;if(null!==S){var E=S.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(14&x){case 2:fi(Ci),Ci.effectTag&=-3;break;case 6:fi(Ci),Ci.effectTag&=-3,di(Ci.alternate,Ci);break;case 4:di(Ci.alternate,Ci);break;case 8:pi(w=Ci),w.return=null,w.child=null,w.alternate&&(w.alternate.child=null,w.alternate.return=null)}Ci=Ci.nextEffect}}catch(e){g=!0,b=e}g&&(null===Ci&&l("178"),Mi(Ci,b),null!==Ci&&(Ci=Ci.nextEffect))}if(E=yr,S=Un(),x=E.focusedElem,b=E.selectionRange,S!==x&&x&&x.ownerDocument&&zn(x.ownerDocument.documentElement,x)){null!==b&&Fn(x)&&(S=b.start,void 0===(E=b.end)&&(E=S),"selectionStart"in x?(x.selectionStart=S,x.selectionEnd=Math.min(E,x.value.length)):(S=((g=x.ownerDocument||document)&&g.defaultView||window).getSelection(),w=x.textContent.length,E=Math.min(b.start,w),b=void 0===b.end?E:Math.min(b.end,w),!S.extend&&E>b&&(w=b,b=E,E=w),w=Dn(x,E),_=Dn(x,b),w&&_&&(1!==S.rangeCount||S.anchorNode!==w.node||S.anchorOffset!==w.offset||S.focusNode!==_.node||S.focusOffset!==_.offset)&&((g=g.createRange()).setStart(w.node,w.offset),S.removeAllRanges(),E>b?(S.addRange(g),S.extend(_.node,_.offset)):(g.setEnd(_.node,_.offset),S.addRange(g))))),S=[];for(E=x;E=E.parentNode;)1===E.nodeType&&S.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof x.focus&&x.focus(),x=0;x<S.length;x++)(E=S[x]).element.scrollLeft=E.left,E.element.scrollTop=E.top}for(yr=null,Cn=!!vr,vr=null,e.current=t,Ci=r;null!==Ci;){r=!1,x=void 0;try{for(S=n;null!==Ci;){var C=Ci.effectTag;if(36&C){var T=Ci.alternate;switch(g=S,(E=Ci).tag){case 2:case 3:var P=E.stateNode;if(4&E.effectTag)if(null===T)P.props=E.memoizedProps,P.state=E.memoizedState,P.componentDidMount();else{var O=T.memoizedProps,j=T.memoizedState;P.props=E.memoizedProps,P.state=E.memoizedState,P.componentDidUpdate(O,j,P.__reactInternalSnapshotBeforeUpdate)}var R=E.updateQueue;null!==R&&(P.props=E.memoizedProps,P.state=E.memoizedState,ao(0,R,P));break;case 5:var I=E.updateQueue;if(null!==I){if(b=null,null!==E.child)switch(E.child.tag){case 7:b=E.child.stateNode;break;case 2:case 3:b=E.child.stateNode}ao(0,I,b)}break;case 7:var M=E.stateNode;null===T&&4&E.effectTag&&gr(E.type,E.memoizedProps)&&M.focus();break;case 8:case 6:case 15:case 16:break;default:l("163")}}if(128&C){var N=Ci.ref;if(null!==N){var A=Ci.stateNode;switch(Ci.tag){case 7:var L=A;break;default:L=A}"function"==typeof N?N(L):N.current=L}}var D=Ci.nextEffect;Ci.nextEffect=null,Ci=D}}catch(e){r=!0,x=e}r&&(null===Ci&&l("178"),Mi(Ci,x),null!==Ci&&(Ci=Ci.nextEffect))}_i=Ti=!1,"function"==typeof zr&&zr(t.stateNode),C=t.expirationTime,t=t.childExpirationTime,0===(t=0===C||0!==t&&t<C?t:C)&&(Pi=null),e.expirationTime=t,e.finishedWork=null}function da(){return!!Bi||!(null===Qi||Qi.timeRemaining()>1)&&(Bi=!0)}function ha(e){null===qi&&l("246"),qi.expirationTime=0,Vi||(Vi=!0,Ki=e)}function ma(e,t){var n=Yi;Yi=!0;try{return e(t)}finally{(Yi=n)||Wi||ca(1,null)}}function va(e,t){if(Yi&&!Xi){Xi=!0;try{return e(t)}finally{Xi=!1}}return e(t)}function ya(e,t,n){if(Gi)return e(t,n);Yi||Wi||0===$i||(ca($i,null),$i=0);var r=Gi,o=Yi;Yi=Gi=!0;try{return e(t,n)}finally{Gi=r,(Yi=o)||Wi||ca(1,null)}}function ga(e,t,n,r,o){var i=t.current;return n=function(e){if(!e)return Cr;e:{(2!==rn(e=e._reactInternalFiber)||2!==e.tag&&3!==e.tag)&&l("170");var t=e;do{switch(t.tag){case 5:t=t.stateNode.context;break e;case 2:if(Rr(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}break;case 3:if(Rr(t.type._reactResult)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);l("171"),t=void 0}if(2===e.tag){var n=e.type;if(Rr(n))return Ar(e,n,t)}else if(3===e.tag&&Rr(n=e.type._reactResult))return Ar(e,n,t);return t}(n),null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Zr(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),to(i,o),Ai(i,r),r}function ba(e,t,n,r){var o=t.current;return ga(e,t,n,o=Ni(la(),o),r)}function wa(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 7:default:return e.child.stateNode}}function _a(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Je,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function ka(e){var t=2+25*(1+((la()-2+500)/25|0));t<=bi&&(t=bi+1),this._expirationTime=bi=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function xa(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Sa(e,t,n){e={current:t=new Wr(5,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Ea(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ca(e,t,n,r,o){Ea(n)||l("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=wa(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Sa(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=wa(i._internalRoot);u.call(e)}}va((function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}))}return wa(i._internalRoot)}function Ta(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Ea(t)||l("200"),_a(e,t,null,n)}je=function(e,t,n){switch(t){case"input":if(St(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=q(r);o||l("90"),Ke(r),St(r,o)}}}break;case"textarea":Zn(e,n);break;case"select":null!=(t=n.value)&&Xn(e,!!n.multiple,t,!1)}},ka.prototype.render=function(e){this._defer||l("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new xa;return ga(e,t,null,n,r._onCommit),r},ka.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ka.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||l("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&l("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,t=n,Wi&&l("253"),qi=e,Hi=t,fa(e,t,!0),ca(1,null),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},ka.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},xa.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},xa.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&l("191",n),n()}}},Sa.prototype.render=function(e,t){var n=this._internalRoot,r=new xa;return null!==(t=void 0===t?null:t)&&r.then(t),ba(e,n,null,r._onCommit),r},Sa.prototype.unmount=function(e){var t=this._internalRoot,n=new xa;return null!==(e=void 0===e?null:e)&&n.then(e),ba(null,t,null,n._onCommit),n},Sa.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new xa;return null!==(n=void 0===n?null:n)&&o.then(n),ba(t,r,e,o._onCommit),o},Sa.prototype.createBatch=function(){var e=new ka(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Le=ma,De=ya,ze=function(){Wi||0===$i||(ca($i,null),$i=0)};var Pa={createPortal:Ta,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?l("188"):l("268",Object.keys(e))),null===(e=an(t))?null:e.stateNode},hydrate:function(e,t,n){return Ca(null,e,t,!0,n)},render:function(e,t,n){return Ca(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&l("38"),Ca(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Ea(e)||l("40"),!!e._reactRootContainer&&(va((function(){Ca(null,null,e,!1,(function(){e._reactRootContainer=null}))})),!0)},unstable_createPortal:function(){return Ta.apply(void 0,arguments)},unstable_batchedUpdates:ma,unstable_interactiveUpdates:ya,flushSync:function(e,t){Wi&&l("187");var n=Yi;Yi=!0;try{return Li(e,t)}finally{Yi=n,ca(1,null)}},unstable_flushControlled:function(e){var t=Yi;Yi=!0;try{Li(e)}finally{(Yi=t)||Wi||ca(1,null)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[F,W,q,M.injectEventPluginsByName,w,Q,function(e){P(e,K)},Ne,Ae,jn,A]},unstable_createRoot:function(e,t){return Ea(e)||l("278"),new Sa(e,!0,null!=t&&!0===t.hydrate)}};!function(e){var t=e.findFiberByHostInstance;!function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);zr=Fr((function(e){return t.onCommitFiberRoot(n,e)})),Ur=Fr((function(e){return t.onCommitFiberUnmount(n,e)}))}catch(e){}}(o({},e,{findHostInstanceByFiber:function(e){return null===(e=an(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:U,bundleType:0,version:"16.5.2",rendererPackageName:"react-dom"});var Oa={default:Pa},ja=Oa&&Pa||Oa;e.exports=ja.default||ja},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},6995:function(e,t,n){var r,o,i;o=[t,n(8532)],void 0===(i="function"==typeof(r=function(e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n,r=(n=t)&&n.__esModule?n:{default:n};e.default=r.default})?r.apply(t,o):r)||(e.exports=i)},8532:function(e,t,n){var r,o,i;o=[t,n(7294),n(5697)],void 0===(i="function"==typeof(r=function(e,t,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.setHasSupportToCaptureOption=f;var r=i(t),o=i(n);function i(e){return e&&e.__esModule?e:{default:e}}var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=!1;function f(e){c=e}try{addEventListener("test",null,Object.defineProperty({},"capture",{get:function(){f(!0)}}))}catch(e){}function p(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{capture:!0};return c?e:e.capture}function d(e){if("touches"in e){var t=e.touches[0];return{x:t.pageX,y:t.pageY}}return{x:e.screenX,y:e.screenY}}var h=function(e){function t(){var e;l(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=s(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i._handleSwipeStart=i._handleSwipeStart.bind(i),i._handleSwipeMove=i._handleSwipeMove.bind(i),i._handleSwipeEnd=i._handleSwipeEnd.bind(i),i._onMouseDown=i._onMouseDown.bind(i),i._onMouseMove=i._onMouseMove.bind(i),i._onMouseUp=i._onMouseUp.bind(i),i._setSwiperRef=i._setSwiperRef.bind(i),i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"componentDidMount",value:function(){this.swiper&&this.swiper.addEventListener("touchmove",this._handleSwipeMove,p({capture:!0,passive:!1}))}},{key:"componentWillUnmount",value:function(){this.swiper&&this.swiper.removeEventListener("touchmove",this._handleSwipeMove,p({capture:!0,passive:!1}))}},{key:"_onMouseDown",value:function(e){this.props.allowMouseEvents&&(this.mouseDown=!0,document.addEventListener("mouseup",this._onMouseUp),document.addEventListener("mousemove",this._onMouseMove),this._handleSwipeStart(e))}},{key:"_onMouseMove",value:function(e){this.mouseDown&&this._handleSwipeMove(e)}},{key:"_onMouseUp",value:function(e){this.mouseDown=!1,document.removeEventListener("mouseup",this._onMouseUp),document.removeEventListener("mousemove",this._onMouseMove),this._handleSwipeEnd(e)}},{key:"_handleSwipeStart",value:function(e){var t=d(e),n=t.x,r=t.y;this.moveStart={x:n,y:r},this.props.onSwipeStart(e)}},{key:"_handleSwipeMove",value:function(e){if(this.moveStart){var t=d(e),n=t.x,r=t.y,o=n-this.moveStart.x,i=r-this.moveStart.y;this.moving=!0,this.props.onSwipeMove({x:o,y:i},e)&&e.cancelable&&e.preventDefault(),this.movePosition={deltaX:o,deltaY:i}}}},{key:"_handleSwipeEnd",value:function(e){this.props.onSwipeEnd(e);var t=this.props.tolerance;this.moving&&this.movePosition&&(this.movePosition.deltaX<-t?this.props.onSwipeLeft(1,e):this.movePosition.deltaX>t&&this.props.onSwipeRight(1,e),this.movePosition.deltaY<-t?this.props.onSwipeUp(1,e):this.movePosition.deltaY>t&&this.props.onSwipeDown(1,e)),this.moveStart=null,this.moving=!1,this.movePosition=null}},{key:"_setSwiperRef",value:function(e){this.swiper=e,this.props.innerRef(e)}},{key:"render",value:function(){var e=this.props,t=(e.tagName,e.className),n=e.style,o=e.children,i=(e.allowMouseEvents,e.onSwipeUp,e.onSwipeDown,e.onSwipeLeft,e.onSwipeRight,e.onSwipeStart,e.onSwipeMove,e.onSwipeEnd,e.innerRef,e.tolerance,function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["tagName","className","style","children","allowMouseEvents","onSwipeUp","onSwipeDown","onSwipeLeft","onSwipeRight","onSwipeStart","onSwipeMove","onSwipeEnd","innerRef","tolerance"]));return r.default.createElement(this.props.tagName,a({ref:this._setSwiperRef,onMouseDown:this._onMouseDown,onTouchStart:this._handleSwipeStart,onTouchEnd:this._handleSwipeEnd,className:t,style:n},i),o)}}]),t}(t.Component);h.displayName="ReactSwipe",h.propTypes={tagName:o.default.string,className:o.default.string,style:o.default.object,children:o.default.node,allowMouseEvents:o.default.bool,onSwipeUp:o.default.func,onSwipeDown:o.default.func,onSwipeLeft:o.default.func,onSwipeRight:o.default.func,onSwipeStart:o.default.func,onSwipeMove:o.default.func,onSwipeEnd:o.default.func,innerRef:o.default.func,tolerance:o.default.number.isRequired},h.defaultProps={tagName:"div",allowMouseEvents:!1,onSwipeUp:function(){},onSwipeDown:function(){},onSwipeLeft:function(){},onSwipeRight:function(){},onSwipeStart:function(){},onSwipeMove:function(){},onSwipeEnd:function(){},innerRef:function(){},tolerance:0},e.default=h})?r.apply(t,o):r)||(e.exports=i)},7209:(e,t,n)=>{"use strict";var r,o=(r=n(7294))&&"object"==typeof r&&"default"in r?r.default:r,i=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t};(function(e){function t(){return i(this,t),a(this,e.apply(this,arguments))}(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)})(t,e),t.prototype.render=function(){return o.Children.only(this.props.children)}})(o.Component),t.hot=function(){return function(e){return e}}},5053:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var evalAllowed=!1;try{eval("evalAllowed = true")}catch(e){}var platformSupported=!!Object.setPrototypeOf&&evalAllowed;console.warn("React-Hot-Loaded is not supported in this environment"),module.exports=__webpack_require__(7209)},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,d=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function _(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case i:case l:case a:case d:return e;default:switch(e=e&&e.$$typeof){case s:case p:case v:case m:case u:return e;default:return t}}case o:return t}}}function k(e){return _(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=p,t.Fragment=i,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=a,t.Suspense=d,t.isAsyncMode=function(e){return k(e)||_(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return _(e)===s},t.isContextProvider=function(e){return _(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return _(e)===p},t.isFragment=function(e){return _(e)===i},t.isLazy=function(e){return _(e)===v},t.isMemo=function(e){return _(e)===m},t.isPortal=function(e){return _(e)===o},t.isProfiler=function(e){return _(e)===l},t.isStrictMode=function(e){return _(e)===a},t.isSuspense=function(e){return _(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===l||e===a||e===d||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===u||e.$$typeof===s||e.$$typeof===p||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=_},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},2751:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default=function(e,t,n){var r=0===e?e:e+t;return"translate3d("+("horizontal"===n?[r,0,0]:[0,r,0]).join(",")+")"}},6632:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==d(e)&&"function"!=typeof e)return{default:e};var t=p();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(n(7294)),o=f(n(3935)),i=f(n(6995)),a=f(n(5702)),l=f(n(2751)),u=f(n(5040)),s=f(n(6513)),c=f(n(885));function f(e){return e&&e.__esModule?e:{default:e}}function p(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return p=function(){return e},e}function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?h(Object(n),!0).forEach((function(t){k(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function v(){return(v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t){return(g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function b(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?w(e):t}function w(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _(e){return(_=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function k(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var x=function(){},S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&g(e,t)}(h,e);var t,n,f,p,d=(f=h,p=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=_(f);if(p){var n=_(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return b(this,e)});function h(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),k(w(t=d.call(this,e)),"thumbsRef",void 0),k(w(t),"carouselWrapperRef",void 0),k(w(t),"listRef",void 0),k(w(t),"itemsRef",void 0),k(w(t),"timer",void 0),k(w(t),"setThumbsRef",(function(e){t.thumbsRef=e})),k(w(t),"setCarouselWrapperRef",(function(e){t.carouselWrapperRef=e})),k(w(t),"setListRef",(function(e){t.listRef=e})),k(w(t),"setItemsRef",(function(e,n){t.itemsRef||(t.itemsRef=[]),t.itemsRef[n]=e})),k(w(t),"autoPlay",(function(){r.Children.count(t.props.children)<=1||(t.clearAutoPlay(),t.timer=setTimeout((function(){t.increment()}),t.props.interval))})),k(w(t),"clearAutoPlay",(function(){t.timer&&clearTimeout(t.timer)})),k(w(t),"resetAutoPlay",(function(){t.clearAutoPlay(),t.autoPlay()})),k(w(t),"stopOnHover",(function(){t.setState({isMouseEntered:!0},t.clearAutoPlay)})),k(w(t),"startOnLeave",(function(){t.setState({isMouseEntered:!1},t.autoPlay)})),k(w(t),"isFocusWithinTheCarousel",(function(){return!(!t.carouselWrapperRef||(0,s.default)().activeElement!==t.carouselWrapperRef&&!t.carouselWrapperRef.contains((0,s.default)().activeElement))})),k(w(t),"navigateWithKeyboard",(function(e){if(t.isFocusWithinTheCarousel()){var n="horizontal"===t.props.axis,r=n?37:38;(n?39:40)===e.keyCode?t.increment():r===e.keyCode&&t.decrement()}})),k(w(t),"updateSizes",(function(){if(t.state.initialized&&t.itemsRef&&0!==t.itemsRef.length){var e="horizontal"===t.props.axis,n=t.itemsRef[0];if(n){var r=e?n.clientWidth:n.clientHeight;t.setState({itemSize:r}),t.thumbsRef&&t.thumbsRef.updateSizes()}}})),k(w(t),"setMountState",(function(){t.setState({hasMount:!0}),t.updateSizes()})),k(w(t),"handleClickItem",(function(e,n){0!==r.Children.count(t.props.children)&&(t.state.cancelClick?t.setState({cancelClick:!1}):(t.props.onClickItem(e,n),e!==t.state.selectedItem&&t.setState({selectedItem:e})))})),k(w(t),"handleOnChange",(function(e,n){r.Children.count(t.props.children)<=1||t.props.onChange(e,n)})),k(w(t),"handleClickThumb",(function(e,n){t.props.onClickThumb(e,n),t.moveTo(e)})),k(w(t),"onSwipeStart",(function(e){t.setState({swiping:!0}),t.props.onSwipeStart(e),t.clearAutoPlay()})),k(w(t),"onSwipeEnd",(function(e){t.setState({swiping:!1,cancelClick:!1,swipeMovementStarted:!1}),t.props.onSwipeEnd(e),t.autoPlay()})),k(w(t),"onSwipeMove",(function(e,n){t.props.onSwipeMove(n);var o="horizontal"===t.props.axis,i=r.Children.count(t.props.children),a=t.getPosition(t.state.selectedItem),l=t.props.infiniteLoop?t.getPosition(i-1)-100:t.getPosition(i-1),u=o?e.x:e.y,s=u;0===a&&u>0&&(s=0),a===l&&u<0&&(s=0);var c=a+100/(t.state.itemSize/s),f=Math.abs(u)>t.props.swipeScrollTolerance;return t.props.infiniteLoop&&f&&(0===t.state.selectedItem&&c>-100?c-=100*i:t.state.selectedItem===i-1&&c<100*-i&&(c+=100*i)),(!t.props.preventMovementUntilSwipeScrollTolerance||f||t.state.swipeMovementStarted)&&(t.state.swipeMovementStarted||t.setState({swipeMovementStarted:!0}),t.setPosition(c)),f&&!t.state.cancelClick&&t.setState({cancelClick:!0}),f})),k(w(t),"setPosition",(function(e,n){var r=o.default.findDOMNode(t.listRef);r instanceof HTMLElement&&(["WebkitTransform","MozTransform","MsTransform","OTransform","transform","msTransform"].forEach((function(n){r.style[n]=(0,l.default)(e,"%",t.props.axis)})),n&&r.offsetLeft)})),k(w(t),"resetPosition",(function(){var e=t.getPosition(t.state.selectedItem);t.setPosition(e)})),k(w(t),"decrement",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t.moveTo(t.state.selectedItem-("number"==typeof e?e:1),n)})),k(w(t),"increment",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t.moveTo(t.state.selectedItem+("number"==typeof e?e:1),n)})),k(w(t),"moveTo",(function(e,n){if("number"==typeof e){var o=r.Children.count(t.props.children)-1,i=t.props.infiniteLoop&&!n&&(e<0||e>o),a=e;e<0&&(e=t.props.infiniteLoop?o:0),e>o&&(e=t.props.infiniteLoop?0:o),i?t.setState({swiping:!0},(function(){a<0?t.props.centerMode&&t.props.centerSlidePercentage&&"horizontal"===t.props.axis?t.setPosition(-(o+2)*t.props.centerSlidePercentage-(100-t.props.centerSlidePercentage)/2,!0):t.setPosition(100*-(o+2),!0):a>o&&t.setPosition(0,!0),t.selectItem({selectedItem:e,swiping:!1})})):t.selectItem({selectedItem:e}),t.state.autoPlay&&!1===t.state.isMouseEntered&&t.resetAutoPlay()}})),k(w(t),"onClickNext",(function(){t.increment(1,!1)})),k(w(t),"onClickPrev",(function(){t.decrement(1,!1)})),k(w(t),"onSwipeForward",(function(){t.increment(1,!0),t.props.emulateTouch&&t.setState({cancelClick:!0})})),k(w(t),"onSwipeBackwards",(function(){t.decrement(1,!0),t.props.emulateTouch&&t.setState({cancelClick:!0})})),k(w(t),"changeItem",(function(e){return function(n){(function(e){return!!e&&e.hasOwnProperty("key")})(n)&&"Enter"!==n.key||t.moveTo(e)}})),k(w(t),"selectItem",(function(e,n){t.setState(e,n),t.handleOnChange(e.selectedItem,r.Children.toArray(t.props.children)[e.selectedItem])})),k(w(t),"getInitialImage",(function(){var e=t.props.selectedItem,n=t.itemsRef&&t.itemsRef[e];return(n&&n.getElementsByTagName("img")||[])[0]})),k(w(t),"getVariableItemHeight",(function(e){var n=t.itemsRef&&t.itemsRef[e];if(t.state.hasMount&&n&&n.children.length){var r=n.children[0].getElementsByTagName("img")||[];if(r.length>0){var o=r[0];o.complete||o.addEventListener("load",(function e(){t.forceUpdate(),o.removeEventListener("load",e)}))}var i=(r[0]||n.children[0]).clientHeight;return i>0?i:null}return null})),t.state={initialized:!1,selectedItem:e.selectedItem,hasMount:!1,isMouseEntered:!1,autoPlay:e.autoPlay,swiping:!1,swipeMovementStarted:!1,cancelClick:!1,itemSize:1},t}return t=h,(n=[{key:"componentDidMount",value:function(){this.props.children&&this.setupCarousel()}},{key:"componentDidUpdate",value:function(e,t){e.children||!this.props.children||this.state.initialized||this.setupCarousel(),!e.autoFocus&&this.props.autoFocus&&this.forceFocus(),t.swiping&&!this.state.swiping&&this.resetPosition(),e.selectedItem===this.props.selectedItem&&e.centerMode===this.props.centerMode||(this.updateSizes(),this.moveTo(this.props.selectedItem)),e.autoPlay!==this.props.autoPlay&&(this.props.autoPlay?this.setupAutoPlay():this.destroyAutoPlay(),this.setState({autoPlay:this.props.autoPlay}))}},{key:"componentWillUnmount",value:function(){this.destroyCarousel()}},{key:"setupCarousel",value:function(){var e=this;this.bindEvents(),this.state.autoPlay&&r.Children.count(this.props.children)>1&&this.setupAutoPlay(),this.props.autoFocus&&this.forceFocus(),this.setState({initialized:!0},(function(){var t=e.getInitialImage();t&&!t.complete?t.addEventListener("load",e.setMountState):e.setMountState()}))}},{key:"destroyCarousel",value:function(){this.state.initialized&&(this.unbindEvents(),this.destroyAutoPlay())}},{key:"setupAutoPlay",value:function(){this.autoPlay();var e=this.carouselWrapperRef;this.props.stopOnHover&&e&&(e.addEventListener("mouseenter",this.stopOnHover),e.addEventListener("mouseleave",this.startOnLeave))}},{key:"destroyAutoPlay",value:function(){this.clearAutoPlay();var e=this.carouselWrapperRef;this.props.stopOnHover&&e&&(e.removeEventListener("mouseenter",this.stopOnHover),e.removeEventListener("mouseleave",this.startOnLeave))}},{key:"bindEvents",value:function(){(0,c.default)().addEventListener("resize",this.updateSizes),(0,c.default)().addEventListener("DOMContentLoaded",this.updateSizes),this.props.useKeyboardArrows&&(0,s.default)().addEventListener("keydown",this.navigateWithKeyboard)}},{key:"unbindEvents",value:function(){(0,c.default)().removeEventListener("resize",this.updateSizes),(0,c.default)().removeEventListener("DOMContentLoaded",this.updateSizes);var e=this.getInitialImage();e&&e.removeEventListener("load",this.setMountState),this.props.useKeyboardArrows&&(0,s.default)().removeEventListener("keydown",this.navigateWithKeyboard)}},{key:"forceFocus",value:function(){var e;null===(e=this.carouselWrapperRef)||void 0===e||e.focus()}},{key:"getPosition",value:function(e){if(this.props.infiniteLoop&&++e,0===e)return 0;var t=r.Children.count(this.props.children);if(this.props.centerMode&&"horizontal"===this.props.axis){var n=-e*this.props.centerSlidePercentage,o=t-1;return e&&(e!==o||this.props.infiniteLoop)?n+=(100-this.props.centerSlidePercentage)/2:e===o&&(n+=100-this.props.centerSlidePercentage),n}return 100*-e}},{key:"renderItems",value:function(e){var t=this;return this.props.children?r.Children.map(this.props.children,(function(n,o){var i={ref:function(e){return t.setItemsRef(e,o)},key:"itemKey"+o+(e?"clone":""),className:a.default.ITEM(!0,o===t.state.selectedItem),onClick:t.handleClickItem.bind(t,o,n)},l={};return t.props.centerMode&&"horizontal"===t.props.axis&&(l.style={minWidth:t.props.centerSlidePercentage+"%"}),r.default.createElement("li",v({},i,l),t.props.renderItem(n,{isSelected:o===t.state.selectedItem}))})):[]}},{key:"renderControls",value:function(){var e=this,t=this.props,n=t.showIndicators,o=t.labels,i=t.renderIndicator,a=t.children;return n?r.default.createElement("ul",{className:"control-dots"},r.Children.map(a,(function(t,n){return i&&i(e.changeItem(n),n===e.state.selectedItem,n,o.item)}))):null}},{key:"renderStatus",value:function(){return this.props.showStatus?r.default.createElement("p",{className:"carousel-status"},this.props.statusFormatter(this.state.selectedItem+1,r.Children.count(this.props.children))):null}},{key:"renderThumbs",value:function(){return this.props.showThumbs&&this.props.children&&0!==r.Children.count(this.props.children)?r.default.createElement(u.default,{ref:this.setThumbsRef,onSelectItem:this.handleClickThumb,selectedItem:this.state.selectedItem,transitionTime:this.props.transitionTime,thumbWidth:this.props.thumbWidth,labels:this.props.labels},this.props.renderThumbs(this.props.children)):null}},{key:"render",value:function(){var e=this;if(!this.props.children||0===r.Children.count(this.props.children))return null;var t=this.props.swipeable&&r.Children.count(this.props.children)>1,n="horizontal"===this.props.axis,o=this.props.showArrows&&r.Children.count(this.props.children)>1,u=o&&(this.state.selectedItem>0||this.props.infiniteLoop)||!1,s=o&&(this.state.selectedItem<r.Children.count(this.props.children)-1||this.props.infiniteLoop)||!1,c={},f=this.getPosition(this.state.selectedItem),p=(0,l.default)(f,"%",this.props.axis),d=this.props.transitionTime+"ms";c={WebkitTransform:p,MozTransform:p,MsTransform:p,OTransform:p,transform:p,msTransform:p},this.state.swiping||(c=m(m({},c),{},{WebkitTransitionDuration:d,MozTransitionDuration:d,MsTransitionDuration:d,OTransitionDuration:d,transitionDuration:d,msTransitionDuration:d}));var h=this.renderItems(!0),y=h.shift(),g=h.pop(),b={className:a.default.SLIDER(!0,this.state.swiping),onSwipeMove:this.onSwipeMove,onSwipeStart:this.onSwipeStart,onSwipeEnd:this.onSwipeEnd,style:c,tolerance:this.props.swipeScrollTolerance},w={};if(n){if(b.onSwipeLeft=this.onSwipeForward,b.onSwipeRight=this.onSwipeBackwards,this.props.dynamicHeight){var _=this.getVariableItemHeight(this.state.selectedItem);b.style.height=_||"auto",w.height=_||"auto"}}else b.onSwipeUp="natural"===this.props.verticalSwipe?this.onSwipeBackwards:this.onSwipeForward,b.onSwipeDown="natural"===this.props.verticalSwipe?this.onSwipeForward:this.onSwipeBackwards,b.style.height=this.state.itemSize,w.height=this.state.itemSize;return r.default.createElement("div",{className:a.default.ROOT(this.props.className),ref:this.setCarouselWrapperRef,tabIndex:0},r.default.createElement("div",{className:a.default.CAROUSEL(!0),style:{width:this.props.width}},this.renderControls(),this.props.renderArrowPrev(this.onClickPrev,u,this.props.labels.leftArrow),r.default.createElement("div",{className:a.default.WRAPPER(!0,this.props.axis),style:w},t?r.default.createElement(i.default,v({tagName:"ul",innerRef:this.setListRef},b,{allowMouseEvents:this.props.emulateTouch}),this.props.infiniteLoop&&g,this.renderItems(),this.props.infiniteLoop&&y):r.default.createElement("ul",{className:a.default.SLIDER(!0,this.state.swiping),ref:function(t){return e.setListRef(t)},style:c},this.props.infiniteLoop&&g,this.renderItems(),this.props.infiniteLoop&&y)),this.props.renderArrowNext(this.onClickNext,s,this.props.labels.rightArrow),this.renderStatus()),this.renderThumbs())}}])&&y(t.prototype,n),h}(r.default.Component);t.default=S,k(S,"displayName","Carousel"),k(S,"defaultProps",{axis:"horizontal",centerSlidePercentage:80,interval:3e3,labels:{leftArrow:"previous slide / item",rightArrow:"next slide / item",item:"slide item"},onClickItem:x,onClickThumb:x,onChange:x,onSwipeStart:function(){},onSwipeEnd:function(){},onSwipeMove:function(){return!1},preventMovementUntilSwipeScrollTolerance:!1,renderArrowPrev:function(e,t,n){return r.default.createElement("button",{type:"button","aria-label":n,className:a.default.ARROW_PREV(!t),onClick:e})},renderArrowNext:function(e,t,n){return r.default.createElement("button",{type:"button","aria-label":n,className:a.default.ARROW_NEXT(!t),onClick:e})},renderIndicator:function(e,t,n,o){return r.default.createElement("li",{className:a.default.DOT(t),onClick:e,onKeyDown:e,value:n,key:n,role:"button",tabIndex:0,"aria-label":"".concat(o," ").concat(n+1)})},renderItem:function(e){return e},renderThumbs:function(e){var t=r.Children.map(e,(function(e){var t=e;if("img"!==e.type&&(t=r.Children.toArray(e.props.children).find((function(e){return"img"===e.type}))),t)return t}));return 0===t.filter((function(e){return e})).length?(console.warn("No images found! Can't build the thumb list without images. If you don't need thumbs, set showThumbs={false} in the Carousel. Note that it's not possible to get images rendered inside custom components. More info at https://github.com/leandrowd/react-responsive-carousel/blob/master/TROUBLESHOOTING.md"),[]):t},statusFormatter:function(e,t){return"".concat(e," of ").concat(t)},selectedItem:0,showArrows:!0,showIndicators:!0,showStatus:!0,showThumbs:!0,stopOnHover:!0,swipeScrollTolerance:5,swipeable:!0,transitionTime:350,verticalSwipe:"standard",width:"100%"})},5040:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==f(e)&&"function"!=typeof e)return{default:e};var t=c();if(t&&t.has(e))return t.get(e);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,t&&t.set(e,n),n}(n(7294)),o=s(n(5702)),i=n(4528),a=s(n(2751)),l=s(n(6995)),u=s(n(885));function s(e){return e&&e.__esModule?e:{default:e}}function c(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return c=function(){return e},e}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function m(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?v(e):t}function v(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(b,e);var t,n,s,c,f=(s=b,c=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=y(s);if(c){var n=y(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return m(this,e)});function b(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,b),g(v(t=f.call(this,e)),"itemsWrapperRef",void 0),g(v(t),"itemsListRef",void 0),g(v(t),"thumbsRef",void 0),g(v(t),"setItemsWrapperRef",(function(e){t.itemsWrapperRef=e})),g(v(t),"setItemsListRef",(function(e){t.itemsListRef=e})),g(v(t),"setThumbsRef",(function(e,n){t.thumbsRef||(t.thumbsRef=[]),t.thumbsRef[n]=e})),g(v(t),"updateSizes",(function(){if(t.props.children&&t.itemsWrapperRef&&t.thumbsRef){var e=r.Children.count(t.props.children),n=t.itemsWrapperRef.clientWidth,o=t.props.thumbWidth?t.props.thumbWidth:(0,i.outerWidth)(t.thumbsRef[0]),a=Math.floor(n/o),l=e-a,u=a<e;t.setState((function(e,n){return{itemSize:o,visibleItems:a,firstItem:u?t.getFirstItem(n.selectedItem):0,lastPosition:l,showArrows:u}}))}})),g(v(t),"handleClickItem",(function(e,n,r){if(!function(e){return e.hasOwnProperty("key")}(r)||"Enter"===r.key){var o=t.props.onSelectItem;"function"==typeof o&&o(e,n)}})),g(v(t),"onSwipeStart",(function(){t.setState({swiping:!0})})),g(v(t),"onSwipeEnd",(function(){t.setState({swiping:!1})})),g(v(t),"onSwipeMove",(function(e){var n=e.x;if(!t.state.itemSize||!t.itemsWrapperRef)return!1;var r=-t.state.firstItem*t.state.itemSize;0===r&&n>0&&(n=0),r===-t.state.visibleItems*t.state.itemSize&&n<0&&(n=0);var o=r+100/(t.itemsWrapperRef.clientWidth/n);return t.itemsListRef&&["WebkitTransform","MozTransform","MsTransform","OTransform","transform","msTransform"].forEach((function(e){t.itemsListRef.style[e]=(0,a.default)(o,"%",t.props.axis)})),!0})),g(v(t),"slideRight",(function(e){t.moveTo(t.state.firstItem-("number"==typeof e?e:1))})),g(v(t),"slideLeft",(function(e){t.moveTo(t.state.firstItem+("number"==typeof e?e:1))})),g(v(t),"moveTo",(function(e){e=(e=e<0?0:e)>=t.state.lastPosition?t.state.lastPosition:e,t.setState({firstItem:e})})),t.state={selectedItem:e.selectedItem,swiping:!1,showArrows:!1,firstItem:0,visibleItems:0,lastPosition:0},t}return t=b,(n=[{key:"componentDidMount",value:function(){this.setupThumbs()}},{key:"UNSAFE_componentWillReceiveProps",value:function(e){e.selectedItem!==this.state.selectedItem&&this.setState({selectedItem:e.selectedItem,firstItem:this.getFirstItem(e.selectedItem)})}},{key:"componentDidUpdate",value:function(e){this.props.children!==e.children&&this.updateSizes()}},{key:"componentWillUnmount",value:function(){this.destroyThumbs()}},{key:"setupThumbs",value:function(){(0,u.default)().addEventListener("resize",this.updateSizes),(0,u.default)().addEventListener("DOMContentLoaded",this.updateSizes),this.updateSizes()}},{key:"destroyThumbs",value:function(){(0,u.default)().removeEventListener("resize",this.updateSizes),(0,u.default)().removeEventListener("DOMContentLoaded",this.updateSizes)}},{key:"getFirstItem",value:function(e){var t=e;return e>=this.state.lastPosition&&(t=this.state.lastPosition),e<this.state.firstItem+this.state.visibleItems&&(t=this.state.firstItem),e<this.state.firstItem&&(t=e),t}},{key:"renderItems",value:function(){var e=this;return this.props.children.map((function(t,n){var i=o.default.ITEM(!1,n===e.state.selectedItem),a={key:n,ref:function(t){return e.setThumbsRef(t,n)},className:i,onClick:e.handleClickItem.bind(e,n,e.props.children[n]),onKeyDown:e.handleClickItem.bind(e,n,e.props.children[n]),"aria-label":"".concat(e.props.labels.item," ").concat(n+1),style:{width:e.props.thumbWidth}};return r.default.createElement("li",p({},a,{role:"button",tabIndex:0}),t)}))}},{key:"render",value:function(){var e=this;if(!this.props.children)return null;var t,n=r.Children.count(this.props.children)>1,i=this.state.showArrows&&this.state.firstItem>0,u=this.state.showArrows&&this.state.firstItem<this.state.lastPosition,s=-this.state.firstItem*(this.state.itemSize||0),c=(0,a.default)(s,"px",this.props.axis),f=this.props.transitionTime+"ms";return t={WebkitTransform:c,MozTransform:c,MsTransform:c,OTransform:c,transform:c,msTransform:c,WebkitTransitionDuration:f,MozTransitionDuration:f,MsTransitionDuration:f,OTransitionDuration:f,transitionDuration:f,msTransitionDuration:f},r.default.createElement("div",{className:o.default.CAROUSEL(!1)},r.default.createElement("div",{className:o.default.WRAPPER(!1),ref:this.setItemsWrapperRef},r.default.createElement("button",{type:"button",className:o.default.ARROW_PREV(!i),onClick:function(){return e.slideRight()},"aria-label":this.props.labels.leftArrow}),n?r.default.createElement(l.default,{tagName:"ul",className:o.default.SLIDER(!1,this.state.swiping),onSwipeLeft:this.slideLeft,onSwipeRight:this.slideRight,onSwipeMove:this.onSwipeMove,onSwipeStart:this.onSwipeStart,onSwipeEnd:this.onSwipeEnd,style:t,innerRef:this.setItemsListRef},this.renderItems()):r.default.createElement("ul",{className:o.default.SLIDER(!1,this.state.swiping),ref:function(t){return e.setItemsListRef(t)},style:t},this.renderItems()),r.default.createElement("button",{type:"button",className:o.default.ARROW_NEXT(!u),onClick:function(){return e.slideLeft()},"aria-label":this.props.labels.rightArrow})))}}])&&d(t.prototype,n),b}(r.Component);t.default=b,g(b,"displayName","Thumbs"),g(b,"defaultProps",{axis:"horizontal",labels:{leftArrow:"previous slide / item",rightArrow:"next slide / item",item:"slide item"},selectedItem:0,thumbWidth:80,transitionTime:350})},5702:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(4184))&&r.__esModule?r:{default:r},i={ROOT:function(e){return(0,o.default)(function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({"carousel-root":!0},e||"",!!e))},CAROUSEL:function(e){return(0,o.default)({carousel:!0,"carousel-slider":e})},WRAPPER:function(e,t){return(0,o.default)({"thumbs-wrapper":!e,"slider-wrapper":e,"axis-horizontal":"horizontal"===t,"axis-vertical":"horizontal"!==t})},SLIDER:function(e,t){return(0,o.default)({thumbs:!e,slider:e,animated:!t})},ITEM:function(e,t,n){return(0,o.default)({thumb:!e,slide:e,selected:t,previous:n})},ARROW_PREV:function(e){return(0,o.default)({"control-arrow control-prev":!0,"control-disabled":e})},ARROW_NEXT:function(e){return(0,o.default)({"control-arrow control-next":!0,"control-disabled":e})},DOT:function(e){return(0,o.default)({dot:!0,selected:e})}};t.default=i},4528:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.outerWidth=void 0,t.outerWidth=function(e){var t=e.offsetWidth,n=getComputedStyle(e);return t+(parseInt(n.marginLeft)+parseInt(n.marginRight))}},615:(e,t,n)=>{"use strict";Object.defineProperty(t,"lr",{enumerable:!0,get:function(){return r.default}});var r=o(n(6632));o(n(5040));function o(e){return e&&e.__esModule?e:{default:e}}},6513:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default=function(){return document}},885:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default=function(){return window}},8420:(e,t,n)=>{"use strict";var r=n(9864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?a:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=a;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=d(n);o&&o!==h&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var l=u(t),m=u(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||l&&l[y])){var g=p(n,y);try{s(t,y,g)}catch(e){}}}}return t}},6585:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},9658:(e,t,n)=>{var r=n(6585);e.exports=function e(t,n,o){return r(n)||(o=n||o,n=[]),o=o||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,n):r(t)?function(t,n,r){for(var o=[],i=0;i<t.length;i++)o.push(e(t[i],n,r).source);return c(new RegExp("(?:"+o.join("|")+")",f(r)),n)}(t,n,o):function(e,t,n){return p(i(e,n),t,n)}(t,n,o)},e.exports.parse=i,e.exports.compile=function(e,t){return l(i(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,l="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(l+=e.slice(a,d),a=d+f.length,p)l+=p[1];else{var h=e[a],m=n[2],v=n[3],y=n[4],g=n[5],b=n[6],w=n[7];l&&(r.push(l),l="");var _=null!=m&&null!=h&&h!==m,k="+"===b||"*"===b,x="?"===b||"*"===b,S=n[2]||c,E=y||g;r.push({name:v||i++,prefix:m||"",delimiter:S,optional:x,repeat:k,partial:_,asterisk:!!w,pattern:E?s(E):w?".*":"[^"+u(S)+"]+?"})}}return a<e.length&&(l+=e.substr(a)),l&&r.push(l),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",l=t||{},u=(o||{}).pretty?a:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,p=l[c.name];if(null==p){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=u(p[d]),!n[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===d?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(p),!n[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');i+=c.prefix+f}}else i+=c}return i}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",l=0;l<e.length;l++){var s=e[l];if("string"==typeof s)a+=u(s);else{var p=u(s.prefix),d="(?:"+s.pattern+")";t.push(s),s.repeat&&(d+="(?:"+p+d+")*"),a+=d=s.optional?s.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=u(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",c(new RegExp("^"+a,f(n)),t)}},2408:(e,t,n)=>{"use strict";var r=n(7418),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.async_mode"):60111,d=o?Symbol.for("react.forward_ref"):60112;o&&Symbol.for("react.placeholder");var h="function"==typeof Symbol&&Symbol.iterator;function m(e,t,n,r,o,i,a,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,i,a,l],s=0;(e=Error(t.replace(/%s/g,(function(){return u[s++]})))).name="Invariant Violation"}throw e.framesToPop=1,e}}function v(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);m(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||y}function w(){}function _(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||y}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&v("85"),this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=b.prototype;var k=_.prototype=new w;k.constructor=_,r(k,b.prototype),k.isPureReactComponent=!0;var x={current:null,currentDispatcher:null},S=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var r=void 0,o={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,r)&&!E.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:i,type:e,key:a,ref:l,props:o,_owner:x.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var P=/\/+/g,O=[];function j(e,t,n,r){if(O.length){var o=O.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>O.length&&O.push(e)}function I(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var l=!1;if(null===e)l=!0;else switch(o){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case i:case a:l=!0}}if(l)return n(r,e,""===t?"."+N(e,0):t),1;if(l=0,t=""===t?".":t+":",Array.isArray(e))for(var u=0;u<e.length;u++){var s=t+N(o=e[u],u);l+=I(o,s,n,r)}else if("function"==typeof(s=null===e||"object"!=typeof e?null:"function"==typeof(s=h&&e[h]||e["@@iterator"])?s:null))for(e=s.call(e),u=0;!(o=e.next()).done;)l+=I(o=o.value,s=t+N(o,u++),n,r);else"object"===o&&v("31","[object Object]"==(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return l}function M(e,t,n){return null==e?0:I(e,"",t,n)}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function A(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?D(e,r,n,(function(e){return e})):null!=e&&(T(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n)),r.push(e))}function D(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(P,"$&/")+"/"),M(e,L,t=j(t,i,r,o)),R(t)}function z(e,t){var n=x.currentDispatcher;return null===n&&v("277"),n.readContext(e,t)}var U={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return D(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;M(e,A,t=j(null,null,t,n)),R(t)},count:function(e){return M(e,(function(){return null}),null)},toArray:function(e){var t=[];return D(e,t,null,(function(e){return e})),t},only:function(e){return T(e)||v("143"),e}},createRef:function(){return{current:null}},Component:b,PureComponent:_,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,Provider:null,Consumer:null,unstable_read:null}).Provider={$$typeof:c,_context:e},e.Consumer=e,e.unstable_read=z.bind(null,e),e},forwardRef:function(e){return{$$typeof:d,render:e}},Fragment:l,StrictMode:u,unstable_AsyncMode:p,unstable_Profiler:s,createElement:C,cloneElement:function(e,t,n){null==e&&v("267",e);var o=void 0,a=r({},e.props),l=e.key,u=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,s=x.current),void 0!==t.key&&(l=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)S.call(t,o)&&!E.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1==(o=arguments.length-2))a.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:i,type:e.type,key:l,ref:u,props:a,_owner:s}},createFactory:function(e){var t=C.bind(null,e);return t.type=e,t},isValidElement:T,version:"16.5.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:x,assign:r}},F={default:U},W=F&&U||F;e.exports=W.default||W},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},490:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=!1,i="object"==typeof performance&&"function"==typeof performance.now,a={timeRemaining:i?function(){var e=h()-performance.now();return 0<e?e:0}:function(){var e=h()-Date.now();return 0<e?e:0},didTimeout:!1};function l(){if(!r){var e=n.timesOutAt;o?d():o=!0,p(s,e)}}function u(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,(e=e.callback)(a)}function s(e){r=!0,a.didTimeout=e;try{if(e)for(;null!==n;){var i=t.unstable_now();if(!(n.timesOutAt<=i))break;do{u()}while(null!==n&&n.timesOutAt<=i)}else if(null!==n)do{u()}while(null!==n&&0<h()-t.unstable_now())}finally{r=!1,null!==n?l():o=!1}}var c,f,p,d,h,m=Date,v="function"==typeof setTimeout?setTimeout:void 0,y="function"==typeof clearTimeout?clearTimeout:void 0,g="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function w(e){c=g((function(t){y(f),e(t)})),f=v((function(){b(c),e(t.unstable_now())}),100)}if(i){var _=performance;t.unstable_now=function(){return _.now()}}else t.unstable_now=function(){return m.now()};if("undefined"==typeof window){var k=-1;p=function(e){k=setTimeout(e,0,!0)},d=function(){clearTimeout(k)},h=function(){return 0}}else if(window._schedMock){var x=window._schedMock;p=x[0],d=x[1],h=x[2]}else{"undefined"!=typeof console&&("function"!=typeof g&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var S=null,E=!1,C=-1,T=!1,P=!1,O=0,j=33,R=33;h=function(){return O};var I="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",(function(e){if(e.source===window&&e.data===I){E=!1;var n=t.unstable_now();if(e=!1,0>=O-n){if(!(-1!==C&&C<=n))return void(T||(T=!0,w(M)));e=!0}if(C=-1,n=S,S=null,null!==n){P=!0;try{n(e)}finally{P=!1}}}}),!1);var M=function(e){T=!1;var t=e-O+R;t<R&&j<R?(8>t&&(t=8),R=t<j?j:t):j=t,O=e+R,E||(E=!0,window.postMessage(I,"*"))};p=function(e,t){S=e,C=t,P?window.postMessage(I,"*"):T||(T=!0,w(M))},d=function(){S=null,E=!1,C=-1}}t.unstable_scheduleWork=function(e,r){var o=t.unstable_now();if(e={callback:e,timesOutAt:r=null!=r&&null!==r.timeout&&void 0!==r.timeout?o+r.timeout:o+5e3,next:null,previous:null},null===n)n=e.next=e.previous=e,l();else{o=null;var i=n;do{if(i.timesOutAt>r){o=i;break}i=i.next}while(i!==n);null===o?o=n:o===n&&(n=e,l()),(r=o.previous).next=o.previous=e,e.next=o,e.previous=r}return e},t.unstable_cancelScheduledWork=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}}},297:(e,t,n)=>{"use strict";e.exports=n(490)},5456:(e,t,n)=>{var r=n(6704);"string"==typeof r&&(r=[[e.id,r,""]]);var o=n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0});r.locals&&(e.exports=r.locals),e.hot.accept(6704,(function(){var t=n(6704);if("string"==typeof t&&(t=[[e.id,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)})),e.hot.dispose((function(){o()}))},6176:(e,t,n)=>{var r=n(514);"string"==typeof r&&(r=[[e.id,r,""]]);var o=n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0});r.locals&&(e.exports=r.locals),e.hot.accept(514,(function(){var t=n(514);if("string"==typeof t&&(t=[[e.id,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)})),e.hot.dispose((function(){o()}))},2251:(e,t,n)=>{var r=n(6486);"string"==typeof r&&(r=[[e.id,r,""]]);var o=n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0});r.locals&&(e.exports=r.locals),e.hot.accept(6486,(function(){var t=n(6486);if("string"==typeof t&&(t=[[e.id,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)})),e.hot.dispose((function(){o()}))},7825:(e,t,n)=>{var r=n(5912);"string"==typeof r&&(r=[[e.id,r,""]]);var o=n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0});r.locals&&(e.exports=r.locals),e.hot.accept(5912,(function(){var t=n(5912);if("string"==typeof t&&(t=[[e.id,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)})),e.hot.dispose((function(){o()}))},5587:(e,t,n)=>{var r=n(7342);"string"==typeof r&&(r=[[e.id,r,""]]);var o=n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0});r.locals&&(e.exports=r.locals),e.hot.accept(7342,(function(){var t=n(7342);if("string"==typeof t&&(t=[[e.id,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)})),e.hot.dispose((function(){o()}))},5450:(e,t,n)=>{var r=n(5374);"string"==typeof r&&(r=[[e.id,r,""]]);var o=n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0});r.locals&&(e.exports=r.locals),e.hot.accept(5374,(function(){var t=n(5374);if("string"==typeof t&&(t=[[e.id,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)})),e.hot.dispose((function(){o()}))},6442:(e,t,n)=>{var r=n(3746);"string"==typeof r&&(r=[[e.id,r,""]]);var o=n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0});r.locals&&(e.exports=r.locals),e.hot.accept(3746,(function(){var t=n(3746);if("string"==typeof t&&(t=[[e.id,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)})),e.hot.dispose((function(){o()}))},9127:(e,t,n)=>{var r=n(9203);"string"==typeof r&&(r=[[e.id,r,""]]);var o=n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0});r.locals&&(e.exports=r.locals),e.hot.accept(9203,(function(){var t=n(9203);if("string"==typeof t&&(t=[[e.id,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)})),e.hot.dispose((function(){o()}))},6723:(e,t,n)=>{var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e,t){return t?t.querySelector(e):document.querySelector(e)},u=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=l.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),s=null,c=0,f=[],p=n(1947);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(b(r.parts[a],t))}else{var l=[];for(a=0;a<r.parts.length;a++)l.push(b(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:l}}}}function h(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(l):n.push(r[a]={id:a,parts:[l]})}return n}function m(e,t){var n=u(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=f[f.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),f.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=u(e.insertAt.before,n);n.insertBefore(t,o)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=f.indexOf(e);t>=0&&f.splice(t,1)}function y(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=n.nc;r&&(e.attrs.nonce=r)}return g(t,e.attrs),m(e,t),t}function g(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function b(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=c++;n=s||(s=y(t)),r=k.bind(null,n,a,!1),o=k.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",g(t,e.attrs),m(e,t),t}(t),r=S.bind(null,n,t),o=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(t),r=x.bind(null,n),o=function(){v(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return d(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(l=i[a.id]).refs--,r.push(l)}for(e&&d(h(e,t),t),o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete i[l.id]}}}};var w,_=(w=[],function(e,t){return w[e]=t,w.filter(Boolean).join("\n")});function k(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=_(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function x(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function S(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=p(r)),o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}},1947:e=>{e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")}))}},7394:(e,t,n)=>{"use strict";e.exports=n.p+"2a331b22df9eab29ff67.ttf"},5785:(e,t,n)=>{"use strict";e.exports=n.p+"e6c3001fba7fe2925001.jpg"},4510:(e,t,n)=>{"use strict";e.exports=n.p+"dc38201f59ff0f409aed.jpg"},7311:(e,t,n)=>{"use strict";e.exports=n.p+"724a5f1ff9a8fa330cdf.jpg"},2914:(e,t,n)=>{"use strict";e.exports=n.p+"6ba6efcf19c4b857e630.jpg"},8428:(e,t,n)=>{"use strict";e.exports=n.p+"0721b031e4db3c2008c0.jpg"},9573:(e,t,n)=>{"use strict";e.exports=n.p+"de6f487f4dc6fbf737c0.jpg"},3570:(e,t,n)=>{"use strict";e.exports=n.p+"e19b3ccc56310905b8b2.jpg"},1701:(e,t,n)=>{"use strict";e.exports=n.p+"ee7a10fa55f4cb9ca206.jpg"},8004:(e,t,n)=>{"use strict";e.exports=n.p+"6efdcf7dae894124e54d.jpg"},7583:(e,t,n)=>{"use strict";e.exports=n.p+"ec57b148acd728fa467a.jpg"},4624:(e,t,n)=>{"use strict";e.exports=n.p+"d2ab233375a92b4e9eb4.jpg"},9840:(e,t,n)=>{"use strict";e.exports=n.p+"cfb541b7334a8d67aa9a.jpg"},6600:(e,t,n)=>{"use strict";e.exports=n.p+"e18c9ca0bbec773f76f4.jpg"},7234:(e,t,n)=>{"use strict";e.exports=n.p+"e6f7070829fc61dc569f.jpg"},7843:(e,t,n)=>{"use strict";e.exports=n.p+"7bfef016877bacb720b1.jpg"},6842:(e,t,n)=>{"use strict";e.exports=n.p+"abd7a079b4f82dd78b68.jpg"},1168:(e,t,n)=>{var r={"./carousel-1.jpg":7234,"./carousel-2.jpg":7843,"./carousel-3.jpg":6842};function o(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}o.keys=function(){return Object.keys(r)},o.resolve=i,e.exports=o,o.id=1168},6641:(e,t,n)=>{"use strict";e.exports=n.p+"b83a4fdb3c365eb57a6f.jpg"},4928:(e,t,n)=>{"use strict";e.exports=n.p+"b11215c8d0315b259aef.jpg"},8570:(e,t,n)=>{"use strict";e.exports=n.p+"75ed50af4bfe343596bf.jpg"},2332:(e,t,n)=>{"use strict";e.exports=n.p+"6e074ed89bf92bfa50f3.jpg"},211:(e,t,n)=>{"use strict";e.exports=n.p+"fdd109a68b079109f6da.jpg"},4930:(e,t,n)=>{"use strict";e.exports=n.p+"6ddf8f5c37521d8b8207.jpg"},6261:(e,t,n)=>{"use strict";e.exports=n.p+"df70fa4bf1456a075c85.jpg"},9694:(e,t,n)=>{"use strict";e.exports=n.p+"cb707331976bfdda94fa.jpg"},120:(e,t,n)=>{"use strict";e.exports=n.p+"3c3bc3f5ff40f0d5cd7c.jpg"},1700:(e,t,n)=>{"use strict";e.exports=n.p+"904b81647cfe0a36718c.jpg"},3496:(e,t,n)=>{"use strict";e.exports=n.p+"649ad99a1eab6737d61e.jpg"},6061:(e,t,n)=>{"use strict";e.exports=n.p+"ab7ce6e80205205da0a4.jpg"},990:(e,t,n)=>{var r={"./games/asteroids.jpg":5785,"./games/fishing-enterprises.jpg":4510,"./games/overseer.jpg":7311,"./portfolio/cyntrasafe.jpg":2914,"./portfolio/fanlite-engineering.jpg":8428,"./portfolio/iota-online.jpg":9573,"./portfolio/lovelotus.jpg":3570,"./portfolio/opinionated.jpg":1701,"./portfolio/sinestats.jpg":8004,"./portfolio/sudo-news.jpg":7583,"./profile/headshot.jpg":4624,"./visuals/abstract-squares.jpg":9840,"./visuals/bouncing-laser.jpg":6600,"./visuals/carousel/carousel-1.jpg":7234,"./visuals/carousel/carousel-2.jpg":7843,"./visuals/carousel/carousel-3.jpg":6842,"./visuals/cubic-audio-visualizer.jpg":6641,"./visuals/falling-lights.jpg":4928,"./visuals/falling-text.jpg":8570,"./visuals/futuristic-audio-visualizer.jpg":2332,"./visuals/geometric-constellations.jpg":211,"./visuals/gradient-circuit.jpg":4930,"./visuals/meteor-shower.jpg":6261,"./visuals/rainbow-black-hole.jpg":9694,"./visuals/raindrops.jpg":120,"./visuals/random-walkers.jpg":1700,"./visuals/reaching-arms.jpg":3496,"./visuals/rotating-spiral.jpg":6061};function o(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}o.keys=function(){return Object.keys(r)},o.resolve=i,e.exports=o,o.id=990}},__webpack_module_cache__={},inProgress,dataWebpackPrefix;function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var n=__webpack_module_cache__[e]={id:e,loaded:!1,exports:{}};try{var r={id:e,module:n,factory:__webpack_modules__[e],require:__webpack_require__};__webpack_require__.i.forEach((function(e){e(r)})),n=r.module,r.factory.call(n.exports,n,n.exports,r.require)}catch(e){throw n.error=e,e}return n.loaded=!0,n.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.c=__webpack_module_cache__,__webpack_require__.i=[],__webpack_require__.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.hu=e=>e+"."+__webpack_require__.h()+".hot-update.js",__webpack_require__.hmrF=()=>"main."+__webpack_require__.h()+".hot-update.json",__webpack_require__.h=()=>"742b5004436891cbfb39",__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),inProgress={},dataWebpackPrefix="mrsperry.github.io:",__webpack_require__.l=(e,t,n,r)=>{if(inProgress[e])inProgress[e].push(t);else{var o,i;if(void 0!==n)for(var a=document.getElementsByTagName("script"),l=0;l<a.length;l++){var u=a[l];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==dataWebpackPrefix+n){o=u;break}}o||(i=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,__webpack_require__.nc&&o.setAttribute("nonce",__webpack_require__.nc),o.setAttribute("data-webpack",dataWebpackPrefix+n),o.src=e),inProgress[e]=[t];var s=(t,n)=>{o.onerror=o.onload=null,clearTimeout(c);var r=inProgress[e];if(delete inProgress[e],o.parentNode&&o.parentNode.removeChild(o),r&&r.forEach((e=>e(n))),t)return t(n)},c=setTimeout(s.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=s.bind(null,o.onerror),o.onload=s.bind(null,o.onload),i&&document.head.appendChild(o)}},(()=>{var e,t,n,r,o={},i=__webpack_require__.c,a=[],l=[],u="idle";function s(e){u=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}function c(e){if(0===t.length)return e();var n=t;return t=[],Promise.all(n).then((function(){return c(e)}))}function f(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return s("check"),__webpack_require__.hmrM().then((function(r){if(!r)return s(h()?"ready":"idle"),null;s("prepare");var o=[];return t=[],n=[],Promise.all(Object.keys(__webpack_require__.hmrC).reduce((function(e,t){return __webpack_require__.hmrC[t](r.c,r.r,r.m,e,n,o),e}),[])).then((function(){return c((function(){return e?d(e):(s("ready"),o)}))}))}))}function p(e){return"ready"!==u?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):d(e)}function d(e){e=e||{},h();var t=n.map((function(t){return t(e)}));n=void 0;var o,i=t.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return s("abort"),Promise.resolve().then((function(){throw i[0]}));s("dispose"),t.forEach((function(e){e.dispose&&e.dispose()})),s("apply");var a=function(e){o||(o=e)},l=[];return t.forEach((function(e){if(e.apply){var t=e.apply(a);if(t)for(var n=0;n<t.length;n++)l.push(t[n])}})),o?(s("fail"),Promise.resolve().then((function(){throw o}))):r?d(e).then((function(e){return l.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):(s("idle"),Promise.resolve(l))}function h(){if(r)return n||(n=[]),Object.keys(__webpack_require__.hmrI).forEach((function(e){r.forEach((function(t){__webpack_require__.hmrI[e](t,n)}))})),r=void 0,!0}__webpack_require__.hmrD=o,__webpack_require__.i.push((function(d){var h,m,v,y,g=d.module,b=function(n,r){var o=i[r];if(!o)return n;var l=function(t){if(o.hot.active){if(i[t]){var l=i[t].parents;-1===l.indexOf(r)&&l.push(r)}else a=[r],e=t;-1===o.children.indexOf(t)&&o.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+r),a=[];return n(t)},f=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(t){n[e]=t}}};for(var p in n)Object.prototype.hasOwnProperty.call(n,p)&&"e"!==p&&Object.defineProperty(l,p,f(p));return l.e=function(e){return function(e){switch(u){case"ready":return s("prepare"),t.push(e),c((function(){s("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(n.e(e))},l}(d.require,d.id);g.hot=(h=d.id,m=g,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:v=e!==h,_requireSelf:function(){a=m.parents.slice(),e=v?void 0:h,__webpack_require__(h)},active:!0,accept:function(e,t,n){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._acceptedDependencies[e[r]]=t||function(){},y._acceptedErrorHandlers[e[r]]=n;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":n=[],Object.keys(__webpack_require__.hmrI).forEach((function(e){__webpack_require__.hmrI[e](h,n)})),s("ready");break;case"ready":Object.keys(__webpack_require__.hmrI).forEach((function(e){__webpack_require__.hmrI[e](h,n)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(h)}},check:f,apply:p,status:function(e){if(!e)return u;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:o[h]},e=void 0,y),g.parents=a,g.children=[],a=[],d.require=b})),__webpack_require__.hmrC={},__webpack_require__.hmrI={}})(),__webpack_require__.p="/",(()=>{var e,t,n,r,o={179:0},i={};function a(e){return new Promise(((t,n)=>{i[e]=t;var r=__webpack_require__.p+__webpack_require__.hu(e),o=new Error;__webpack_require__.l(r,(t=>{if(i[e]){i[e]=void 0;var r=t&&("load"===t.type?"missing":t.type),a=t&&t.target&&t.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+r+": "+a+")",o.name="ChunkLoadError",o.type=r,o.request=a,n(o)}}))}))}function l(i){function a(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),i=o.id,a=o.chain,u=__webpack_require__.c[i];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(u.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var s=0;s<u.parents.length;s++){var c=u.parents[s],f=__webpack_require__.c[c];if(f){if(f.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([c]),moduleId:i,parentId:c};-1===t.indexOf(c)&&(f.hot._acceptedDependencies[i]?(n[c]||(n[c]=[]),l(n[c],[i])):(delete n[c],t.push(c),r.push({chain:a.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}__webpack_require__.f&&delete __webpack_require__.f.jsonpHmr,e=void 0;var u={},s=[],c={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(__webpack_require__.o(t,p)){var d,h=t[p],m=!1,v=!1,y=!1,g="";switch((d=h?a(p):{type:"disposed",moduleId:p}).chain&&(g="\nUpdate propagation: "+d.chain.join(" -> ")),d.type){case"self-declined":i.onDeclined&&i.onDeclined(d),i.ignoreDeclined||(m=new Error("Aborted because of self decline: "+d.moduleId+g));break;case"declined":i.onDeclined&&i.onDeclined(d),i.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+d.moduleId+" in "+d.parentId+g));break;case"unaccepted":i.onUnaccepted&&i.onUnaccepted(d),i.ignoreUnaccepted||(m=new Error("Aborted because "+p+" is not accepted"+g));break;case"accepted":i.onAccepted&&i.onAccepted(d),v=!0;break;case"disposed":i.onDisposed&&i.onDisposed(d),y=!0;break;default:throw new Error("Unexception type "+d.type)}if(m)return{error:m};if(v)for(p in c[p]=h,l(s,d.outdatedModules),d.outdatedDependencies)__webpack_require__.o(d.outdatedDependencies,p)&&(u[p]||(u[p]=[]),l(u[p],d.outdatedDependencies[p]));y&&(l(s,[d.moduleId]),c[p]=f)}t=void 0;for(var b,w=[],_=0;_<s.length;_++){var k=s[_],x=__webpack_require__.c[k];x&&(x.hot._selfAccepted||x.hot._main)&&c[k]!==f&&!x.hot._selfInvalidated&&w.push({module:k,require:x.hot._requireSelf,errorHandler:x.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete o[e]})),n=void 0;for(var t,r=s.slice();r.length>0;){var i=r.pop(),a=__webpack_require__.c[i];if(a){var l={},c=a.hot._disposeHandlers;for(_=0;_<c.length;_++)c[_].call(null,l);for(__webpack_require__.hmrD[i]=l,a.hot.active=!1,delete __webpack_require__.c[i],delete u[i],_=0;_<a.children.length;_++){var f=__webpack_require__.c[a.children[_]];f&&(e=f.parents.indexOf(i))>=0&&f.parents.splice(e,1)}}}for(var p in u)if(__webpack_require__.o(u,p)&&(a=__webpack_require__.c[p]))for(b=u[p],_=0;_<b.length;_++)t=b[_],(e=a.children.indexOf(t))>=0&&a.children.splice(e,1)},apply:function(e){for(var t in c)__webpack_require__.o(c,t)&&(__webpack_require__.m[t]=c[t]);for(var n=0;n<r.length;n++)r[n](__webpack_require__);for(var o in u)if(__webpack_require__.o(u,o)){var a=__webpack_require__.c[o];if(a){b=u[o];for(var l=[],f=[],p=[],d=0;d<b.length;d++){var h=b[d],m=a.hot._acceptedDependencies[h],v=a.hot._acceptedErrorHandlers[h];if(m){if(-1!==l.indexOf(m))continue;l.push(m),f.push(v),p.push(h)}}for(var y=0;y<l.length;y++)try{l[y].call(null,b)}catch(t){if("function"==typeof f[y])try{f[y](t,{moduleId:o,dependencyId:p[y]})}catch(n){i.onErrored&&i.onErrored({type:"accept-error-handler-errored",moduleId:o,dependencyId:p[y],error:n,originalError:t}),i.ignoreErrored||(e(n),e(t))}else i.onErrored&&i.onErrored({type:"accept-errored",moduleId:o,dependencyId:p[y],error:t}),i.ignoreErrored||e(t)}}}for(var g=0;g<w.length;g++){var _=w[g],k=_.module;try{_.require(k)}catch(t){if("function"==typeof _.errorHandler)try{_.errorHandler(t,{moduleId:k,module:__webpack_require__.c[k]})}catch(n){i.onErrored&&i.onErrored({type:"self-accept-error-handler-errored",moduleId:k,error:n,originalError:t}),i.ignoreErrored||(e(n),e(t))}else i.onErrored&&i.onErrored({type:"self-accept-errored",moduleId:k,error:t}),i.ignoreErrored||e(t)}}return s}}}self.webpackHotUpdatemrsperry_github_io=(e,n,o)=>{for(var a in n)__webpack_require__.o(n,a)&&(t[a]=n[a]);o&&r.push(o),i[e]&&(i[e](),i[e]=void 0)},__webpack_require__.hmrI.jsonp=function(e,o){t||(t={},r=[],n=[],o.push(l)),__webpack_require__.o(t,e)||(t[e]=__webpack_require__.m[e])},__webpack_require__.hmrC.jsonp=function(i,u,s,c,f,p){f.push(l),e={},n=u,t=s.reduce((function(e,t){return e[t]=!1,e}),{}),r=[],i.forEach((function(t){__webpack_require__.o(o,t)&&void 0!==o[t]&&(c.push(a(t)),e[t]=!0)})),__webpack_require__.f&&(__webpack_require__.f.jsonpHmr=function(t,n){e&&!__webpack_require__.o(e,t)&&__webpack_require__.o(o,t)&&void 0!==o[t]&&(n.push(a(t)),e[t]=!0)})},__webpack_require__.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(__webpack_require__.p+__webpack_require__.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})();var __webpack_exports__=__webpack_require__(4323)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL3RpbnktaW52YXJpYW50L2Rpc3QvdGlueS1pbnZhcmlhbnQuZXNtLmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9taW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXNtL3JlYWN0LXJvdXRlci5qcyIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lc20vcmVhY3Qtcm91dGVyLWRvbS5qcyIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9zcmMvY29tcG9uZW50cy9wcm9maWxlL1Byb2ZpbGUudHN4Iiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9Qcm9qZWN0RGlzcGxheS50c3giLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL05hdmlnYXRpb24udHN4Iiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL3NyYy9jb21wb25lbnRzL3BvcnRmb2xpby9Qb3J0Zm9saW8udHN4Iiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL3NyYy9jb21wb25lbnRzL2dhbWVzL0dhbWVzLnRzeCIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9zcmMvY29tcG9uZW50cy92aXN1YWxzL1Zpc3VhbHMudHN4Iiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL3NyYy9jb21wb25lbnRzL0FwcC50c3giLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vc3JjL2NvbXBvbmVudHMvaW5kZXgudHN4Iiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZXNwb25zaXZlLWNhcm91c2VsL2xpYi9zdHlsZXMvY2Fyb3VzZWwubWluLmNzcyIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9zcmMvY29tcG9uZW50cy9BcHAuc2NzcyIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9zcmMvY29tcG9uZW50cy9jb21tb24vTmF2aWdhdGlvbi5zY3NzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9Qcm9qZWN0RGlzcGxheS5zY3NzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL3NyYy9jb21wb25lbnRzL3Byb2ZpbGUvUHJvZmlsZS5zY3NzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL3NyYy9jb21wb25lbnRzL3Zpc3VhbHMvVmlzdWFscy5zY3NzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL3NyYy9zYXNzL2Jhc2Uuc2NzcyIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9zcmMvc2Fzcy9yZXNldC5zY3NzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvdXJsL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9yZWFjdC1lYXN5LXN3aXBlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZWFzeS1zd2lwZS9saWIvcmVhY3Qtc3dpcGUuanMiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWhvdC1sb2FkZXIvZGlzdC9yZWFjdC1ob3QtbG9hZGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9yZWFjdC1ob3QtbG9hZGVyL2luZGV4LmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZXNwb25zaXZlLWNhcm91c2VsL2xpYi9qcy9DU1NUcmFuc2xhdGUuanMiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlc3BvbnNpdmUtY2Fyb3VzZWwvbGliL2pzL2NvbXBvbmVudHMvQ2Fyb3VzZWwuanMiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlc3BvbnNpdmUtY2Fyb3VzZWwvbGliL2pzL2NvbXBvbmVudHMvVGh1bWJzLmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZXNwb25zaXZlLWNhcm91c2VsL2xpYi9qcy9jc3NDbGFzc2VzLmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZXNwb25zaXZlLWNhcm91c2VsL2xpYi9qcy9kaW1lbnNpb25zLmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZXNwb25zaXZlLWNhcm91c2VsL2xpYi9qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVzcG9uc2l2ZS1jYXJvdXNlbC9saWIvanMvc2hpbXMvZG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlc3BvbnNpdmUtY2Fyb3VzZWwvbGliL2pzL3NoaW1zL3dpbmRvdy5qcyIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZS9janMvc2NoZWR1bGUucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlL2luZGV4LmpzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZXNwb25zaXZlLWNhcm91c2VsL2xpYi9zdHlsZXMvY2Fyb3VzZWwubWluLmNzcz9kZjBhIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL3NyYy9jb21wb25lbnRzL0FwcC5zY3NzP2MxNGEiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL05hdmlnYXRpb24uc2Nzcz84NTFjIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9Qcm9qZWN0RGlzcGxheS5zY3NzP2E1NjUiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vc3JjL2NvbXBvbmVudHMvcHJvZmlsZS9Qcm9maWxlLnNjc3M/ZDFkZCIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9zcmMvY29tcG9uZW50cy92aXN1YWxzL1Zpc3VhbHMuc2Nzcz9lODhmIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL3NyYy9zYXNzL2Jhc2Uuc2Nzcz80NzQ5Iiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL3NyYy9zYXNzL3Jlc2V0LnNjc3M/YWI4OCIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vLi9zcmMvYXNzZXRzL2ltYWdlcy92aXN1YWxzL2Nhcm91c2VsfHN5bmN8L14vY2Fyb3VzZWwvLS4qLy5qcGckIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby8uL3NyYy9hc3NldHMvaW1hZ2VzfHN5bmN8L14vLiokIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgdXBkYXRlIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby93ZWJwYWNrL3J1bnRpbWUvZ2V0IHVwZGF0ZSBtYW5pZmVzdCBmaWxlbmFtZSIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby93ZWJwYWNrL3J1bnRpbWUvaGFybW9ueSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby93ZWJwYWNrL3J1bnRpbWUvaG90IG1vZHVsZSByZXBsYWNlbWVudCIsIndlYnBhY2s6Ly9tcnNwZXJyeS5naXRodWIuaW8vd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vbXJzcGVycnkuZ2l0aHViLmlvL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL21yc3BlcnJ5LmdpdGh1Yi5pby93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsiX3NldFByb3RvdHlwZU9mIiwibyIsInAiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJ0aGlzIiwiaXNBYnNvbHV0ZSIsInBhdGhuYW1lIiwiY2hhckF0Iiwic3BsaWNlT25lIiwibGlzdCIsImluZGV4IiwiayIsIm4iLCJwb3AiLCJjb25kaXRpb24iLCJtZXNzYWdlIiwiRXJyb3IiLCJhZGRMZWFkaW5nU2xhc2giLCJwYXRoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdWJzdHIiLCJzdHJpcEJhc2VuYW1lIiwicHJlZml4IiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJzbGljZSIsImNyZWF0ZVBhdGgiLCJsb2NhdGlvbiIsInNlYXJjaCIsImhhc2giLCJzdGF0ZSIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwidW5kZWZpbmVkIiwiZGVjb2RlVVJJIiwiZSIsIlVSSUVycm9yIiwidG8iLCJmcm9tIiwiaGFzVHJhaWxpbmdTbGFzaCIsInRvUGFydHMiLCJzcGxpdCIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiY29uY2F0IiwibGFzdCIsInVwIiwicGFydCIsInVuc2hpZnQiLCJyZXN1bHQiLCJqb2luIiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJsaXN0ZW5lcnMiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImFjdGlvbiIsImdldFVzZXJDb25maXJtYXRpb24iLCJjYWxsYmFjayIsImFwcGVuZExpc3RlbmVyIiwiZm4iLCJpc0FjdGl2ZSIsImxpc3RlbmVyIiwicHVzaCIsImZpbHRlciIsIml0ZW0iLCJub3RpZnlMaXN0ZW5lcnMiLCJfbGVuIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImZvckVhY2giLCJjYW5Vc2VET00iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwiSGFzaENoYW5nZUV2ZW50JDEiLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJzdHJpcEhhc2giLCJ1cmwiLCJnZXRIYXNoUGF0aCIsImhyZWYiLCJzdWJzdHJpbmciLCJyZXBsYWNlSGFzaFBhdGgiLCJyZXBsYWNlIiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJwcm9wcyIsImdsb2JhbEhpc3RvcnkiLCJoaXN0b3J5IiwiX3Byb3BzIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGhhc2hUeXBlIiwiaGFzaFR5cGUiLCJiYXNlbmFtZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImdldERPTUxvY2F0aW9uIiwidHJhbnNpdGlvbk1hbmFnZXIiLCJzZXRTdGF0ZSIsIm5leHRTdGF0ZSIsImZvcmNlTmV4dFBvcCIsImlnbm9yZVBhdGgiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiYSIsImIiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsIm9rIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxQYXRocyIsImxhc3RJbmRleE9mIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsInJldmVydFBvcCIsImhhbmRsZVBvcCIsImluaXRpYWxMb2NhdGlvbiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNCbG9ja2VkIiwiY3JlYXRlSHJlZiIsImJhc2VUYWciLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwicHVzaEhhc2hQYXRoIiwicHJldkluZGV4IiwibmV4dFBhdGhzIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJNQVhfU0lHTkVEXzMxX0JJVF9JTlQiLCJjb21tb25qc0dsb2JhbCIsImdsb2JhbFRoaXMiLCJnIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwidmFsdWUiLCJoYW5kbGVycyIsIm9uIiwiaGFuZGxlciIsIm9mZiIsImgiLCJnZXQiLCJzZXQiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwiZGVmYXVsdFZhbHVlIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsIlByb3ZpZGVyIiwiX0NvbXBvbmVudCIsIl90aGlzIiwiZW1pdHRlciIsIl9wcm90byIsImdldENoaWxkQ29udGV4dCIsIl9yZWYiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwib2xkVmFsdWUiLCJ4IiwieSIsInJlbmRlciIsImNoaWxkcmVuIiwiQ29tcG9uZW50IiwiY2hpbGRDb250ZXh0VHlwZXMiLCJDb25zdW1lciIsIl9Db21wb25lbnQyIiwiX3RoaXMyIiwiZ2V0VmFsdWUiLCJvblVwZGF0ZSIsIm9ic2VydmVkQml0cyIsIl9wcm90bzIiLCJjb21wb25lbnREaWRNb3VudCIsImNvbnRleHQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImlzQXJyYXkiLCJjb250ZXh0VHlwZXMiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJrZXlzIiwiaGlzdG9yeUNvbnRleHQiLCJuYW1lIiwiZGlzcGxheU5hbWUiLCJjcmVhdGVOYW1lZENvbnRleHQiLCJjcmVhdGVOYW1lZENvbnRleHQkMSIsIlJvdXRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJfaXNNb3VudGVkIiwiX3BlbmRpbmdMb2NhdGlvbiIsInN0YXRpY0NvbnRleHQiLCJjb21wdXRlUm9vdE1hdGNoIiwicGFyYW1zIiwiaXNFeGFjdCIsIm1hdGNoIiwiY2FjaGUkMSIsImNhY2hlQ291bnQkMSIsIm1hdGNoUGF0aCIsIm9wdGlvbnMiLCJfb3B0aW9ucyIsIl9vcHRpb25zJGV4YWN0IiwiZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJzZW5zaXRpdmUiLCJyZWR1Y2UiLCJtYXRjaGVkIiwiX2NvbXBpbGVQYXRoIiwiY2FjaGVLZXkiLCJlbmQiLCJwYXRoQ2FjaGUiLCJyZWdleHAiLCJjb21waWxlUGF0aCQxIiwiZXhlYyIsInZhbHVlcyIsIm1lbW8iLCJSb3V0ZSIsImNvbnRleHQkMSIsImNvbXB1dGVkTWF0Y2giLCJfdGhpcyRwcm9wcyIsImNvbXBvbmVudCIsIlN3aXRjaCIsImVsZW1lbnQiLCJjaGlsZCIsIkhhc2hSb3V0ZXIiLCJyZXNvbHZlVG9Mb2NhdGlvbiIsIm5vcm1hbGl6ZVRvTG9jYXRpb24iLCJmb3J3YXJkUmVmU2hpbSIsIkMiLCJmb3J3YXJkUmVmIiwiTGlua0FuY2hvciIsImZvcndhcmRlZFJlZiIsImlubmVyUmVmIiwibmF2aWdhdGUiLCJfb25DbGljayIsIm9uQ2xpY2siLCJyZXN0IiwiZXZlbnQiLCJleCIsInByZXZlbnREZWZhdWx0IiwiZGVmYXVsdFByZXZlbnRlZCIsImJ1dHRvbiIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJpc01vZGlmaWVkRXZlbnQiLCJyZWYiLCJMaW5rIiwiX3JlZjIiLCJfcmVmMiRjb21wb25lbnQiLCJmb3J3YXJkUmVmU2hpbSQxIiwiZm9yd2FyZFJlZiQxIiwiX3JlZiRhcmlhQ3VycmVudCIsImFyaWFDdXJyZW50IiwiX3JlZiRhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJjbGFzc05hbWUiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdHlsZVByb3AiLCJzdHlsZSIsImVzY2FwZWRQYXRoIiwiY2xhc3NuYW1lcyIsImpvaW5DbGFzc25hbWVzIiwiYWx0Iiwic3JjIiwidGl0bGUiLCJyZWwiLCJmaWd1cmVzIiwiZGF0YSIsImRlc2NyaXB0aW9uIiwiaWQiLCJhc3NldEZvbGRlciIsImltYWdlIiwidXJsUHJlZml4IiwiaXRlbXMiLCJuYXZJdGVtcyIsImxpbmsiLCJ2aWV3IiwiY2Fyb3VzZWxEYXRhIiwicHJvamVjdERhdGEiLCJhdXRvUGxheSIsImludGVydmFsIiwiaW5maW5pdGVMb29wIiwic2hvd0luZGljYXRvcnMiLCJzaG93U3RhdHVzIiwic2hvd1RodW1icyIsInRyYW5zaXRpb25UaW1lIiwibWFwIiwicHJvamVjdCIsInRhYkluZGV4IiwidXBkYXRlSGFzaCIsImhvdCIsIm1vZHVsZSIsImdldEVsZW1lbnRCeUlkIiwiaGFzT3duIiwiY2xhc3NOYW1lcyIsImNsYXNzZXMiLCJhcmciLCJhcmdUeXBlIiwiaW5uZXIiLCJ0b1N0cmluZyIsImV4cG9ydHMiLCJkZWZhdWx0IiwiZXNjYXBlIiwidXNlU291cmNlTWFwIiwiY29udGVudCIsInNvdXJjZU1hcCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJ0ZXN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJUeXBlRXJyb3IiLCJ0ZXN0MSIsIlN0cmluZyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsInMiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiYm9vbCIsImZ1bmMiLCJudW1iZXIiLCJvYmplY3QiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudFR5cGUiLCJpbnN0YW5jZU9mIiwibm9kZSIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYWEiLCJiYSIsImNhIiwiYyIsImQiLCJmIiwibCIsImZyYW1lc1RvUG9wIiwidCIsImRhIiwibSIsIm9uRXJyb3IiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwia2EiLCJtYSIsIm5hIiwib2EiLCJwYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicWEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInJhIiwicmVnaXN0cmF0aW9uTmFtZSIsInNhIiwidGEiLCJkZXBlbmRlbmNpZXMiLCJ1YSIsInZhIiwid2EiLCJ4YSIsInR5cGUiLCJjdXJyZW50VGFyZ2V0IiwibGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkNhIiwiRGEiLCJFYSIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJGYSIsInN0YXRlTm9kZSIsImRpc2FibGVkIiwiR2EiLCJIYSIsIk1hdGgiLCJyYW5kb20iLCJJYSIsIkphIiwiS2EiLCJwYXJlbnROb2RlIiwidGFnIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJyZXR1cm4iLCJQYSIsImRpc3BhdGNoQ29uZmlnIiwiUWEiLCJfdGFyZ2V0SW5zdCIsIlJhIiwiVGEiLCJVYSIsIlZhIiwiV2EiLCJZYSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlphIiwiJGEiLCJhYiIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJiYiIsImNiIiwiZGIiLCJlYiIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJ0ZXh0Q29udGVudCIsImtiIiwibGIiLCJ6IiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsIm5iIiwiZXZlbnRQb29sIiwib2IiLCJkZXN0cnVjdG9yIiwibWIiLCJnZXRQb29sZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsImV4dGVuZCIsInBiIiwicWIiLCJyYiIsInNiIiwidGIiLCJkb2N1bWVudE1vZGUiLCJ1YiIsInZiIiwid2IiLCJ4YiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJ5YiIsInpiIiwia2V5Q29kZSIsIkFiIiwiZGV0YWlsIiwiQmIiLCJFYiIsImxvY2FsZSIsIndoaWNoIiwiQ2IiLCJjaGFyIiwiRGIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiUWIiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwidGVsIiwidGV4dCIsInRpbWUiLCJ3ZWVrIiwiUmIiLCJub2RlTmFtZSIsIlNiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50Iiwibm9kZVR5cGUiLCJUYiIsInNldEF0dHJpYnV0ZSIsIlViIiwiV2IiLCJfdmFsdWVUcmFja2VyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJWYiIsIlhiIiwiY2hlY2tlZCIsIlliIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJaYiIsIlN5bWJvbCIsImZvciIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJpdGVyYXRvciIsImtjIiwibGMiLCIkJHR5cGVvZiIsInRoZW4iLCJfcmVhY3RTdGF0dXMiLCJfcmVhY3RSZXN1bHQiLCJtYyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwibmMiLCJwYyIsInFjIiwicmMiLCJEIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsIkUiLCJ2YyIsIndjIiwidG9VcHBlckNhc2UiLCJ4YyIsInRjIiwiaXNOYU4iLCJ1YyIsInNjIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ5YyIsInpjIiwiZGVmYXVsdENoZWNrZWQiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJCYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIm93bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiR2MiLCJjaGFuZ2UiLCJIYyIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiZGV0YWNoRXZlbnQiLCJQYyIsIlFjIiwiYXR0YWNoRXZlbnQiLCJSYyIsIlNjIiwiVGMiLCJVYyIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJWYyIsIldjIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlhjIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlljIiwiWmMiLCIkYyIsImFkIiwiYmQiLCJjZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsImRkIiwicG9pbnRlcklkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiZWQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsImZkIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJhbHRlcm5hdGUiLCJnZCIsImhkIiwiamQiLCJlZmZlY3RUYWciLCJrZCIsIm1kIiwic2libGluZyIsImN1cnJlbnQiLCJsZCIsIm5kIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIm9kIiwiY2xpcGJvYXJkRGF0YSIsInBkIiwicWQiLCJjaGFyQ29kZSIsInJkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInNkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInRkIiwicmVwZWF0IiwidWQiLCJkYXRhVHJhbnNmZXIiLCJ2ZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ3ZCIsInhkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ5ZCIsInpkIiwiQWQiLCJCZCIsImlzSW50ZXJhY3RpdmUiLCJDZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsIkRkIiwiRWQiLCJGZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiR2QiLCJGIiwiSGQiLCJJZCIsImJpbmQiLCJKZCIsIktkIiwiTGQiLCJNZCIsIk5kIiwiT2QiLCJib2R5IiwiUWQiLCJmaXJzdENoaWxkIiwiUmQiLCJvZmZzZXQiLCJuZXh0U2libGluZyIsIlNkIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIlRkIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJVZCIsImNvbnRlbnRFZGl0YWJsZSIsIlZkIiwiV2QiLCJzZWxlY3QiLCJYZCIsIllkIiwiWmQiLCIkZCIsImFlIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImJlIiwib25TZWxlY3QiLCJkZSIsIkNoaWxkcmVuIiwiY2UiLCJlZSIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZmUiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImdlIiwiaGUiLCJpZSIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJqZSIsImtlIiwibGUiLCJtZSIsIm5lIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJvZSIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInBlIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJxZSIsInJlIiwidHJpbSIsInNldFByb3BlcnR5Iiwic2UiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInRlIiwidWUiLCJpcyIsInZlIiwiYmx1ciIsImZvY3VzIiwid2UiLCJ4ZSIsInllIiwiemUiLCJhdXRvRm9jdXMiLCJBZSIsIl9faHRtbCIsIkJlIiwiQ2UiLCJTZXQiLCJEZSIsIkVlIiwiRyIsIkgiLCJGZSIsIkkiLCJKIiwiR2UiLCJIZSIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIksiLCJJZSIsIkplIiwiS2UiLCJMZSIsIk1lIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJOZSIsIk9lIiwiUGUiLCJRZSIsIlNlIiwicGVuZGluZ1Byb3BzIiwiZmlyc3RDb250ZXh0RGVwZW5kZW5jeSIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJtb2RlIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJleHBpcmF0aW9uVGltZSIsIlRlIiwiaXNSZWFjdENvbXBvbmVudCIsIlVlIiwiVmUiLCJXZSIsIlhlIiwiWWUiLCJwZW5kaW5nQ2hpbGRyZW4iLCJpbXBsZW1lbnRhdGlvbiIsIlplIiwiZGlkRXJyb3IiLCJlYXJsaWVzdFBlbmRpbmdUaW1lIiwibGF0ZXN0UGVuZGluZ1RpbWUiLCIkZSIsImVhcmxpZXN0U3VzcGVuZGVkVGltZSIsImxhdGVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RQaW5nZWRUaW1lIiwibmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24iLCJhZiIsImJmIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJjZiIsImRmIiwicGF5bG9hZCIsIm5leHQiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwia2YiLCJyIiwibGYiLCJtZiIsIm5mIiwic3RhY2siLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwiX2NvbnRleHQiLCJfY3VycmVudFZhbHVlIiwidGYiLCJ1ZiIsInZmIiwid2YiLCJMIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJyZWZzIiwiRmYiLCJKZiIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFsRmliZXIiLCJlbnF1ZXVlU2V0U3RhdGUiLCJHZiIsIkhmIiwiSWYiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiS2YiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkxmIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJNZiIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsIk5mIiwiT2YiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwiUGYiLCJRZiIsIk1hcCIsIkEiLCJTIiwiQiIsInUiLCJxIiwidiIsImRlbGV0ZSIsIlAiLCJkb25lIiwiUmYiLCJTZiIsIlRmIiwiVWYiLCJWZiIsIldmIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsInNnIiwidGciLCJjZyIsIlJlYWN0Q3VycmVudE93bmVyIiwiTSIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJ1cGRhdGVyIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiaWciLCJqZyIsInBlbmRpbmdDb250ZXh0IiwibmciLCJkZWZhdWx0UHJvcHMiLCJxZyIsInVnIiwiY29uc29sZSIsImVycm9yIiwic2V0VGltZW91dCIsInZnIiwid2ciLCJ4ZyIsInlnIiwiemciLCJBZyIsImluc2VydEJlZm9yZSIsIm9uY2xpY2siLCJCZyIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJDZyIsIkRnIiwiRWciLCJjb21wb25lbnREaWRDYXRjaCIsIkZnIiwiYWRkIiwiY29tcG9uZW50U3RhY2siLCJHZyIsIkhnIiwicmVhZENvbnRleHQiLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk4iLCJNZyIsIk8iLCJOZyIsIlEiLCJPZyIsIlBnIiwiUWciLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsIlJnIiwiYmciLCJvZyIsImh5ZHJhdGUiLCJoaWRkZW4iLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJwZyIsIlNnIiwiY3VycmVudERpc3BhdGNoZXIiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJUZyIsImhhcyIsImZpbmlzaGVkV29yayIsImdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCIsIlVnIiwiVmciLCJuZXh0U2NoZWR1bGVkUm9vdCIsIlQiLCJVIiwiViIsIlciLCJXZyIsIlkiLCJaIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwiZmgiLCJnaCIsImhoIiwiaWgiLCJqaCIsInVuc3RhYmxlX25vdyIsImtoIiwibGgiLCJtaCIsIm9oIiwidW5zdGFibGVfY2FuY2VsU2NoZWR1bGVkV29yayIsInVuc3RhYmxlX3NjaGVkdWxlV29yayIsInBoIiwidGltZW91dCIsInFoIiwiZGlkVGltZW91dCIsIl9vbkNvbXBsZXRlIiwicmgiLCJmaXJzdEJhdGNoIiwiX2V4cGlyYXRpb25UaW1lIiwiX2RlZmVyIiwicmFuZ2VDb3VudCIsIlhhIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsIlIiLCJ5aCIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwidyIsIm1pbiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiU2EiLCJvYyIsIlgiLCJJaCIsIkpoIiwia2ciLCJsZyIsIktoIiwiQWMiLCJtZyIsIlBkIiwiTGgiLCJ0aW1lUmVtYWluaW5nIiwic2giLCJ0aCIsInVoIiwid2giLCJ2aCIsInhoIiwiemgiLCJBaCIsIkJoIiwiX3Jvb3QiLCJfY2FsbGJhY2tzIiwiX25leHQiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJDaCIsIl9kaWRDb21taXQiLCJfb25Db21taXQiLCJEaCIsInRpbWVvdXRIYW5kbGUiLCJfaW50ZXJuYWxSb290IiwiRWgiLCJHaCIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCJGaCIsIkhoIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJjb21taXQiLCJ1bm1vdW50IiwiY3JlYXRlQmF0Y2giLCJNaCIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudHMiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJSZSIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiYnVuZGxlVHlwZSIsInZlcnNpb24iLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiTmgiLCJPaCIsImNoZWNrRENFIiwiX3JlYWN0U3dpcGUiLCJvYmoiLCJfcmVhY3RTd2lwZTIiLCJfX2VzTW9kdWxlIiwiX3JlYWN0IiwiX3Byb3BUeXBlcyIsInNldEhhc1N1cHBvcnRUb0NhcHR1cmVPcHRpb24iLCJfcmVhY3QyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9wcm9wVHlwZXMyIiwiX2V4dGVuZHMiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwic3VwcG9ydHNDYXB0dXJlT3B0aW9uIiwiaGFzU3VwcG9ydCIsImdldFNhZmVFdmVudEhhbmRsZXJPcHRzIiwiY2FwdHVyZSIsImdldFBvc2l0aW9uIiwiX2V2ZW50JHRvdWNoZXMkIiwiUmVhY3RTd2lwZSIsImdldFByb3RvdHlwZU9mIiwiX2hhbmRsZVN3aXBlU3RhcnQiLCJfaGFuZGxlU3dpcGVNb3ZlIiwiX2hhbmRsZVN3aXBlRW5kIiwiX29uTW91c2VEb3duIiwiX29uTW91c2VNb3ZlIiwiX29uTW91c2VVcCIsIl9zZXRTd2lwZXJSZWYiLCJfaW5oZXJpdHMiLCJzd2lwZXIiLCJwYXNzaXZlIiwiYWxsb3dNb3VzZUV2ZW50cyIsIm1vdXNlRG93biIsIl9nZXRQb3NpdGlvbiIsIm1vdmVTdGFydCIsIm9uU3dpcGVTdGFydCIsIl9nZXRQb3NpdGlvbjIiLCJtb3ZpbmciLCJvblN3aXBlTW92ZSIsIm1vdmVQb3NpdGlvbiIsIm9uU3dpcGVFbmQiLCJ0b2xlcmFuY2UiLCJvblN3aXBlTGVmdCIsIm9uU3dpcGVSaWdodCIsIm9uU3dpcGVVcCIsIm9uU3dpcGVEb3duIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwib25Nb3VzZURvd24iLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoRW5kIiwicHJvcFR5cGVzIiwiUmVhY3QiLCJjbGFzc0NhbGxDaGVjayIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJpbmhlcml0cyIsIm9ubHkiLCJldmFsQWxsb3dlZCIsImV2YWwiLCJwbGF0Zm9ybVN1cHBvcnRlZCIsIndhcm4iLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGb3J3YXJkUmVmIiwiRnJhZ21lbnQiLCJMYXp5IiwiTWVtbyIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc01lbW8iLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwicG9zaXRpb24iLCJtZXRyaWMiLCJheGlzIiwicG9zaXRpb25QZXJjZW50IiwiX3R5cGVvZiIsImNhY2hlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVzYyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JlYWN0RG9tIiwiX3JlYWN0RWFzeVN3aXBlIiwiX2Nzc0NsYXNzZXMiLCJfQ1NTVHJhbnNsYXRlIiwiX1RodW1icyIsIl9kb2N1bWVudCIsIl93aW5kb3ciLCJXZWFrTWFwIiwib3duS2V5cyIsImVudW1lcmFibGVPbmx5Iiwic3ltIiwiX29iamVjdFNwcmVhZCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJfZGVmaW5lUHJvcGVydGllcyIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfZ2V0UHJvdG90eXBlT2YiLCJub29wIiwiQ2Fyb3VzZWwiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9zdXBlciIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiU3VwZXIiLCJOZXdUYXJnZXQiLCJ0aHVtYnNSZWYiLCJjYXJvdXNlbFdyYXBwZXJSZWYiLCJsaXN0UmVmIiwiaXRlbXNSZWYiLCJjb3VudCIsImNsZWFyQXV0b1BsYXkiLCJ0aW1lciIsImluY3JlbWVudCIsImNsZWFyVGltZW91dCIsImlzTW91c2VFbnRlcmVkIiwiaXNGb2N1c1dpdGhpblRoZUNhcm91c2VsIiwiaXNIb3Jpem9udGFsIiwicHJldktleSIsImRlY3JlbWVudCIsImluaXRpYWxpemVkIiwiZmlyc3RJdGVtIiwiaXRlbVNpemUiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsInVwZGF0ZVNpemVzIiwiaGFzTW91bnQiLCJjYW5jZWxDbGljayIsIm9uQ2xpY2tJdGVtIiwic2VsZWN0ZWRJdGVtIiwib25DaGFuZ2UiLCJvbkNsaWNrVGh1bWIiLCJtb3ZlVG8iLCJzd2lwaW5nIiwic3dpcGVNb3ZlbWVudFN0YXJ0ZWQiLCJjaGlsZHJlbkxlbmd0aCIsImN1cnJlbnRQb3NpdGlvbiIsImZpbmFsQm91bmRyeSIsImF4aXNEZWx0YSIsImhhbmRsZWREZWx0YSIsImhhc01vdmVkIiwiYWJzIiwic3dpcGVTY3JvbGxUb2xlcmFuY2UiLCJwcmV2ZW50TW92ZW1lbnRVbnRpbFN3aXBlU2Nyb2xsVG9sZXJhbmNlIiwic2V0UG9zaXRpb24iLCJmb3JjZVJlZmxvdyIsIkhUTUxFbGVtZW50IiwicHJvcCIsIm9mZnNldExlZnQiLCJwb3NpdGlvbnMiLCJmcm9tU3dpcGUiLCJsYXN0UG9zaXRpb24iLCJuZWVkQ2xvbmVkU2xpZGUiLCJvbGRQb3NpdGlvbiIsImNlbnRlck1vZGUiLCJjZW50ZXJTbGlkZVBlcmNlbnRhZ2UiLCJzZWxlY3RJdGVtIiwicmVzZXRBdXRvUGxheSIsImVtdWxhdGVUb3VjaCIsIm5ld0luZGV4IiwiaXNLZXlib2FyZEV2ZW50IiwiaGFuZGxlT25DaGFuZ2UiLCJ0b0FycmF5IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzbGlkZUltYWdlcyIsImNvbXBsZXRlIiwib25JbWFnZUxvYWQiLCJmb3JjZVVwZGF0ZSIsInNldHVwQ2Fyb3VzZWwiLCJwcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJmb3JjZUZvY3VzIiwicmVzZXRQb3NpdGlvbiIsInNldHVwQXV0b1BsYXkiLCJkZXN0cm95QXV0b1BsYXkiLCJkZXN0cm95Q2Fyb3VzZWwiLCJiaW5kRXZlbnRzIiwiaW5pdGlhbEltYWdlIiwiZ2V0SW5pdGlhbEltYWdlIiwic2V0TW91bnRTdGF0ZSIsInVuYmluZEV2ZW50cyIsImNhcm91c2VsV3JhcHBlciIsInN0b3BPbkhvdmVyIiwic3RhcnRPbkxlYXZlIiwidXNlS2V5Ym9hcmRBcnJvd3MiLCJuYXZpZ2F0ZVdpdGhLZXlib2FyZCIsIl90aGlzJGNhcm91c2VsV3JhcHBlciIsImlzQ2xvbmUiLCJfdGhpczMiLCJzbGlkZVByb3BzIiwic2V0SXRlbXNSZWYiLCJJVEVNIiwiaGFuZGxlQ2xpY2tJdGVtIiwiZXh0cmFQcm9wcyIsIm1pbldpZHRoIiwicmVuZGVySXRlbSIsImlzU2VsZWN0ZWQiLCJfdGhpczQiLCJsYWJlbHMiLCJyZW5kZXJJbmRpY2F0b3IiLCJfIiwiY2hhbmdlSXRlbSIsInN0YXR1c0Zvcm1hdHRlciIsInNldFRodW1ic1JlZiIsIm9uU2VsZWN0SXRlbSIsImhhbmRsZUNsaWNrVGh1bWIiLCJ0aHVtYldpZHRoIiwicmVuZGVyVGh1bWJzIiwiX3RoaXM1IiwiaXNTd2lwZWFibGUiLCJzd2lwZWFibGUiLCJjYW5TaG93QXJyb3dzIiwic2hvd0Fycm93cyIsImhhc1ByZXYiLCJoYXNOZXh0IiwiaXRlbUxpc3RTdHlsZXMiLCJ0cmFuc2Zvcm1Qcm9wIiwiV2Via2l0VHJhbnNmb3JtIiwiTW96VHJhbnNmb3JtIiwiTXNUcmFuc2Zvcm0iLCJPVHJhbnNmb3JtIiwidHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJXZWJraXRUcmFuc2l0aW9uRHVyYXRpb24iLCJNb3pUcmFuc2l0aW9uRHVyYXRpb24iLCJNc1RyYW5zaXRpb25EdXJhdGlvbiIsIk9UcmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJtc1RyYW5zaXRpb25EdXJhdGlvbiIsIml0ZW1zQ2xvbmUiLCJyZW5kZXJJdGVtcyIsImZpcnN0Q2xvbmUiLCJzaGlmdCIsImxhc3RDbG9uZSIsInN3aXBlclByb3BzIiwiU0xJREVSIiwiY29udGFpbmVyU3R5bGVzIiwib25Td2lwZUZvcndhcmQiLCJvblN3aXBlQmFja3dhcmRzIiwiZHluYW1pY0hlaWdodCIsIml0ZW1IZWlnaHQiLCJnZXRWYXJpYWJsZUl0ZW1IZWlnaHQiLCJ2ZXJ0aWNhbFN3aXBlIiwiUk9PVCIsInNldENhcm91c2VsV3JhcHBlclJlZiIsIkNBUk9VU0VMIiwicmVuZGVyQ29udHJvbHMiLCJyZW5kZXJBcnJvd1ByZXYiLCJvbkNsaWNrUHJldiIsImxlZnRBcnJvdyIsIldSQVBQRVIiLCJzZXRMaXN0UmVmIiwicmVuZGVyQXJyb3dOZXh0Iiwib25DbGlja05leHQiLCJyaWdodEFycm93IiwicmVuZGVyU3RhdHVzIiwib25DbGlja0hhbmRsZXIiLCJsYWJlbCIsIkFSUk9XX1BSRVYiLCJBUlJPV19ORVhUIiwiRE9UIiwib25LZXlEb3duIiwicm9sZSIsImltYWdlcyIsImZpbmQiLCJ0b3RhbCIsIl9kaW1lbnNpb25zIiwiVGh1bWJzIiwiaXRlbXNXcmFwcGVyUmVmIiwiaXRlbXNMaXN0UmVmIiwid3JhcHBlclNpemUiLCJvdXRlcldpZHRoIiwidmlzaWJsZUl0ZW1zIiwiZmxvb3IiLCJfc3RhdGUiLCJnZXRGaXJzdEl0ZW0iLCJzZXR1cFRodW1icyIsImRlc3Ryb3lUaHVtYnMiLCJpdGVtQ2xhc3MiLCJ0aHVtYlByb3BzIiwic2V0SXRlbXNXcmFwcGVyUmVmIiwic2xpZGVSaWdodCIsInNsaWRlTGVmdCIsInNldEl0ZW1zTGlzdFJlZiIsIl9jbGFzc25hbWVzIiwiX2RlZmF1bHQiLCJjdXN0b21DbGFzc05hbWUiLCJpc1NsaWRlciIsImNhcm91c2VsIiwiaXNTd2lwaW5nIiwidGh1bWJzIiwic2xpZGVyIiwiYW5pbWF0ZWQiLCJwcmV2aW91cyIsInRodW1iIiwic2xpZGUiLCJkb3QiLCJlbCIsIm9mZnNldFdpZHRoIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBhcnNlSW50IiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiX0Nhcm91c2VsIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjb250ZXh0VHlwZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsIm1peGlucyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImFyciIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJSZWdFeHAiLCJncm91cHMiLCJkZWxpbWl0ZXIiLCJvcHRpb25hbCIsInBhcnRpYWwiLCJhc3RlcmlzayIsInBhdHRlcm4iLCJhdHRhY2hLZXlzIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImZsYWdzIiwiYXJyYXlUb1JlZ2V4cCIsInRva2Vuc1RvUmVnRXhwIiwicGFyc2UiLCJzdHJpbmdUb1JlZ2V4cCIsImNvbXBpbGUiLCJzdHIiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwiUEFUSF9SRUdFWFAiLCJyZXMiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZXNjYXBlZCIsImdyb3VwIiwibW9kaWZpZXIiLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsImNoYXJDb2RlQXQiLCJtYXRjaGVzIiwib3B0cyIsImVuY29kZSIsInByZXR0eSIsInRva2VuIiwic2VnbWVudCIsImoiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwiX19zZWxmIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCJjcmVhdGVSZWYiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwidW5zdGFibGVfcmVhZCIsInVuc3RhYmxlX0FzeW5jTW9kZSIsInVuc3RhYmxlX1Byb2ZpbGVyIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwicGVyZm9ybWFuY2UiLCJ0aW1lc091dEF0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJfc2NoZWRNb2NrIiwicG9zdE1lc3NhZ2UiLCJ1cGRhdGUiLCJsb2NhbHMiLCJhY2NlcHQiLCJuZXdDb250ZW50IiwiaWR4IiwiZGlzcG9zZSIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJwYXJlbnQiLCJnZXRFbGVtZW50Iiwic3R5bGVUYXJnZXQiLCJoZWFkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJkb21TdHlsZSIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibmV3U3R5bGVzIiwiY3NzIiwibWVkaWEiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJpbnNlcnRJbnRvIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInNwbGljZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImF0dHJzIiwibm9uY2UiLCJhZGRBdHRycyIsInJlbW92ZSIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsImNyZWF0ZUxpbmtFbGVtZW50IiwidXBkYXRlTGluayIsImFwcGx5VG9UYWciLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiQm9vbGVhbiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsIndlYnBhY2tDb250ZXh0IiwicmVxIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImNvZGUiLCJyZXNvbHZlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJsb2FkZWQiLCJleGVjT3B0aW9ucyIsImZhY3RvcnkiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwicmVxdWlyZSIsImdldHRlciIsImRlZmluaXRpb24iLCJodSIsImNodW5rSWQiLCJobXJGIiwiRnVuY3Rpb24iLCJobWQiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwic2NyaXB0cyIsImNoYXJzZXQiLCJvblNjcmlwdENvbXBsZXRlIiwicHJldiIsIm9uZXJyb3IiLCJvbmxvYWQiLCJkb25lRm5zIiwiY3VycmVudENoaWxkTW9kdWxlIiwiYmxvY2tpbmdQcm9taXNlcyIsImN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzIiwicXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzIiwiY3VycmVudE1vZHVsZURhdGEiLCJpbnN0YWxsZWRNb2R1bGVzIiwiY3VycmVudFBhcmVudHMiLCJyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMiLCJjdXJyZW50U3RhdHVzIiwic2V0U3RhdHVzIiwibmV3U3RhdHVzIiwid2FpdEZvckJsb2NraW5nUHJvbWlzZXMiLCJibG9ja2VyIiwiUHJvbWlzZSIsImhvdENoZWNrIiwiYXBwbHlPblVwZGF0ZSIsImhtck0iLCJhcHBseUludmFsaWRhdGVkTW9kdWxlcyIsInVwZGF0ZWRNb2R1bGVzIiwiaG1yQyIsInByb21pc2VzIiwiaW50ZXJuYWxBcHBseSIsImhvdEFwcGx5IiwicmVzdWx0cyIsImVycm9ycyIsInJlcG9ydEVycm9yIiwib3V0ZGF0ZWRNb2R1bGVzIiwiaG1ySSIsImhtckQiLCJfbWFpbiIsInJlcXVlc3QiLCJhY3RpdmUiLCJwYXJlbnRzIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwicHJvbWlzZSIsInRyYWNrQmxvY2tpbmdQcm9taXNlIiwiY3JlYXRlUmVxdWlyZSIsIl9hY2NlcHRlZERlcGVuZGVuY2llcyIsIl9hY2NlcHRlZEVycm9ySGFuZGxlcnMiLCJfZGVjbGluZWREZXBlbmRlbmNpZXMiLCJfc2VsZkFjY2VwdGVkIiwiX3NlbGZEZWNsaW5lZCIsIl9zZWxmSW52YWxpZGF0ZWQiLCJfZGlzcG9zZUhhbmRsZXJzIiwiX3JlcXVpcmVTZWxmIiwiZGVwIiwiZXJyb3JIYW5kbGVyIiwiZGVjbGluZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJpbnZhbGlkYXRlIiwiY2hlY2siLCJzdGF0dXMiLCJhZGRTdGF0dXNIYW5kbGVyIiwicmVtb3ZlU3RhdHVzSGFuZGxlciIsImN1cnJlbnRVcGRhdGVDaHVua3MiLCJjdXJyZW50VXBkYXRlIiwiY3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MiLCJjdXJyZW50VXBkYXRlUnVudGltZSIsImluc3RhbGxlZENodW5rcyIsIjE3OSIsIndhaXRpbmdVcGRhdGVSZXNvbHZlcyIsImxvYWRVcGRhdGVDaHVuayIsInJlamVjdCIsImVycm9yVHlwZSIsInJlYWxTcmMiLCJhcHBseUhhbmRsZXIiLCJnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBhcmVudElkIiwiYWRkQWxsVG9TZXQiLCJqc29ucEhtciIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJuZXdNb2R1bGVGYWN0b3J5IiwiYWJvcnRFcnJvciIsImRvQXBwbHkiLCJkb0Rpc3Bvc2UiLCJjaGFpbkluZm8iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsIm91dGRhdGVkTW9kdWxlSWQiLCJkZXBlbmRlbmN5IiwiZGlzcG9zZUhhbmRsZXJzIiwiY2FsbGJhY2tzIiwiZXJyb3JIYW5kbGVycyIsImRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyIsImFjY2VwdENhbGxiYWNrIiwiZGVwZW5kZW5jeUlkIiwiZXJyMiIsIm9uRXJyb3JlZCIsIm9yaWdpbmFsRXJyb3IiLCJpZ25vcmVFcnJvcmVkIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwianNvbnAiLCJhcHBseUhhbmRsZXJzIiwiY2h1bmtJZHMiLCJyZW1vdmVkQ2h1bmtzIiwicmVtb3ZlZE1vZHVsZXMiLCJ1cGRhdGVkTW9kdWxlc0xpc3QiLCJmZXRjaCIsInJlc3BvbnNlIiwic3RhdHVzVGV4dCIsImpzb24iLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sIm1hcHBpbmdzIjoiOzZHQUFlLFNBQVNBLEVBQWdCQyxFQUFHQyxHQU16QyxPQUxBRixFQUFrQkcsT0FBT0MsZ0JBQWtCLFNBQXlCSCxFQUFHQyxHQUVyRSxPQURBRCxFQUFFSSxVQUFZSCxFQUNQRCxJQUdjQSxFQUFHQyxHQ0xiLFNBQVNJLEVBQWVDLEVBQVVDLEdBQy9DRCxFQUFTRSxVQUFZTixPQUFPTyxPQUFPRixFQUFXQyxXQUM5Q0YsRUFBU0UsVUFBVUUsWUFBY0osRUFDakMsRUFBZUEsRUFBVUMsRyx1QkNKWixTQUFTLElBZXRCLE9BZEEsRUFBV0wsT0FBT1MsUUFBVSxTQUFVQyxHQUNwQyxJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUMsVUFBVUMsT0FBUUYsSUFBSyxDQUN6QyxJQUFJRyxFQUFTRixVQUFVRCxHQUV2QixJQUFLLElBQUlJLEtBQU9ELEVBQ1ZkLE9BQU9NLFVBQVVVLGVBQWVDLEtBQUtILEVBQVFDLEtBQy9DTCxFQUFPSyxHQUFPRCxFQUFPQyxJQUszQixPQUFPTCxJQUdPUSxNQUFNQyxLQUFNUCxXQ2Y5QixTQUFTUSxFQUFXQyxHQUNsQixNQUE4QixNQUF2QkEsRUFBU0MsT0FBTyxHQUl6QixTQUFTQyxFQUFVQyxFQUFNQyxHQUN2QixJQUFLLElBQUlkLEVBQUljLEVBQU9DLEVBQUlmLEVBQUksRUFBR2dCLEVBQUlILEVBQUtYLE9BQVFhLEVBQUlDLEVBQUdoQixHQUFLLEVBQUdlLEdBQUssRUFDbEVGLEVBQUtiLEdBQUthLEVBQUtFLEdBR2pCRixFQUFLSSxNQ0VQLFFBVkEs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RCxFQUM3QnBELEVBQWdCcUQsRUFBZTFyRCxRQUFPLFNBQVVta0MsRUFBS3Z5QyxHQUVwRCxPQURBdXlDLEVBQUl2eUMsSUFBTyxFQUNKdXlDLElBQ0wsSUFDSG9rQixFQUF1QixHQUN2QmlELEVBQVM5MEQsU0FBUSxTQUFVc3RELEdBRXpCaEIsb0JBQW9CcnlELEVBQUU2M0QsRUFBaUJ4RSxTQUNWL3ZELElBQTdCdTBELEVBQWdCeEUsS0FFaEJpQyxFQUFTL3ZELEtBQUt5eUQsRUFBZ0IzRSxJQUM5Qm9FLEVBQW9CcEUsSUFBVyxNQUc3QmhCLG9CQUFvQm40QyxJQUN2Qm00QyxvQkFBb0JuNEMsRUFBRTIrQyxTQUFXLFNBQVV4RixFQUFTaUMsR0FFbERtQyxJQUNDcEYsb0JBQW9CcnlELEVBQUV5M0QsRUFBcUJwRSxJQUM1Q2hCLG9CQUFvQnJ5RCxFQUFFNjNELEVBQWlCeEUsU0FDVi92RCxJQUE3QnUwRCxFQUFnQnhFLEtBRWhCaUMsRUFBUy92RCxLQUFLeXlELEVBQWdCM0UsSUFDOUJvRSxFQUFvQnBFLElBQVcsTUFNbkNoQixvQkFBb0I2QyxLQUFPLEtBQzFCLEdBQXFCLG9CQUFWK0YsTUFBdUIsTUFBTSxJQUFJaDVELE1BQU0sc0NBQ2xELE9BQU9nNUQsTUFBTTVJLG9CQUFvQnB5RCxFQUFJb3lELG9CQUFvQmlCLFFBQVFwc0MsTUFBTWcwQyxJQUN0RSxHQUF1QixNQUFwQkEsRUFBUzVELE9BQVosQ0FDQSxJQUFJNEQsRUFBU3Z5RCxHQUFJLE1BQU0sSUFBSTFHLE1BQU0sbUNBQXFDaTVELEVBQVNDLFlBQy9FLE9BQU9ELEVBQVNFLGEsR0NuZmxCLElBQUlDLG9CQUFzQmhKLG9CQUFvQixPIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW52YXJpYW50O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIHBhdGgudG9Mb3dlckNhc2UoKS5pbmRleE9mKHByZWZpeC50b0xvd2VyQ2FzZSgpKSA9PT0gMCAmJiAnLz8jJy5pbmRleE9mKHBhdGguY2hhckF0KHByZWZpeC5sZW5ndGgpKSAhPT0gLTE7XG59XG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuXG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG5cbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbjtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKSA6IHZvaWQgMDtcbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJykgOiB2b2lkIDA7XG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn1cblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5mdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cblxuZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZm9yY2VSZWZyZXNoID0gX3Byb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQkMSA9ICdoYXNoY2hhbmdlJztcbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG5mdW5jdGlvbiBzdHJpcEhhc2godXJsKSB7XG4gIHZhciBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpICsgJyMnICsgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IF9wcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB2b2lkIDAgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsJCQxKGEsIGIpIHtcbiAgICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2g7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbCQkMShwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH0gLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG5cblxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHZhciBiYXNlVGFnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgIHZhciBocmVmID0gJyc7XG5cbiAgICBpZiAoYmFzZVRhZyAmJiBiYXNlVGFnLmdldEF0dHJpYnV0ZSgnaHJlZicpKSB7XG4gICAgICBocmVmID0gc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaHJlZiArICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKSA6IHZvaWQgMDtcbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKSA6IHZvaWQgMDtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gX3Byb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHZvaWQgMCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IF9wcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG5cbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5leHBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgcGFyc2VQYXRoLCBjcmVhdGVQYXRoIH07XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgPSAxMDczNzQxODIzO1xudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB7fTtcblxuZnVuY3Rpb24gZ2V0VW5pcXVlSWQoKSB7XG4gIHZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuICByZXR1cm4gY29tbW9uanNHbG9iYWxba2V5XSA9IChjb21tb25qc0dsb2JhbFtrZXldIHx8IDApICsgMTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgZ2V0VW5pcXVlSWQoKSArICdfXyc7XG5cbiAgdmFyIFByb3ZpZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfdGhpczIgPSBfQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG5cbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBDb25zdW1lci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbnZhciBpbmRleCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQgfHwgY3JlYXRlUmVhY3RDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgaGlzdG9yeUNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyLUhpc3RvcnlcIik7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCQxID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBjb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dCQxKFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCh0aGlzLnN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKSxcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5zdGF0aWNDb250ZXh0XG4gICAgICB9XG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChoaXN0b3J5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLmhpc3RvcnlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIExpZmVjeWNsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaWZlY3ljbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlmZWN5Y2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlKSB0aGlzLnByb3BzLm9uVXBkYXRlLmNhbGwodGhpcywgdGhpcywgcHJldlByb3BzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTGlmZWN5Y2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheSBmcm9tIGEgc2NyZWVuLlxuICovXG5cbmZ1bmN0aW9uIFByb21wdChfcmVmKSB7XG4gIHZhciBtZXNzYWdlID0gX3JlZi5tZXNzYWdlLFxuICAgICAgX3JlZiR3aGVuID0gX3JlZi53aGVuLFxuICAgICAgd2hlbiA9IF9yZWYkd2hlbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkd2hlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoIXdoZW4gfHwgY29udGV4dC5zdGF0aWNDb250ZXh0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWV0aG9kID0gY29udGV4dC5oaXN0b3J5LmJsb2NrO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3RvcnksXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBjb250ZXh0LnN0YXRpY0NvbnRleHQ7XG4gICAgdmFyIG1ldGhvZCA9IHB1c2ggPyBoaXN0b3J5LnB1c2ggOiBoaXN0b3J5LnJlcGxhY2U7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29tcHV0ZWRNYXRjaCA/IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpIDogX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICB9KSA6IHRvKTsgLy8gV2hlbiByZW5kZXJpbmcgaW4gYSBzdGF0aWMgY29udGV4dCxcbiAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cblxuICAgIGlmIChzdGF0aWNDb250ZXh0KSB7XG4gICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG5cbiAgICAgICAgaWYgKCFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICAgIGtleTogcHJldkxvY2F0aW9uLmtleVxuICAgICAgICB9KSkpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG86IHRvXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIGNhY2hlTGltaXQkMSA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQkMSA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoJDEocGF0aCwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgcGF0aENhY2hlID0gY2FjaGUkMVtjYWNoZUtleV0gfHwgKGNhY2hlJDFbY2FjaGVLZXldID0ge30pO1xuICBpZiAocGF0aENhY2hlW3BhdGhdKSByZXR1cm4gcGF0aENhY2hlW3BhdGhdO1xuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmVnZXhwID0gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHJlZ2V4cDogcmVnZXhwLFxuICAgIGtleXM6IGtleXNcbiAgfTtcblxuICBpZiAoY2FjaGVDb3VudCQxIDwgY2FjaGVMaW1pdCQxKSB7XG4gICAgcGF0aENhY2hlW3BhdGhdID0gcmVzdWx0O1xuICAgIGNhY2hlQ291bnQkMSsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoLlxuICovXG5cblxuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiBvcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG4gIHZhciBwYXRocyA9IFtdLmNvbmNhdChwYXRoKTtcbiAgcmV0dXJuIHBhdGhzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgcGF0aCkge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgkMShwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZVxuICAgIH0pLFxuICAgICAgICByZWdleHAgPSBfY29tcGlsZVBhdGgucmVnZXhwLFxuICAgICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcbiAgICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG4gICAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsXG4gICAgICAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICB2YXIgdmFsdWUgPSBjaGlsZHJlbihwcm9wcyk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodmFsdWUgIT09IHVuZGVmaW5lZCwgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArIChcIjxSb3V0ZVwiICsgKHBhdGggPyBcIiBwYXRoPVxcXCJcIiArIHBhdGggKyBcIlxcXCJcIiA6IFwiXCIpICsgXCI+LCBidXQgeW91IFwiKSArIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxuXG52YXIgUm91dGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb3BzXG4gICAgICB9LCBwcm9wcy5tYXRjaCA/IGNoaWxkcmVuID8gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IGNoaWxkcmVuIDogY29tcG9uZW50ID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgdmFyIGVsZW1lbnQsIG1hdGNoOyAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG5cbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFwiICsgZGlzcGxheU5hbWUgKyBcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoaGlzdG9yeUNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VMb2NhdGlvbigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmxvY2F0aW9uO1xufVxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgcGF0aCkgOiBtYXRjaDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwgPSB3aW5kb3c7XG4gICAgdmFyIGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIHZhciBidWlsZE5hbWVzID0ge1xuICAgICAgY2pzOiBcIkNvbW1vbkpTXCIsXG4gICAgICBlc206IFwiRVMgbW9kdWxlc1wiLFxuICAgICAgdW1kOiBcIlVNRFwiXG4gICAgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIHZhciBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW1wiZXNtXCJdOyAvLyBUT0RPOiBBZGQgbGluayB0byBhcnRpY2xlIHRoYXQgZXhwbGFpbnMgaW4gZGV0YWlsIGhvdyB0byBhdm9pZFxuICAgICAgLy8gbG9hZGluZyAyIGRpZmZlcmVudCBidWlsZHMuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbG9hZGluZyB0aGUgXCIgKyBzZWNvbmRhcnlCdWlsZE5hbWUgKyBcIiBidWlsZCBvZiBSZWFjdCBSb3V0ZXIgXCIgKyAoXCJvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlIFwiICsgaW5pdGlhbEJ1aWxkTmFtZSArIFwiIFwiKSArIFwiYnVpbGQsIHNvIHRoaW5ncyB3b24ndCB3b3JrIHJpZ2h0LlwiKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IFwiZXNtXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgaGlzdG9yeUNvbnRleHQgYXMgX19IaXN0b3J5Q29udGV4dCwgY29udGV4dCBhcyBfX1JvdXRlckNvbnRleHQsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXIuanMubWFwXG4iLCJpbXBvcnQgeyBSb3V0ZXIsIF9fUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKVxuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIHJlc29sdmVUb0xvY2F0aW9uID0gZnVuY3Rpb24gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcImZ1bmN0aW9uXCIgPyB0byhjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xudmFyIG5vcm1hbGl6ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiBub3JtYWxpemVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xuXG52YXIgZm9yd2FyZFJlZlNoaW0gPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiA9IGZvcndhcmRSZWZTaGltO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG52YXIgTGlua0FuY2hvciA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgbmF2aWdhdGUgPSBfcmVmLm5hdmlnYXRlLFxuICAgICAgX29uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiaW5uZXJSZWZcIiwgXCJuYXZpZ2F0ZVwiLCBcIm9uQ2xpY2tcIl0pO1xuXG4gIHZhciB0YXJnZXQgPSByZXN0LnRhcmdldDtcblxuICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfb25DbGljaykgX29uQ2xpY2soZXZlbnQpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhyb3cgZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBuYXZpZ2F0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gIH0gZWxzZSB7XG4gICAgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gIH1cbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudCAqL1xuXG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHByb3BzKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmtBbmNob3IuZGlzcGxheU5hbWUgPSBcIkxpbmtBbmNob3JcIjtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmMiRjb21wb25lbnQgPSBfcmVmMi5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcmVmMiRjb21wb25lbnQgPT09IHZvaWQgMCA/IExpbmtBbmNob3IgOiBfcmVmMiRjb21wb25lbnQsXG4gICAgICByZXBsYWNlID0gX3JlZjIucmVwbGFjZSxcbiAgICAgIHRvID0gX3JlZjIudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYyLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjb21wb25lbnRcIiwgXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeTtcbiAgICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKSwgY29udGV4dC5sb2NhdGlvbik7XG4gICAgdmFyIGhyZWYgPSBsb2NhdGlvbiA/IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBuYXZpZ2F0ZTogZnVuY3Rpb24gbmF2aWdhdGUoKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHJlcGxhY2UgPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9XG4gICAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgdG9UeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKTtcbiAgdmFyIHJlZlR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuYW55XG4gIH0pXSk7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbiAgTGluay5wcm9wVHlwZXMgPSB7XG4gICAgaW5uZXJSZWY6IHJlZlR5cGUsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiB0b1R5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgZm9yd2FyZFJlZlNoaW0kMSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiQxID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmJDEgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiQxID0gZm9yd2FyZFJlZlNoaW0kMTtcbn1cblxuZnVuY3Rpb24gam9pbkNsYXNzbmFtZXMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc25hbWVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGNsYXNzbmFtZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gY2xhc3NuYW1lcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaTtcbiAgfSkuam9pbihcIiBcIik7XG59XG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5cblxudmFyIE5hdkxpbmsgPSBmb3J3YXJkUmVmJDEoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZiRhcmlhQ3VycmVudCA9IF9yZWZbXCJhcmlhLWN1cnJlbnRcIl0sXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWYkYXJpYUN1cnJlbnQgPT09IHZvaWQgMCA/IFwicGFnZVwiIDogX3JlZiRhcmlhQ3VycmVudCxcbiAgICAgIF9yZWYkYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9PT0gdm9pZCAwID8gXCJhY3RpdmVcIiA6IF9yZWYkYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlU3R5bGUgPSBfcmVmLmFjdGl2ZVN0eWxlLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgaXNBY3RpdmVQcm9wID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGxvY2F0aW9uUHJvcCA9IF9yZWYubG9jYXRpb24sXG4gICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgc3R5bGVQcm9wID0gX3JlZi5zdHlsZSxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhcmlhLWN1cnJlbnRcIiwgXCJhY3RpdmVDbGFzc05hbWVcIiwgXCJhY3RpdmVTdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcImV4YWN0XCIsIFwiaXNBY3RpdmVcIiwgXCJsb2NhdGlvblwiLCBcInNlbnNpdGl2ZVwiLCBcInN0cmljdFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSBpc0FjdGl2ZSA/IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZVByb3AsIGFjdGl2ZUNsYXNzTmFtZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlUHJvcCwge30sIGFjdGl2ZVN0eWxlKSA6IHN0eWxlUHJvcDtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGwsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRvOiB0b0xvY2F0aW9uXG4gICAgfSwgcmVzdCk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0kMSAhPT0gZm9yd2FyZFJlZiQxKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKTtcbiAgTmF2TGluay5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgTGluay5wcm9wVHlwZXMsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFR5cGUsXG4gICAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxuICB9KTtcbn1cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluayB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLWRvbS5qcy5tYXBcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IEhlYWRzaG90IGZyb20gXCIuLi8uLi9hc3NldHMvaW1hZ2VzL3Byb2ZpbGUvaGVhZHNob3QuanBnXCI7XHJcbmltcG9ydCBcIi4vUHJvZmlsZS5zY3NzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9maWxlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIHB1YmxpYyByZW5kZXIoKTogUmVhY3QuUmVhY3ROb2RlIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJwcm9maWxlXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgYWx0PVwiTXkgaGVhZCBzaG90IHBpY3R1cmVcIiBzcmM9e0hlYWRzaG90fS8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgxPkhpLCBJJ20gSm9zaHVhIFNwZXJyeTwvaDE+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgyPkknbSBhIGZyb250LWVuZCB3ZWIgZGV2ZWxvcGVyIGFuZCBzb2Z0d2FyZSBkZXZlbG9wZXI8L2gyPlxyXG4gICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPVwiL3BvcnRmb2xpb1wiIGNsYXNzTmFtZT1cInBvcnRmb2xpby1saW5rXCI+VmlldyBteSBwb3J0Zm9saW88L0xpbms+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxmb290ZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIi4uLy4uL2Fzc2V0cy9yZXN1bWUucGRmXCI+UmVzdW1lPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIHRpdGxlPVwibXJqb3NodWFzcGVycnlAZ21haWwuY29tXCIgaHJlZj1cIm1haWx0bzptcmpvc2h1YXNwZXJyeUBnbWFpbC5jb21cIj5FbWFpbDwvYT5cclxuICAgICAgICAgICAgICAgICAgICA8YSByZWw9XCJub29wZW5lclwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vbXJzcGVycnlcIj5HaXRodWI8L2E+XHJcbiAgICAgICAgICAgICAgICA8L2Zvb3Rlcj5cclxuICAgICAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFwiLi9Qcm9qZWN0RGlzcGxheS5zY3NzXCI7XHJcblxyXG5pbnRlcmZhY2UgSVByb2plY3Qge1xyXG4gICAgdGl0bGU/OiBzdHJpbmc7XHJcbiAgICBkYXRhOiB7XHJcbiAgICAgICAgbmFtZTogc3RyaW5nO1xyXG4gICAgICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xyXG4gICAgICAgIGFsdDogc3RyaW5nO1xyXG4gICAgfVtdO1xyXG4gICAgYXNzZXRGb2xkZXI6IHN0cmluZztcclxuICAgIHVybFByZWZpeD86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvamVjdERpc3BsYXkgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElQcm9qZWN0PiB7XHJcbiAgICBwdWJsaWMgcmVuZGVyKCk6IFJlYWN0LlJlYWN0Tm9kZSB7XHJcbiAgICAgICAgY29uc3QgZmlndXJlczogUmVhY3QuUmVhY3RFbGVtZW50W10gPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXg6IG51bWJlciA9IDA7IGluZGV4IDwgdGhpcy5wcm9wcy5kYXRhLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAvLyBFeHRyYWN0IHZhcmlhYmxlcyBmcm9tIGRhdGFcclxuICAgICAgICAgICAgY29uc3QgeyBuYW1lLCBkZXNjcmlwdGlvbiwgYWx0IH0gPSB0aGlzLnByb3BzLmRhdGFbaW5kZXhdO1xyXG4gICAgICAgICAgICBjb25zdCBpZDogc3RyaW5nID0gbmFtZS50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiIFwiKS5qb2luKFwiLVwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgcGF0aCB0byB0aGUgaW1hZ2UgdGhpcyBmaWd1cmUgcmVwcmVzZW50c1xyXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5wcm9wcy5hc3NldEZvbGRlciArIFwiL1wiICsgaWQgKyBcIi5qcGdcIjtcclxuICAgICAgICAgICAgY29uc3QgaW1hZ2U6IHN0cmluZyA9IHJlcXVpcmUoXCIuLi8uLi9hc3NldHMvaW1hZ2VzL1wiICsgcGF0aCk7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIHByb2plY3QgdXJsXHJcbiAgICAgICAgICAgIGxldCB1cmxQcmVmaXg6IHN0cmluZyA9IHRoaXMucHJvcHMudXJsUHJlZml4ID8/IFwiXCI7XHJcbiAgICAgICAgICAgIGlmICh1cmxQcmVmaXggIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIHVybFByZWZpeCArPSBcIi9cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgdXJsOiBzdHJpbmcgPSBcImh0dHBzOi8vbXJzcGVycnkuZ2l0aHViLmlvL1wiICsgdXJsUHJlZml4ICsgaWQ7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIGRpc3BsYXlcclxuICAgICAgICAgICAgZmlndXJlcy5wdXNoKChcclxuICAgICAgICAgICAgICAgIDxhIGtleT17aW5kZXh9IGhyZWY9e3VybH0gY2xhc3NOYW1lPVwicHJvamVjdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxmaWd1cmUgdGl0bGU9e25hbWV9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17aW1hZ2V9IGFsdD17YWx0fS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxmaWdjYXB0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGl0bGVcIj57bmFtZX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGVzY3JpcHRpb24gPyA8c3BhbiBjbGFzc05hbWU9XCJkZXNjcmlwdGlvblwiPntkZXNjcmlwdGlvbn08L3NwYW4+IDogXCJcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9maWdjYXB0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZmlndXJlPlxyXG4gICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICApKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInByb2plY3QtZGlzcGxheVwiPlxyXG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMudGl0bGUgPyA8aDE+e3RoaXMucHJvcHMudGl0bGV9PC9oMT4gOiBcIlwifVxyXG4gICAgICAgICAgICAgICAge2ZpZ3VyZXN9XHJcbiAgICAgICAgICAgIDwvc2VjdGlvbj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgXCIuL05hdmlnYXRpb24uc2Nzc1wiO1xyXG5cclxuaW50ZXJmYWNlIElOYXZpZ2F0aW9uIHtcclxuICAgIHZpZXc6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmF2aWdhdGlvbiBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8SU5hdmlnYXRpb24+IHtcclxuICAgIHB1YmxpYyByZW5kZXIoKTogUmVhY3QuUmVhY3ROb2RlIHtcclxuICAgICAgICAvLyBMaXN0IG9mIGFsbCBuYXZpZ2F0aW9uIGl0ZW1zXHJcbiAgICAgICAgY29uc3QgaXRlbXM6IHN0cmluZ1tdID0gW1wiSG9tZVwiLCBcIlBvcnRmb2xpb1wiLCBcIkdhbWVzXCIsIFwiVmlzdWFsc1wiXTtcclxuXHJcbiAgICAgICAgY29uc3QgbmF2SXRlbXM6IFJlYWN0LlJlYWN0RWxlbWVudFtdID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGl0ZW1zLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gaXRlbXNbaW5kZXhdO1xyXG4gICAgICAgICAgICBjb25zdCBpZCA9IGl0ZW0udG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjdXJyZW50IGl0ZW0gaXMgdGhlIHBhZ2UgdGhhdCBpcyBkaXNwbGF5ZWRcclxuICAgICAgICAgICAgbGV0IGxpbms6IFJlYWN0LlJlYWN0RWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudmlldyA9PT0gaWQpIHtcclxuICAgICAgICAgICAgICAgIGxpbmsgPSA8YSBjbGFzc05hbWU9XCJhY3RpdmVcIj57aXRlbX08L2E+O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGluayA9IDxMaW5rIHRvPXtcIi9cIiArIGlkfT57aXRlbX08L0xpbms+O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBuYXZJdGVtcy5wdXNoKDxsaSBrZXk9e2luZGV4fT57bGlua308L2xpPik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8bmF2IGNsYXNzTmFtZT1cIm5hdmlnYXRpb25cIj5cclxuICAgICAgICAgICAgICAgIDx1bD57bmF2SXRlbXN9PC91bD5cclxuICAgICAgICAgICAgPC9uYXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBQcm9qZWN0RGlzcGxheSBmcm9tIFwiLi4vY29tbW9uL1Byb2plY3REaXNwbGF5XCI7XHJcbmltcG9ydCBQb3J0Zm9saW9EYXRhIGZyb20gXCIuLi8uLi9hc3NldHMvZGF0YS9wcm9qZWN0cy5qc29uXCI7XHJcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gXCIuLi9jb21tb24vTmF2aWdhdGlvblwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9ydGZvbGlvIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIHB1YmxpYyByZW5kZXIoKTogUmVhY3QuUmVhY3ROb2RlIHtcclxuICAgICAgICByZXR1cm4gPD5cclxuICAgICAgICAgICAgPE5hdmlnYXRpb24gdmlldz1cInBvcnRmb2xpb1wiLz5cclxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwicG9ydGZvbGlvXCI+XHJcbiAgICAgICAgICAgICAgICA8UHJvamVjdERpc3BsYXlcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIlBlcnNvbmFsIFByb2plY3RzXCJcclxuICAgICAgICAgICAgICAgICAgICBkYXRhPXtQb3J0Zm9saW9EYXRhfVxyXG4gICAgICAgICAgICAgICAgICAgIGFzc2V0Rm9sZGVyPVwicG9ydGZvbGlvXCJcclxuICAgICAgICAgICAgICAgICAgICB1cmxQcmVmaXg9XCJwb3J0Zm9saW8vcHJvamVjdHNcIi8+XHJcbiAgICAgICAgICAgIDwvc2VjdGlvbj5cclxuICAgICAgICA8Lz47XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFByb2plY3REaXNwbGF5IGZyb20gXCIuLi9jb21tb24vUHJvamVjdERpc3BsYXlcIjtcclxuaW1wb3J0IEdhbWVEYXRhIGZyb20gXCIuLi8uLi9hc3NldHMvZGF0YS9nYW1lcy5qc29uXCI7XHJcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gXCIuLi9jb21tb24vTmF2aWdhdGlvblwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZXMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcclxuICAgIHB1YmxpYyByZW5kZXIoKTogUmVhY3QuUmVhY3ROb2RlIHtcclxuICAgICAgICByZXR1cm4gPD5cclxuICAgICAgICAgICAgPE5hdmlnYXRpb24gdmlldz1cImdhbWVzXCIvPlxyXG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJnYW1lc1wiPlxyXG4gICAgICAgICAgICAgICAgPFByb2plY3REaXNwbGF5XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJCcm93c2VyIEdhbWVzXCJcclxuICAgICAgICAgICAgICAgICAgICBkYXRhPXtHYW1lRGF0YX1cclxuICAgICAgICAgICAgICAgICAgICBhc3NldEZvbGRlcj1cImdhbWVzXCIvPlxyXG4gICAgICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgICAgPC8+O1xyXG4gICAgfVxyXG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBQcm9qZWN0RGlzcGxheSBmcm9tIFwiLi4vY29tbW9uL1Byb2plY3REaXNwbGF5XCI7XHJcbmltcG9ydCBWaXN1YWxEYXRhIGZyb20gXCIuLi8uLi9hc3NldHMvZGF0YS92aXN1YWxzLmpzb25cIjtcclxuaW1wb3J0IE5hdmlnYXRpb24gZnJvbSBcIi4uL2NvbW1vbi9OYXZpZ2F0aW9uXCI7XHJcbmltcG9ydCBcInJlYWN0LXJlc3BvbnNpdmUtY2Fyb3VzZWwvbGliL3N0eWxlcy9jYXJvdXNlbC5taW4uY3NzXCI7XHJcbmltcG9ydCB7IENhcm91c2VsIH0gZnJvbSBcInJlYWN0LXJlc3BvbnNpdmUtY2Fyb3VzZWxcIjtcclxuaW1wb3J0IFwiLi9WaXN1YWxzLnNjc3NcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpc3VhbHMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcclxuICAgIHB1YmxpYyByZW5kZXIoKTogUmVhY3QuUmVhY3ROb2RlIHtcclxuICAgICAgICAvLyBDYXJvdXNlbCBzZXR0aW5nc1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmdzOiB7fSA9IHtcclxuICAgICAgICAgICAgYXV0b1BsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIGludGVydmFsOiA1MDAwLFxyXG4gICAgICAgICAgICBpbmZpbml0ZUxvb3A6IHRydWUsXHJcbiAgICAgICAgICAgIHNob3dJbmRpY2F0b3JzOiBmYWxzZSxcclxuICAgICAgICAgICAgc2hvd1N0YXR1czogZmFsc2UsXHJcbiAgICAgICAgICAgIHNob3dUaHVtYnM6IGZhbHNlLFxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uVGltZTogMTAwMFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIEdldCB0aGUgY2Fyb3VzZWwgYW5kIHByb2plY3QgZGF0YVxyXG4gICAgICAgIGNvbnN0IGNhcm91c2VsRGF0YTogc3RyaW5nW10gPSBWaXN1YWxEYXRhLmNhcm91c2VsO1xyXG4gICAgICAgIGNvbnN0IHByb2plY3REYXRhOiB7IG5hbWU6IHN0cmluZywgYWx0OiBzdHJpbmcgfVtdID0gVmlzdWFsRGF0YS5wcm9qZWN0cztcclxuXHJcbiAgICAgICAgcmV0dXJuIDw+XHJcbiAgICAgICAgICAgIDxOYXZpZ2F0aW9uIHZpZXc9XCJ2aXN1YWxzXCIvPlxyXG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJ2aXN1YWxzXCI+XHJcbiAgICAgICAgICAgICAgICA8Q2Fyb3VzZWwgey4uLnNldHRpbmdzfT5cclxuICAgICAgICAgICAgICAgICAgICB7Y2Fyb3VzZWxEYXRhLm1hcCgobmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgc3RhdGljIGNhcm91c2VsIGltYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNyYzogc3RyaW5nID0gcmVxdWlyZShcIi4uLy4uL2Fzc2V0cy9pbWFnZXMvdmlzdWFscy9jYXJvdXNlbC9jYXJvdXNlbC1cIiArIChpbmRleCArIDEpICsgXCIuanBnXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTG9jYXRlIHRoZSBhbHQgdGV4dCBhc3NvY2lhdGVkIHdpdGggdGhlIGltYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbHQ6IHN0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcHJvamVjdCBvZiBwcm9qZWN0RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2plY3QubmFtZSA9PT0gbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdCA9IHByb2plY3QuYWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpZDogc3RyaW5nID0gbmFtZS50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiIFwiKS5qb2luKFwiLVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGtleT17aW5kZXh9IHRhYkluZGV4PXstMX0gdGl0bGU9e25hbWV9IGhyZWY9e1wiaHR0cHM6Ly9tcnNwZXJyeS5naXRodWIuaW8vdmlzdWFscy9wcm9qZWN0cy9cIiArIGlkfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17c3JjfSBhbHQ9e2FsdH0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImxlZ2VuZFwiPntuYW1lfTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgICAgIDwvQ2Fyb3VzZWw+XHJcbiAgICAgICAgICAgICAgICA8UHJvamVjdERpc3BsYXlcclxuICAgICAgICAgICAgICAgICAgICBkYXRhPXtwcm9qZWN0RGF0YX1cclxuICAgICAgICAgICAgICAgICAgICBhc3NldEZvbGRlcj1cInZpc3VhbHNcIlxyXG4gICAgICAgICAgICAgICAgICAgIHVybFByZWZpeD1cInZpc3VhbHMvcHJvamVjdHNcIi8+XHJcbiAgICAgICAgICAgIDwvc2VjdGlvbj5cclxuICAgICAgICA8Lz47XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgaG90IH0gZnJvbSBcInJlYWN0LWhvdC1sb2FkZXJcIjtcclxuaW1wb3J0IHsgSGFzaFJvdXRlciwgUm91dGUsIFN3aXRjaCB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gXCIuL2NvbW1vbi9OYXZpZ2F0aW9uXCI7XHJcbmltcG9ydCBQcm9maWxlIGZyb20gXCIuL3Byb2ZpbGUvUHJvZmlsZVwiO1xyXG5pbXBvcnQgUG9ydGZvbGlvIGZyb20gXCIuL3BvcnRmb2xpby9Qb3J0Zm9saW9cIjtcclxuaW1wb3J0IEdhbWVzIGZyb20gXCIuL2dhbWVzL0dhbWVzXCI7XHJcbmltcG9ydCBWaXN1YWxzIGZyb20gXCIuL3Zpc3VhbHMvVmlzdWFsc1wiO1xyXG5pbXBvcnQgXCIuLi9zYXNzL3Jlc2V0LnNjc3NcIjtcclxuaW1wb3J0IFwiLi4vc2Fzcy9iYXNlLnNjc3NcIjtcclxuaW1wb3J0IFwiLi9BcHAuc2Nzc1wiO1xyXG5cclxuY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XHJcbiAgICBwdWJsaWMgc3RhdGljIHVwZGF0ZUhhc2goaGFzaDogc3RyaW5nKTogYW55IHtcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IFwiI1wiICsgaGFzaDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBPbmx5IHVwZGF0ZSB0aGUgdmlldyB3aGVuIHRoZSBoYXNoIGNoYW5nZXNcclxuICAgIHB1YmxpYyBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImhhc2hjaGFuZ2VcIiwgKCkgPT4gdGhpcy5mb3JjZVVwZGF0ZSgpLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbmRlcigpOiBSZWFjdC5SZWFjdE5vZGUge1xyXG4gICAgICAgIC8vIEdldCB0aGUgd2luZG93IGhhc2ggYW5kIGRldGVybWluZSB0aGUgdmlldyB0byBkaXNwbGF5XHJcbiAgICAgICAgY29uc3QgaGFzaDogc3RyaW5nID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XHJcbiAgICAgICAgY29uc3Qgdmlldzogc3RyaW5nID0gaGFzaC5zdWJzdHJpbmcoaGFzaC5pbmRleE9mKFwiI1wiKSArIDEpLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxIYXNoUm91dGVyPlxyXG4gICAgICAgICAgICAgICAgPFN3aXRjaD5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9wb3J0Zm9saW9cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFBvcnRmb2xpby8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3V0ZT5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9nYW1lc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8R2FtZXMvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUm91dGU+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlzdWFsc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8VmlzdWFscy8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3V0ZT5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFByb2ZpbGUvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUm91dGU+XHJcbiAgICAgICAgICAgICAgICA8L1N3aXRjaD5cclxuICAgICAgICAgICAgPC9IYXNoUm91dGVyPlxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8qc3dpdGNoICh2aWV3KSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJcIjpcclxuICAgICAgICAgICAgY2FzZSBcInByb2ZpbGVcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiA8UHJvZmlsZS8+O1xyXG4gICAgICAgICAgICBjYXNlIFwicG9ydGZvbGlvXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPD5cclxuICAgICAgICAgICAgICAgICAgICA8TmF2aWdhdGlvbiB2aWV3PXt2aWV3fS8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFBvcnRmb2xpby8+XHJcbiAgICAgICAgICAgICAgICA8Lz47XHJcbiAgICAgICAgICAgIGNhc2UgXCJnYW1lc1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDw+XHJcbiAgICAgICAgICAgICAgICAgICAgPE5hdmlnYXRpb24gdmlldz17dmlld30vPlxyXG4gICAgICAgICAgICAgICAgICAgIDxHYW1lcy8+XHJcbiAgICAgICAgICAgICAgICA8Lz47XHJcbiAgICAgICAgICAgIGNhc2UgXCJ2aXN1YWxzXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPD5cclxuICAgICAgICAgICAgICAgICAgICA8TmF2aWdhdGlvbiB2aWV3PXt2aWV3fS8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFZpc3VhbHMvPlxyXG4gICAgICAgICAgICAgICAgPC8+O1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgdGhlIGhhc2ggaWYgaXQgaXMgaW52YWxpZFxyXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfSovXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGhvdChtb2R1bGUpKEFwcCk7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcclxuaW1wb3J0IEFwcCBmcm9tIFwiLi9BcHBcIjtcclxuXHJcblJlYWN0RE9NLnJlbmRlcig8QXBwLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSk7IiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxOCBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdGlmIChhcmcubGVuZ3RoKSB7XG5cdFx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGlubmVyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0aWYgKGFyZy50b1N0cmluZyA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZykge1xuXHRcdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChhcmcudG9TdHJpbmcoKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmNhcm91c2VsIC5jb250cm9sLWFycm93LC5jYXJvdXNlbC5jYXJvdXNlbC1zbGlkZXIgLmNvbnRyb2wtYXJyb3d7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAuMjVzIGVhc2UtaW47LW1vei10cmFuc2l0aW9uOmFsbCAuMjVzIGVhc2UtaW47LW1zLXRyYW5zaXRpb246YWxsIC4yNXMgZWFzZS1pbjstby10cmFuc2l0aW9uOmFsbCAuMjVzIGVhc2UtaW47dHJhbnNpdGlvbjphbGwgLjI1cyBlYXNlLWluO29wYWNpdHk6LjQ7ZmlsdGVyOmFscGhhKG9wYWNpdHk9NDApO3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6Mjt0b3A6MjBweDtiYWNrZ3JvdW5kOm5vbmU7Ym9yZGVyOjA7Zm9udC1zaXplOjMycHg7Y3Vyc29yOnBvaW50ZXJ9LmNhcm91c2VsIC5jb250cm9sLWFycm93OmZvY3VzLC5jYXJvdXNlbCAuY29udHJvbC1hcnJvdzpob3ZlcntvcGFjaXR5OjE7ZmlsdGVyOmFscGhhKG9wYWNpdHk9MTAwKX0uY2Fyb3VzZWwgLmNvbnRyb2wtYXJyb3c6YmVmb3JlLC5jYXJvdXNlbC5jYXJvdXNlbC1zbGlkZXIgLmNvbnRyb2wtYXJyb3c6YmVmb3Jle21hcmdpbjowIDVweDtkaXNwbGF5OmlubGluZS1ibG9jaztib3JkZXItdG9wOjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjhweCBzb2xpZCB0cmFuc3BhcmVudDtjb250ZW50OicnfS5jYXJvdXNlbCAuY29udHJvbC1kaXNhYmxlZC5jb250cm9sLWFycm93e29wYWNpdHk6MDtmaWx0ZXI6YWxwaGEob3BhY2l0eT0wKTtjdXJzb3I6aW5oZXJpdDtkaXNwbGF5Om5vbmV9LmNhcm91c2VsIC5jb250cm9sLXByZXYuY29udHJvbC1hcnJvd3tsZWZ0OjB9LmNhcm91c2VsIC5jb250cm9sLXByZXYuY29udHJvbC1hcnJvdzpiZWZvcmV7Ym9yZGVyLXJpZ2h0OjhweCBzb2xpZCAjZmZmfS5jYXJvdXNlbCAuY29udHJvbC1uZXh0LmNvbnRyb2wtYXJyb3d7cmlnaHQ6MH0uY2Fyb3VzZWwgLmNvbnRyb2wtbmV4dC5jb250cm9sLWFycm93OmJlZm9yZXtib3JkZXItbGVmdDo4cHggc29saWQgI2ZmZn0uY2Fyb3VzZWwtcm9vdHtvdXRsaW5lOm5vbmV9LmNhcm91c2Vse3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCV9LmNhcm91c2VsICp7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94fS5jYXJvdXNlbCBpbWd7d2lkdGg6MTAwJTtkaXNwbGF5OmlubGluZS1ibG9jaztwb2ludGVyLWV2ZW50czpub25lfS5jYXJvdXNlbCAuY2Fyb3VzZWx7cG9zaXRpb246cmVsYXRpdmV9LmNhcm91c2VsIC5jb250cm9sLWFycm93e291dGxpbmU6MDtib3JkZXI6MDtiYWNrZ3JvdW5kOm5vbmU7dG9wOjUwJTttYXJnaW4tdG9wOi0xM3B4O2ZvbnQtc2l6ZToxOHB4fS5jYXJvdXNlbCAudGh1bWJzLXdyYXBwZXJ7bWFyZ2luOjIwcHg7b3ZlcmZsb3c6aGlkZGVufS5jYXJvdXNlbCAudGh1bWJzey13ZWJraXQtdHJhbnNpdGlvbjphbGwgLjE1cyBlYXNlLWluOy1tb3otdHJhbnNpdGlvbjphbGwgLjE1cyBlYXNlLWluOy1tcy10cmFuc2l0aW9uOmFsbCAuMTVzIGVhc2UtaW47LW8tdHJhbnNpdGlvbjphbGwgLjE1cyBlYXNlLWluO3RyYW5zaXRpb246YWxsIC4xNXMgZWFzZS1pbjstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApOy1vLXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCk7cG9zaXRpb246cmVsYXRpdmU7bGlzdC1zdHlsZTpub25lO3doaXRlLXNwYWNlOm5vd3JhcH0uY2Fyb3VzZWwgLnRodW1iey13ZWJraXQtdHJhbnNpdGlvbjpib3JkZXIgLjE1cyBlYXNlLWluOy1tb3otdHJhbnNpdGlvbjpib3JkZXIgLjE1cyBlYXNlLWluOy1tcy10cmFuc2l0aW9uOmJvcmRlciAuMTVzIGVhc2UtaW47LW8tdHJhbnNpdGlvbjpib3JkZXIgLjE1cyBlYXNlLWluO3RyYW5zaXRpb246Ym9yZGVyIC4xNXMgZWFzZS1pbjtkaXNwbGF5OmlubGluZS1ibG9jazttYXJnaW4tcmlnaHQ6NnB4O3doaXRlLXNwYWNlOm5vd3JhcDtvdmVyZmxvdzpoaWRkZW47Ym9yZGVyOjNweCBzb2xpZCAjZmZmO3BhZGRpbmc6MnB4fS5jYXJvdXNlbCAudGh1bWI6Zm9jdXN7Ym9yZGVyOjNweCBzb2xpZCAjY2NjO291dGxpbmU6bm9uZX0uY2Fyb3VzZWwgLnRodW1iLnNlbGVjdGVkLC5jYXJvdXNlbCAudGh1bWI6aG92ZXJ7Ym9yZGVyOjNweCBzb2xpZCAjMzMzfS5jYXJvdXNlbCAudGh1bWIgaW1ne3ZlcnRpY2FsLWFsaWduOnRvcH0uY2Fyb3VzZWwuY2Fyb3VzZWwtc2xpZGVye3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbjowO292ZXJmbG93OmhpZGRlbn0uY2Fyb3VzZWwuY2Fyb3VzZWwtc2xpZGVyIC5jb250cm9sLWFycm93e3RvcDowO2NvbG9yOiNmZmY7Zm9udC1zaXplOjI2cHg7Ym90dG9tOjA7bWFyZ2luLXRvcDowO3BhZGRpbmc6NXB4fS5jYXJvdXNlbC5jYXJvdXNlbC1zbGlkZXIgLmNvbnRyb2wtYXJyb3c6aG92ZXJ7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDAuMil9LmNhcm91c2VsIC5zbGlkZXItd3JhcHBlcntvdmVyZmxvdzpoaWRkZW47bWFyZ2luOmF1dG87d2lkdGg6MTAwJTstd2Via2l0LXRyYW5zaXRpb246aGVpZ2h0IC4xNXMgZWFzZS1pbjstbW96LXRyYW5zaXRpb246aGVpZ2h0IC4xNXMgZWFzZS1pbjstbXMtdHJhbnNpdGlvbjpoZWlnaHQgLjE1cyBlYXNlLWluOy1vLXRyYW5zaXRpb246aGVpZ2h0IC4xNXMgZWFzZS1pbjt0cmFuc2l0aW9uOmhlaWdodCAuMTVzIGVhc2UtaW59LmNhcm91c2VsIC5zbGlkZXItd3JhcHBlci5heGlzLWhvcml6b250YWwgLnNsaWRlcnstbXMtYm94LW9yaWVudDpob3Jpem9udGFsO2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbW96LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LW1vei1mbGV4O2Rpc3BsYXk6LXdlYmtpdC1mbGV4O2Rpc3BsYXk6ZmxleH0uY2Fyb3VzZWwgLnNsaWRlci13cmFwcGVyLmF4aXMtaG9yaXpvbnRhbCAuc2xpZGVyIC5zbGlkZXtmbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1mbG93OmNvbHVtbn0uY2Fyb3VzZWwgLnNsaWRlci13cmFwcGVyLmF4aXMtdmVydGljYWx7LW1zLWJveC1vcmllbnQ6aG9yaXpvbnRhbDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1vei1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi1tb3otZmxleDtkaXNwbGF5Oi13ZWJraXQtZmxleDtkaXNwbGF5OmZsZXh9LmNhcm91c2VsIC5zbGlkZXItd3JhcHBlci5heGlzLXZlcnRpY2FsIC5zbGlkZXJ7LXdlYmtpdC1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5jYXJvdXNlbCAuc2xpZGVye21hcmdpbjowO3BhZGRpbmc6MDtwb3NpdGlvbjpyZWxhdGl2ZTtsaXN0LXN0eWxlOm5vbmU7d2lkdGg6MTAwJX0uY2Fyb3VzZWwgLnNsaWRlci5hbmltYXRlZHstd2Via2l0LXRyYW5zaXRpb246YWxsIC4zNXMgZWFzZS1pbi1vdXQ7LW1vei10cmFuc2l0aW9uOmFsbCAuMzVzIGVhc2UtaW4tb3V0Oy1tcy10cmFuc2l0aW9uOmFsbCAuMzVzIGVhc2UtaW4tb3V0Oy1vLXRyYW5zaXRpb246YWxsIC4zNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjphbGwgLjM1cyBlYXNlLWluLW91dH0uY2Fyb3VzZWwgLnNsaWRle21pbi13aWR0aDoxMDAlO21hcmdpbjowO3Bvc2l0aW9uOnJlbGF0aXZlO3RleHQtYWxpZ246Y2VudGVyfS5jYXJvdXNlbCAuc2xpZGUgaW1ne3dpZHRoOjEwMCU7dmVydGljYWwtYWxpZ246dG9wO2JvcmRlcjowfS5jYXJvdXNlbCAuc2xpZGUgaWZyYW1le2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOmNhbGMoMTAwJSAtIDgwcHgpO21hcmdpbjowIDQwcHggNDBweDtib3JkZXI6MH0uY2Fyb3VzZWwgLnNsaWRlIC5sZWdlbmR7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAuNXMgZWFzZS1pbi1vdXQ7LW1vei10cmFuc2l0aW9uOmFsbCAuNXMgZWFzZS1pbi1vdXQ7LW1zLXRyYW5zaXRpb246YWxsIC41cyBlYXNlLWluLW91dDstby10cmFuc2l0aW9uOmFsbCAuNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjphbGwgLjVzIGVhc2UtaW4tb3V0O3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTo0MHB4O2xlZnQ6NTAlO21hcmdpbi1sZWZ0Oi00NSU7d2lkdGg6OTAlO2JvcmRlci1yYWRpdXM6MTBweDtiYWNrZ3JvdW5kOiMwMDA7Y29sb3I6I2ZmZjtwYWRkaW5nOjEwcHg7Zm9udC1zaXplOjEycHg7dGV4dC1hbGlnbjpjZW50ZXI7b3BhY2l0eTowLjI1Oy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IC4zNXMgZWFzZS1pbi1vdXQ7LW1vei10cmFuc2l0aW9uOm9wYWNpdHkgLjM1cyBlYXNlLWluLW91dDstbXMtdHJhbnNpdGlvbjpvcGFjaXR5IC4zNXMgZWFzZS1pbi1vdXQ7LW8tdHJhbnNpdGlvbjpvcGFjaXR5IC4zNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjpvcGFjaXR5IC4zNXMgZWFzZS1pbi1vdXR9LmNhcm91c2VsIC5jb250cm9sLWRvdHN7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjA7bWFyZ2luOjEwcHggMDtwYWRkaW5nOjA7dGV4dC1hbGlnbjpjZW50ZXI7d2lkdGg6MTAwJTt6LWluZGV4OjF9QG1lZGlhIChtaW4td2lkdGg6IDk2MHB4KXsuY2Fyb3VzZWwgLmNvbnRyb2wtZG90c3tib3R0b206MH19LmNhcm91c2VsIC5jb250cm9sLWRvdHMgLmRvdHstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAuMjVzIGVhc2UtaW47LW1vei10cmFuc2l0aW9uOm9wYWNpdHkgLjI1cyBlYXNlLWluOy1tcy10cmFuc2l0aW9uOm9wYWNpdHkgLjI1cyBlYXNlLWluOy1vLXRyYW5zaXRpb246b3BhY2l0eSAuMjVzIGVhc2UtaW47dHJhbnNpdGlvbjpvcGFjaXR5IC4yNXMgZWFzZS1pbjtvcGFjaXR5Oi4zO2ZpbHRlcjphbHBoYShvcGFjaXR5PTMwKTtib3gtc2hhZG93OjFweCAxcHggMnB4IHJnYmEoMCwwLDAsMC45KTtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyLXJhZGl1czo1MCU7d2lkdGg6OHB4O2hlaWdodDo4cHg7Y3Vyc29yOnBvaW50ZXI7ZGlzcGxheTppbmxpbmUtYmxvY2s7bWFyZ2luOjAgOHB4fS5jYXJvdXNlbCAuY29udHJvbC1kb3RzIC5kb3Quc2VsZWN0ZWQsLmNhcm91c2VsIC5jb250cm9sLWRvdHMgLmRvdDpob3ZlcntvcGFjaXR5OjE7ZmlsdGVyOmFscGhhKG9wYWNpdHk9MTAwKX0uY2Fyb3VzZWwgLmNhcm91c2VsLXN0YXR1c3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtyaWdodDowO3BhZGRpbmc6NXB4O2ZvbnQtc2l6ZToxMHB4O3RleHQtc2hhZG93OjFweCAxcHggMXB4IHJnYmEoMCwwLDAsMC45KTtjb2xvcjojZmZmfS5jYXJvdXNlbDpob3ZlciAuc2xpZGUgLmxlZ2VuZHtvcGFjaXR5OjF9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwidmFyIGVzY2FwZSA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvdXJsL2VzY2FwZS5qc1wiKTtcbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiQGZvbnQtZmFjZXtmb250LWZhbWlseTpcXFwiS2xlaW5cXFwiO3NyYzp1cmwoXCIgKyBlc2NhcGUocmVxdWlyZShcIi4uL2Fzc2V0cy9mb250cy9rbGVpbi1yZWd1bGFyLnR0ZlwiKSkgKyBcIikgZm9ybWF0KFxcXCJ0cnVldHlwZVxcXCIpO2ZvbnQtc3R5bGU6bm9ybWFsfTpyb290e2ZvbnQtZmFtaWx5OlxcXCJLbGVpblxcXCI7Zm9udC1zaXplOjE2cHg7Y29sb3I6IzEyMTIxMn1ib2R5e2JhY2tncm91bmQtY29sb3I6I0ZBRkFGQTttYXJnaW46MH0jcm9vdHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O2FsaWduLWl0ZW1zOmNlbnRlcjttYXJnaW4tbGVmdDpjYWxjKDEwMHZ3IC0gMTAwJSl9I3Jvb3QgbmF2LCNyb290IHNlY3Rpb257bWF4LXdpZHRoOjEwMjRweH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5uYXZpZ2F0aW9ue3dpZHRoOjEwMCU7bWFyZ2luOjJyZW0gMnJlbSA0cmVtfS5uYXZpZ2F0aW9uIHVse2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kO2FsaWduLWl0ZW1zOmNlbnRlcn0ubmF2aWdhdGlvbiBsaStsaXtwYWRkaW5nLWxlZnQ6MnJlbX0ubmF2aWdhdGlvbiBhe2NvbG9yOiMxMjEyMTI7Zm9udC1zaXplOjEuMTVyZW19Lm5hdmlnYXRpb24gYTpob3ZlciwubmF2aWdhdGlvbiBhOmFjdGl2ZSwubmF2aWdhdGlvbiBhOmZvY3VzLC5uYXZpZ2F0aW9uIGEuYWN0aXZle2NvbG9yOiMxMjEyMTJ9Lm5hdmlnYXRpb24gYTo6YWZ0ZXJ7YmFja2dyb3VuZC1jb2xvcjojMTIxMjEyfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnByb2plY3QtZGlzcGxheXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2ZsZXgtd3JhcDp3cmFwfS5wcm9qZWN0LWRpc3BsYXkgaDF7ZmxleC1iYXNpczoxMDAlO3BhZGRpbmc6MCAwLjVyZW07Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI0NDQ0NDQ30ucHJvamVjdC1kaXNwbGF5IGF7Ym9yZGVyLXJhZGl1czoxcmVtO2JveC1zaGFkb3c6MHJlbSAwcmVtIDJyZW0gI0NDQ0NDQztvdmVyZmxvdzpoaWRkZW47cGFkZGluZzowO21hcmdpbjoxcmVtfS5wcm9qZWN0LWRpc3BsYXkgYTo6YWZ0ZXJ7Y29udGVudDpub25lfS5wcm9qZWN0LWRpc3BsYXkgYTpob3ZlciBmaWdjYXB0aW9uLC5wcm9qZWN0LWRpc3BsYXkgYTphY3RpdmUgZmlnY2FwdGlvbiwucHJvamVjdC1kaXNwbGF5IGE6Zm9jdXMgZmlnY2FwdGlvbnt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwJSl9LnByb2plY3QtZGlzcGxheSBmaWd1cmV7cG9zaXRpb246cmVsYXRpdmV9LnByb2plY3QtZGlzcGxheSBmaWd1cmUgaW1ne2Rpc3BsYXk6YmxvY2s7Ym9yZGVyLXJhZGl1czppbmhlcml0fS5wcm9qZWN0LWRpc3BsYXkgZmlndXJlIGZpZ2NhcHRpb257dHJhbnNpdGlvbjp0cmFuc2Zvcm0gMjUwbXMgZWFzZS1pbi1vdXQ7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLDAuODUpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwMCUpO2JvdHRvbTowO2xlZnQ6MDtyaWdodDowO3BhZGRpbmc6MS41cmVtfS5wcm9qZWN0LWRpc3BsYXkgZmlndXJlIGZpZ2NhcHRpb24gc3BhbntkaXNwbGF5OmJsb2NrO2NvbG9yOiNGQUZBRkE7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH0ucHJvamVjdC1kaXNwbGF5IGZpZ3VyZSBmaWdjYXB0aW9uIC50aXRsZXtmb250LXdlaWdodDpib2xkfS5wcm9qZWN0LWRpc3BsYXkgZmlndXJlIGZpZ2NhcHRpb24gLmRlc2NyaXB0aW9ue21hcmdpbi10b3A6MC41cmVtO2ZvbnQtc2l6ZTowLjhyZW19XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucHJvZmlsZXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO3dpZHRoOjEwMHZ3O2hlaWdodDoxMDB2aH0ucHJvZmlsZSBkaXZ7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn0ucHJvZmlsZSBpbWd7Ym9yZGVyLXJhZGl1czo1MCU7Ym94LXNoYWRvdzowIDAgMXJlbSAjQUFBQUFBfS5wcm9maWxlIGgxe2ZvbnQtc2l6ZToyLjI1cmVtO21hcmdpbjoycmVtIDAgMXJlbX0ucHJvZmlsZSAucG9ydGZvbGlvLWxpbmt7dHJhbnNpdGlvbjpjb2xvciAyNTBtcyBlYXNlLWluLW91dCxiYWNrZ3JvdW5kLWNvbG9yIDI1MG1zIGVhc2UtaW4tb3V0O2NvbG9yOiMxMjEyMTI7b3V0bGluZTpub25lO3BhZGRpbmc6MXJlbSA0cmVtO2JvcmRlcjoycHggc29saWQgIzEyMTIxMjttYXJnaW46M3JlbSAwfS5wcm9maWxlIC5wb3J0Zm9saW8tbGluazpob3ZlciwucHJvZmlsZSAucG9ydGZvbGlvLWxpbms6YWN0aXZlLC5wcm9maWxlIC5wb3J0Zm9saW8tbGluazpmb2N1c3tjb2xvcjojRkFGQUZBO2JhY2tncm91bmQtY29sb3I6IzEyMTIxMn0ucHJvZmlsZSAucG9ydGZvbGlvLWxpbms6OmFmdGVye2NvbnRlbnQ6bm9uZX0ucHJvZmlsZSBhe2ZvbnQtc2l6ZToxLjE1cmVtfS5wcm9maWxlIGErYXttYXJnaW4tbGVmdDo0cmVtfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnZpc3VhbHMgLmNhcm91c2Vse21hcmdpbi1ib3R0b206MnJlbX0udmlzdWFscyAuY2Fyb3VzZWwgLnNsaWRle2Rpc3BsYXk6ZmxleH0udmlzdWFscyAuY2Fyb3VzZWwgLnNsaWRlIC5sZWdlbmR7Zm9udC1zaXplOjFyZW07Y29sb3I6I0ZGRkZGRjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O29wYWNpdHk6MTtib3R0b206MXJlbX0udmlzdWFscyAuY2Fyb3VzZWwgLnNsaWRlIGF7cGFkZGluZzowfS52aXN1YWxzIC5jYXJvdXNlbCAuc2xpZGUgYTo6YWZ0ZXJ7Y29udGVudDpub25lfS52aXN1YWxzIC5wcm9qZWN0e21hcmdpbjowLjVyZW19LnZpc3VhbHMgLnByb2plY3QgZmlnY2FwdGlvbntiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O3BhZGRpbmc6MCAwIDFyZW19LnZpc3VhbHMgLnByb2plY3QgZmlnY2FwdGlvbiAudGl0bGV7dGV4dC1hbGlnbjpjZW50ZXI7Zm9udC13ZWlnaHQ6bm9ybWFsfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiYXtwb3NpdGlvbjpyZWxhdGl2ZTtjb2xvcjojMDA3MGNjO291dGxpbmU6bm9uZTtwYWRkaW5nOjByZW0gMC41cmVtfWE6aG92ZXIsYTphY3RpdmUsYTpmb2N1cyxhLmFjdGl2ZXt0cmFuc2l0aW9uOmNvbG9yIDI1MG1zIGVhc2UtaW4tb3V0O2NvbG9yOiMwMDg2ZjN9YTpob3Zlcjo6YWZ0ZXIsYTphY3RpdmU6OmFmdGVyLGE6Zm9jdXM6OmFmdGVyLGEuYWN0aXZlOjphZnRlcnt3aWR0aDoxMDAlO2xlZnQ6MCV9YTo6YWZ0ZXJ7dHJhbnNpdGlvbjp3aWR0aCAyNTBtcyBlYXNlLWluLW91dCxsZWZ0IDI1MG1zIGVhc2UtaW4tb3V0O2NvbnRlbnQ6XFxcIlxcXCI7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZC1jb2xvcjojMDA4NmYzO3dpZHRoOjA7aGVpZ2h0OjFweDtsZWZ0OjUwJTtib3R0b206MH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIip7Y29sb3I6aW5oZXJpdDtiYWNrZ3JvdW5kLWNvbG9yOmluaGVyaXQ7cGFkZGluZzowO2JvcmRlcjpub25lO21hcmdpbjowfXVsLG9se2xpc3Qtc3R5bGUtdHlwZTpub25lfWF7dGV4dC1kZWNvcmF0aW9uOm5vbmV9YnV0dG9ue2N1cnNvcjpwb2ludGVyO2NvbG9yOmluaGVyaXQ7YmFja2dyb3VuZC1jb2xvcjppbmhlcml0O2ZvbnQtZmFtaWx5OmluaGVyaXQ7Zm9udC1zaXplOmluaGVyaXR9aDEsaDJ7Zm9udC13ZWlnaHQ6bm9ybWFsfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXNjYXBlKHVybCkge1xuICAgIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdXJsXG4gICAgfVxuICAgIC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuICAgIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgICAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICAgIH1cbiAgICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gICAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgICBpZiAoL1tcIicoKSBcXHRcXG5dLy50ZXN0KHVybCkpIHtcbiAgICAgICAgcmV0dXJuICdcIicgKyB1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKSArICdcIidcbiAgICB9XG5cbiAgICByZXR1cm4gdXJsXG59XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNS4yXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksYmE9cmVxdWlyZShcInNjaGVkdWxlXCIpO2Z1bmN0aW9uIGNhKGEsYixjLGQsZSxmLGcsaCl7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGs9W2MsZCxlLGYsZyxoXSxsPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4ga1tsKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24gdChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGM9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGQ9MDtkPGI7ZCsrKWMrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2NhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsYyl9YWE/dm9pZCAwOnQoXCIyMjdcIik7ZnVuY3Rpb24gZGEoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19XG52YXIgZWE9ITEsZmE9bnVsbCxoYT0hMSxpYT1udWxsLGphPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2VhPSEwO2ZhPWF9fTtmdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsayl7ZWE9ITE7ZmE9bnVsbDtkYS5hcHBseShqYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGxhKGEsYixjLGQsZSxmLGcsaCxrKXtrYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZWEpe2lmKGVhKXt2YXIgbD1mYTtlYT0hMTtmYT1udWxsfWVsc2UgdChcIjE5OFwiKSxsPXZvaWQgMDtoYXx8KGhhPSEwLGlhPWwpfX12YXIgbWE9bnVsbCxuYT17fTtcbmZ1bmN0aW9uIG9hKCl7aWYobWEpZm9yKHZhciBhIGluIG5hKXt2YXIgYj1uYVthXSxjPW1hLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6dChcIjk2XCIsYSk7aWYoIXBhW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOnQoXCI5N1wiLGEpO3BhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7cWEuaGFzT3duUHJvcGVydHkoaCk/dChcIjk5XCIsaCk6dm9pZCAwO3FhW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnJhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyhyYShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2U/dm9pZCAwOnQoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiByYShhLGIsYyl7c2FbYV0/dChcIjEwMFwiLGEpOnZvaWQgMDtzYVthXT1iO3RhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIHBhPVtdLHFhPXt9LHNhPXt9LHRhPXt9LHVhPW51bGwsdmE9bnVsbCx3YT1udWxsO2Z1bmN0aW9uIHhhKGEsYixjLGQpe2I9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9d2EoZCk7bGEoYixjLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB5YShhLGIpe251bGw9PWI/dChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19XG5mdW5jdGlvbiB6YShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgQWE9bnVsbDtmdW5jdGlvbiBCYShhLGIpe2lmKGEpe3ZhciBjPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGQ9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShjKSlmb3IodmFyIGU9MDtlPGMubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2UrKyl4YShhLGIsY1tlXSxkW2VdKTtlbHNlIGMmJnhhKGEsYixjLGQpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIENhKGEpe3JldHVybiBCYShhLCEwKX1mdW5jdGlvbiBEYShhKXtyZXR1cm4gQmEoYSwhMSl9XG52YXIgRWE9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6ZnVuY3Rpb24oYSl7bWE/dChcIjEwMVwiKTp2b2lkIDA7bWE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7b2EoKX0saW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOmZ1bmN0aW9uKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO25hLmhhc093blByb3BlcnR5KGMpJiZuYVtjXT09PWR8fChuYVtjXT90KFwiMTAyXCIsYyk6dm9pZCAwLG5hW2NdPWQsYj0hMCl9YiYmb2EoKX19O1xuZnVuY3Rpb24gRmEoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD11YShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz90KFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9ZnVuY3Rpb24gR2EoYSxiKXtudWxsIT09YSYmKEFhPXlhKEFhLGEpKTthPUFhO0FhPW51bGw7aWYoYSYmKGI/emEoYSxDYSk6emEoYSxEYSksQWE/dChcIjk1XCIpOnZvaWQgMCxoYSkpdGhyb3cgYj1pYSxoYT0hMSxpYT1udWxsLGI7fXZhciBIYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxJYT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0hhLEphPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrSGE7ZnVuY3Rpb24gS2EoYSl7aWYoYVtJYV0pcmV0dXJuIGFbSWFdO2Zvcig7IWFbSWFdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbSWFdO3JldHVybiA3PT09YS50YWd8fDg9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gTGEoYSl7YT1hW0lhXTtyZXR1cm4hYXx8NyE9PWEudGFnJiY4IT09YS50YWc/bnVsbDphfVxuZnVuY3Rpb24gTWEoYSl7aWYoNz09PWEudGFnfHw4PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3QoXCIzM1wiKX1mdW5jdGlvbiBOYShhKXtyZXR1cm4gYVtKYV18fG51bGx9ZnVuY3Rpb24gT2EoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY3IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBQYShhLGIsYyl7aWYoYj1GYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPXlhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXlhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfVxuZnVuY3Rpb24gUWEoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1PYShiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspUGEoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylQYShjW2JdLFwiYnViYmxlZFwiLGEpfX1mdW5jdGlvbiBSYShhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1GYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eWEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eWEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFRhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmUmEoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfVxuZnVuY3Rpb24gVWEoYSl7emEoYSxRYSl9dmFyIFZhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuZG9jdW1lbnR8fCF3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7ZnVuY3Rpb24gV2EoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgWWE9e2FuaW1hdGlvbmVuZDpXYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpXYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OldhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOldhKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sWmE9e30sJGE9e307XG5WYSYmKCRhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFlhLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFlhLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFlhLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFlhLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gYWIoYSl7aWYoWmFbYV0pcmV0dXJuIFphW2FdO2lmKCFZYVthXSlyZXR1cm4gYTt2YXIgYj1ZYVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiAkYSlyZXR1cm4gWmFbYV09YltjXTtyZXR1cm4gYX1cbnZhciBiYj1hYihcImFuaW1hdGlvbmVuZFwiKSxjYj1hYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxkYj1hYihcImFuaW1hdGlvbnN0YXJ0XCIpLGViPWFiKFwidHJhbnNpdGlvbmVuZFwiKSxmYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksZ2I9bnVsbCxoYj1udWxsLGliPW51bGw7XG5mdW5jdGlvbiBqYigpe2lmKGliKXJldHVybiBpYjt2YXIgYSxiPWhiLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGdiP2diLnZhbHVlOmdiLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIGliPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24ga2IoKXtyZXR1cm4hMH1mdW5jdGlvbiBsYigpe3JldHVybiExfVxuZnVuY3Rpb24geihhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/a2I6bGI7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1sYjtyZXR1cm4gdGhpc31cbm4oei5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1rYil9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1rYil9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1rYn0saXNQZXJzaXN0ZW50OmxiLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWxiO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7ei5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG56LmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO21iKGMpO3JldHVybiBjfTttYih6KTtmdW5jdGlvbiBuYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBvYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6dChcIjI3OVwiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9XG5mdW5jdGlvbiBtYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1uYjthLnJlbGVhc2U9b2J9dmFyIHBiPXouZXh0ZW5kKHtkYXRhOm51bGx9KSxxYj16LmV4dGVuZCh7ZGF0YTpudWxsfSkscmI9WzksMTMsMjcsMzJdLHNiPVZhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyx0Yj1udWxsO1ZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJih0Yj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHViPVZhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhdGIsdmI9VmEmJighc2J8fHRiJiY4PHRiJiYxMT49dGIpLHdiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLHhiPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHliPSExO1xuZnVuY3Rpb24gemIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1yYi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIEFiKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIEJiPSExO2Z1bmN0aW9uIENiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBBYihiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7eWI9ITA7cmV0dXJuIHdiO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PXdiJiZ5Yj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBEYihhLGIpe2lmKEJiKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFzYiYmemIoYSxiKT8oYT1qYigpLGliPWhiPWdiPW51bGwsQmI9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHZiJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBFYj17ZXZlbnRUeXBlczp4YixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYoc2IpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6ZT14Yi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6ZT14Yi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmU9eGIuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIEJiP3piKGEsYykmJihlPXhiLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9eGIuY29tcG9zaXRpb25TdGFydCk7ZT8odmImJlwia29cIiE9PWMubG9jYWxlJiYoQmJ8fGUhPT14Yi5jb21wb3NpdGlvblN0YXJ0P2U9PT14Yi5jb21wb3NpdGlvbkVuZCYmQmImJihmPWpiKCkpOihnYj1kLGhiPVwidmFsdWVcImluIGdiP2diLnZhbHVlOmdiLnRleHRDb250ZW50LEJiPVxuITApKSxlPXBiLmdldFBvb2xlZChlLGIsYyxkKSxmP2UuZGF0YT1mOihmPUFiKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxVYShlKSxmPWUpOmY9bnVsbDsoYT11Yj9DYihhLGMpOkRiKGEsYykpPyhiPXFiLmdldFBvb2xlZCh4Yi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsVWEoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sRmI9bnVsbCxHYj1udWxsLEhiPW51bGw7ZnVuY3Rpb24gSWIoYSl7aWYoYT12YShhKSl7XCJmdW5jdGlvblwiIT09dHlwZW9mIEZiP3QoXCIyODBcIik6dm9pZCAwO3ZhciBiPXVhKGEuc3RhdGVOb2RlKTtGYihhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIEpiKGEpe0diP0hiP0hiLnB1c2goYSk6SGI9W2FdOkdiPWF9ZnVuY3Rpb24gS2IoKXtpZihHYil7dmFyIGE9R2IsYj1IYjtIYj1HYj1udWxsO0liKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylJYihiW2FdKX19XG5mdW5jdGlvbiBMYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIE1iKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIE5iKCl7fXZhciBPYj0hMTtmdW5jdGlvbiBQYihhLGIpe2lmKE9iKXJldHVybiBhKGIpO09iPSEwO3RyeXtyZXR1cm4gTGIoYSxiKX1maW5hbGx5e2lmKE9iPSExLG51bGwhPT1HYnx8bnVsbCE9PUhiKU5iKCksS2IoKX19dmFyIFFiPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIFJiKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhUWJbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxuZnVuY3Rpb24gU2IoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIFRiKGEpe2lmKCFWYSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBVYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVmIoYSl7dmFyIGI9VWIoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFdiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1WYihhKSl9ZnVuY3Rpb24gWGIoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVViKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9XG52YXIgWWI9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsWmI9L14oLiopW1xcXFxcXC9dLyxDPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsJGI9Qz9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxhYz1DP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsYmM9Qz9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsY2M9Qz9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZGM9Qz9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsZWM9Qz9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksZmM9Qz9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxnYz1DP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLGhjPUM/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGljPUM/U3ltYm9sLmZvcihcInJlYWN0LnBsYWNlaG9sZGVyXCIpOlxuNjAxMTMsamM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGtjKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1qYyYmYVtqY118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGxjKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgZ2M6cmV0dXJuXCJBc3luY01vZGVcIjtjYXNlIGJjOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIGFjOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBkYzpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBjYzpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIGljOnJldHVyblwiUGxhY2Vob2xkZXJcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpe3N3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGZjOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgZWM6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBoYzp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtyZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlxuXCJGb3J3YXJkUmVmXCIpfWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnRoZW4mJihhPTE9PT1hLl9yZWFjdFN0YXR1cz9hLl9yZWFjdFJlc3VsdDpudWxsKSlyZXR1cm4gbGMoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gbWMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSA0OmNhc2UgMDpjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDc6Y2FzZSAxMDp2YXIgYz1hLl9kZWJ1Z093bmVyLGQ9YS5fZGVidWdTb3VyY2UsZT1sYyhhLnR5cGUpO3ZhciBmPW51bGw7YyYmKGY9bGMoYy50eXBlKSk7Yz1lO2U9XCJcIjtkP2U9XCIgKGF0IFwiK2QuZmlsZU5hbWUucmVwbGFjZShaYixcIlwiKStcIjpcIitkLmxpbmVOdW1iZXIrXCIpXCI6ZiYmKGU9XCIgKGNyZWF0ZWQgYnkgXCIrZitcIilcIik7Zj1cIlxcbiAgICBpbiBcIisoY3x8XCJVbmtub3duXCIpK2U7YnJlYWsgYTtkZWZhdWx0OmY9XCJcIn1iKz1mO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIgbmM9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLHBjPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkscWM9e30scmM9e307XG5mdW5jdGlvbiBzYyhhKXtpZihwYy5jYWxsKHJjLGEpKXJldHVybiEwO2lmKHBjLmNhbGwocWMsYSkpcmV0dXJuITE7aWYobmMudGVzdChhKSlyZXR1cm4gcmNbYV09ITA7cWNbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gdGMoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiB1YyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHx0YyhhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEQoYSxiLGMsZCxlKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1ifXZhciBFPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtFW2FdPW5ldyBEKGEsMCwhMSxhLG51bGwpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0VbYl09bmV3IEQoYiwxLCExLGFbMV0sbnVsbCl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtFW2FdPW5ldyBEKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtFW2FdPW5ldyBEKGEsMiwhMSxhLG51bGwpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtFW2FdPW5ldyBEKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RVthXT1uZXcgRChhLDMsITAsYSxudWxsKX0pO1xuW1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtFW2FdPW5ldyBEKGEsNCwhMSxhLG51bGwpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0VbYV09bmV3IEQoYSw2LCExLGEsbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0VbYV09bmV3IEQoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciB2Yz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHdjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHZjLFxud2MpO0VbYl09bmV3IEQoYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHZjLHdjKTtFW2JdPW5ldyBEKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHZjLHdjKTtFW2JdPW5ldyBEKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7RS50YWJJbmRleD1uZXcgRChcInRhYkluZGV4XCIsMSwhMSxcInRhYmluZGV4XCIsbnVsbCk7XG5mdW5jdGlvbiB4YyhhLGIsYyxkKXt2YXIgZT1FLmhhc093blByb3BlcnR5KGIpP0VbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fCh1YyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/c2MoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIHljKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiB6YyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiBCYyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz15YyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIENjKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmeGMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIERjKGEsYil7Q2MoYSxiKTt2YXIgYz15YyhiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9FYyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZFYyhhLGIudHlwZSx5YyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEZjKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIEVjKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgR2M9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gSGMoYSxiLGMpe2E9ei5nZXRQb29sZWQoR2MuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtKYihjKTtVYShhKTtyZXR1cm4gYX12YXIgSWM9bnVsbCxKYz1udWxsO2Z1bmN0aW9uIEtjKGEpe0dhKGEsITEpfVxuZnVuY3Rpb24gTGMoYSl7dmFyIGI9TWEoYSk7aWYoWGIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gTWMoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgTmM9ITE7VmEmJihOYz1UYihcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBPYygpe0ljJiYoSWMuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsUGMpLEpjPUljPW51bGwpfWZ1bmN0aW9uIFBjKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZMYyhKYykmJihhPUhjKEpjLGEsU2IoYSkpLFBiKEtjLGEpKX1mdW5jdGlvbiBRYyhhLGIsYyl7XCJmb2N1c1wiPT09YT8oT2MoKSxJYz1iLEpjPWMsSWMuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsUGMpKTpcImJsdXJcIj09PWEmJk9jKCl9ZnVuY3Rpb24gUmMoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gTGMoSmMpfVxuZnVuY3Rpb24gU2MoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBMYyhiKX1mdW5jdGlvbiBUYyhhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBMYyhiKX1cbnZhciBVYz17ZXZlbnRUeXBlczpHYyxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOk5jLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9NYShiKTp3aW5kb3csZj12b2lkIDAsZz12b2lkIDAsaD1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzZWxlY3RcIj09PWh8fFwiaW5wdXRcIj09PWgmJlwiZmlsZVwiPT09ZS50eXBlP2Y9TWM6UmIoZSk/TmM/Zj1UYzooZj1SYyxnPVFjKTooaD1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09aC50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZj1TYyk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gSGMoZixjLGQpO2cmJmcoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZFYyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxWYz16LmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksV2M9e0FsdDpcImFsdEtleVwiLFxuQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gWGMoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1XY1thXSk/ISFiW2FdOiExfWZ1bmN0aW9uIFljKCl7cmV0dXJuIFhjfVxudmFyIFpjPTAsJGM9MCxhZD0hMSxiZD0hMSxjZD1WYy5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6WWMsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9WmM7WmM9YS5zY3JlZW5YO3JldHVybiBhZD9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1iOjA6KGFkPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO1xudmFyIGI9JGM7JGM9YS5zY3JlZW5ZO3JldHVybiBiZD9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KGJkPSEwLDApfX0pLGRkPWNkLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSxlZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLFxuZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sZmQ9e2V2ZW50VHlwZXM6ZWQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxmPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihlJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWYmJiFlKXJldHVybiBudWxsO2U9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7Zj8oZj1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/S2EoYik6bnVsbCk6Zj1udWxsO2lmKGY9PT1iKXJldHVybiBudWxsO3ZhciBnPXZvaWQgMCxoPXZvaWQgMCxrPXZvaWQgMCxsPXZvaWQgMDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09YSlnPWNkLGg9ZWQubW91c2VMZWF2ZSxrPWVkLm1vdXNlRW50ZXIsbD1cIm1vdXNlXCI7XG5lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlnPWRkLGg9ZWQucG9pbnRlckxlYXZlLGs9ZWQucG9pbnRlckVudGVyLGw9XCJwb2ludGVyXCI7dmFyIG09bnVsbD09Zj9lOk1hKGYpO2U9bnVsbD09Yj9lOk1hKGIpO2E9Zy5nZXRQb29sZWQoaCxmLGMsZCk7YS50eXBlPWwrXCJsZWF2ZVwiO2EudGFyZ2V0PW07YS5yZWxhdGVkVGFyZ2V0PWU7Yz1nLmdldFBvb2xlZChrLGIsYyxkKTtjLnR5cGU9bCtcImVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9bTtkPWI7aWYoZiYmZClhOntiPWY7ZT1kO2w9MDtmb3IoZz1iO2c7Zz1PYShnKSlsKys7Zz0wO2ZvcihrPWU7aztrPU9hKGspKWcrKztmb3IoOzA8bC1nOyliPU9hKGIpLGwtLTtmb3IoOzA8Zy1sOyllPU9hKGUpLGctLTtmb3IoO2wtLTspe2lmKGI9PT1lfHxiPT09ZS5hbHRlcm5hdGUpYnJlYWsgYTtiPU9hKGIpO2U9T2EoZSl9Yj1udWxsfWVsc2UgYj1udWxsO2U9Yjtmb3IoYj1bXTtmJiZmIT09ZTspe2w9XG5mLmFsdGVybmF0ZTtpZihudWxsIT09bCYmbD09PWUpYnJlYWs7Yi5wdXNoKGYpO2Y9T2EoZil9Zm9yKGY9W107ZCYmZCE9PWU7KXtsPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1sJiZsPT09ZSlicmVhaztmLnB1c2goZCk7ZD1PYShkKX1mb3IoZD0wO2Q8Yi5sZW5ndGg7ZCsrKVJhKGJbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGQ9Zi5sZW5ndGg7MDxkLS07KVJhKGZbZF0sXCJjYXB0dXJlZFwiLGMpO3JldHVyblthLGNdfX0sZ2Q9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiBoZChhLGIpe3JldHVybiBhPT09Yj8wIT09YXx8MCE9PWJ8fDEvYT09PTEvYjphIT09YSYmYiE9PWJ9XG5mdW5jdGlvbiBpZChhLGIpe2lmKGhkKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighZ2QuY2FsbChiLGNbZF0pfHwhaGQoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBqZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7Yi5yZXR1cm47KWlmKGI9Yi5yZXR1cm4sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gNT09PWIudGFnPzI6M31mdW5jdGlvbiBrZChhKXsyIT09amQoYSk/dChcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBsZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1qZChhKSwzPT09Yj90KFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXJldHVybiBrZChlKSxhO2lmKGc9PT1kKXJldHVybiBrZChlKSxiO2c9Zy5zaWJsaW5nfXQoXCIxODhcIil9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9Zz9cbnZvaWQgMDp0KFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/dChcIjE5MFwiKTp2b2lkIDB9NSE9PWMudGFnP3QoXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gbWQoYSl7YT1sZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig3PT09Yi50YWd8fDg9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbnZhciBuZD16LmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksb2Q9ei5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxwZD1WYy5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIHFkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHJkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxzZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sdGQ9VmMuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXJkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPXFkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9zZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6WWMsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/cWQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/cWQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSx1ZD1jZC5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksdmQ9VmMuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6WWN9KSx3ZD16LmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx4ZD1jZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHlkPVtbXCJhYm9ydFwiLFwiYWJvcnRcIl0sW2JiLFwiYW5pbWF0aW9uRW5kXCJdLFtjYixcImFuaW1hdGlvbkl0ZXJhdGlvblwiXSxbZGIsXCJhbmltYXRpb25TdGFydFwiXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCJdLFtcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiXSxbXCJkcmFnXCIsXCJkcmFnXCJdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCJdLFtcImRyYWdleGl0XCIsXCJkcmFnRXhpdFwiXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCJdLFtcImVtcHRpZWRcIixcImVtcHRpZWRcIl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIl0sXG5bXCJlbmRlZFwiLFwiZW5kZWRcIl0sW1wiZXJyb3JcIixcImVycm9yXCJdLFtcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJsb2FkXCIsXCJsb2FkXCJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIl0sW1wibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCJdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCJdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiXSxbXCJtb3VzZW92ZXJcIixcIm1vdXNlT3ZlclwiXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCJdLFtcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVyTW92ZVwiXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCJdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiXSxbXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIl0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiXSxbXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCJdLFxuW1wic3VzcGVuZFwiLFwic3VzcGVuZFwiXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCJdLFtcInRvZ2dsZVwiLFwidG9nZ2xlXCJdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCJdLFtlYixcInRyYW5zaXRpb25FbmRcIl0sW1wid2FpdGluZ1wiLFwid2FpdGluZ1wiXSxbXCJ3aGVlbFwiLFwid2hlZWxcIl1dLHpkPXt9LEFkPXt9O2Z1bmN0aW9uIEJkKGEsYil7dmFyIGM9YVswXTthPWFbMV07dmFyIGQ9XCJvblwiKyhhWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSk7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07emRbYV09YjtBZFtjXT1ifVxuW1tcImJsdXJcIixcImJsdXJcIl0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIl0sW1wiY2xpY2tcIixcImNsaWNrXCJdLFtcImNsb3NlXCIsXCJjbG9zZVwiXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIl0sW1wiY29weVwiLFwiY29weVwiXSxbXCJjdXRcIixcImN1dFwiXSxbXCJhdXhjbGlja1wiLFwiYXV4Q2xpY2tcIl0sW1wiZGJsY2xpY2tcIixcImRvdWJsZUNsaWNrXCJdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIl0sW1wiZHJhZ3N0YXJ0XCIsXCJkcmFnU3RhcnRcIl0sW1wiZHJvcFwiLFwiZHJvcFwiXSxbXCJmb2N1c1wiLFwiZm9jdXNcIl0sW1wiaW5wdXRcIixcImlucHV0XCJdLFtcImludmFsaWRcIixcImludmFsaWRcIl0sW1wia2V5ZG93blwiLFwia2V5RG93blwiXSxbXCJrZXlwcmVzc1wiLFwia2V5UHJlc3NcIl0sW1wia2V5dXBcIixcImtleVVwXCJdLFtcIm1vdXNlZG93blwiLFwibW91c2VEb3duXCJdLFtcIm1vdXNldXBcIixcIm1vdXNlVXBcIl0sW1wicGFzdGVcIixcInBhc3RlXCJdLFtcInBhdXNlXCIsXCJwYXVzZVwiXSxbXCJwbGF5XCIsXCJwbGF5XCJdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIl0sXG5bXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIl0sW1wicG9pbnRlcnVwXCIsXCJwb2ludGVyVXBcIl0sW1wicmF0ZWNoYW5nZVwiLFwicmF0ZUNoYW5nZVwiXSxbXCJyZXNldFwiLFwicmVzZXRcIl0sW1wic2Vla2VkXCIsXCJzZWVrZWRcIl0sW1wic3VibWl0XCIsXCJzdWJtaXRcIl0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCJdLFtcInRvdWNoZW5kXCIsXCJ0b3VjaEVuZFwiXSxbXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaFN0YXJ0XCJdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0JkKGEsITApfSk7eWQuZm9yRWFjaChmdW5jdGlvbihhKXtCZChhLCExKX0pO1xudmFyIENkPXtldmVudFR5cGVzOnpkLGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTpmdW5jdGlvbihhKXthPUFkW2FdO3JldHVybiB2b2lkIDAhPT1hJiYhMD09PWEuaXNJbnRlcmFjdGl2ZX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1BZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PXFkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT10ZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9cGQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1jZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxudWQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT12ZDticmVhaztjYXNlIGJiOmNhc2UgY2I6Y2FzZSBkYjphPW5kO2JyZWFrO2Nhc2UgZWI6YT13ZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1WYzticmVhaztjYXNlIFwid2hlZWxcIjphPXhkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9b2Q7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1kZDticmVhaztkZWZhdWx0OmE9en1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1VhKGIpO3JldHVybiBifX0sRGQ9Q2QuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFxuRWQ9W107ZnVuY3Rpb24gRmQoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZDtmb3IoZD1jO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9NSE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighZClicmVhazthLmFuY2VzdG9ycy5wdXNoKGMpO2M9S2EoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9U2IoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTtmb3IodmFyIGY9YS5uYXRpdmVFdmVudCxnPW51bGwsaD0wO2g8cGEubGVuZ3RoO2grKyl7dmFyIGs9cGFbaF07ayYmKGs9ay5leHRyYWN0RXZlbnRzKGQsYixmLGUpKSYmKGc9eWEoZyxrKSl9R2EoZywhMSl9fXZhciBHZD0hMDtcbmZ1bmN0aW9uIEYoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oRGQoYSk/SGQ6SWQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCExKX1mdW5jdGlvbiBKZChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPShEZChhKT9IZDpJZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITApfWZ1bmN0aW9uIEhkKGEsYil7TWIoSWQsYSxiKX1cbmZ1bmN0aW9uIElkKGEsYil7aWYoR2Qpe3ZhciBjPVNiKGIpO2M9S2EoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fDI9PT1qZChjKXx8KGM9bnVsbCk7aWYoRWQubGVuZ3RoKXt2YXIgZD1FZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtQYihGZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPkVkLmxlbmd0aCYmRWQucHVzaChhKX19fXZhciBLZD17fSxMZD0wLE1kPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtcbmZ1bmN0aW9uIE5kKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLE1kKXx8KGFbTWRdPUxkKyssS2RbYVtNZF1dPXt9KTtyZXR1cm4gS2RbYVtNZF1dfWZ1bmN0aW9uIE9kKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiBRZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBSZChhLGIpe3ZhciBjPVFkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPVFkKGMpfX1mdW5jdGlvbiBTZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP1NkKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIFRkKCl7Zm9yKHZhciBhPXdpbmRvdyxiPU9kKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7YT1iLmNvbnRlbnREb2N1bWVudC5kZWZhdWx0Vmlld31jYXRjaChjKXticmVha31iPU9kKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIFVkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgVmQ9VmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxXZD17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sWGQ9bnVsbCxZZD1udWxsLFpkPW51bGwsJGQ9ITE7XG5mdW5jdGlvbiBhZShhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKCRkfHxudWxsPT1YZHx8WGQhPT1PZChjKSlyZXR1cm4gbnVsbDtjPVhkO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJlVkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIFpkJiZpZChaZCxjKT9udWxsOihaZD1jLGE9ei5nZXRQb29sZWQoV2Quc2VsZWN0LFlkLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9WGQsVWEoYSksYSl9XG52YXIgYmU9e2V2ZW50VHlwZXM6V2QsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9TmQoZSk7Zj10YS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKyl7dmFyIGg9ZltnXTtpZighZS5oYXNPd25Qcm9wZXJ0eShoKXx8IWVbaF0pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP01hKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoUmIoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpWGQ9ZSxZZD1iLFpkPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpaZD1ZZD1YZD1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjokZD0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuICRkPSExLGFlKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFZkKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gYWUoYyxkKX1yZXR1cm4gbnVsbH19O0VhLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7dWE9TmE7dmE9TGE7d2E9TWE7RWEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpDZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46ZmQsQ2hhbmdlRXZlbnRQbHVnaW46VWMsU2VsZWN0RXZlbnRQbHVnaW46YmUsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpFYn0pO2Z1bmN0aW9uIGNlKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifVxuZnVuY3Rpb24gZGUoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1jZShiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9ZnVuY3Rpb24gZWUoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK3ljKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBmZShhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBnZShhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP3QoXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDp0KFwiOTNcIiksYj1iWzBdKSxjPWIpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTp5YyhjKX19XG5mdW5jdGlvbiBoZShhLGIpe3ZhciBjPXljKGIudmFsdWUpLGQ9eWMoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBpZShhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgamU9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24ga2UoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBsZShhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/a2UoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbWU9dm9pZCAwLG5lPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWplLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle21lPW1lfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO21lLmlubmVySFRNTD1cIjxzdmc+XCIrYitcIjwvc3ZnPlwiO2ZvcihiPW1lLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIG9lKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcGU9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scWU9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHBlKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3FlLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cGVbYl09cGVbYV19KX0pO1xuZnVuY3Rpb24gcmUoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpO3ZhciBlPWM7dmFyIGY9YltjXTtlPW51bGw9PWZ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGZ8fFwiXCI9PT1mP1wiXCI6ZHx8XCJudW1iZXJcIiE9PXR5cGVvZiBmfHwwPT09Znx8cGUuaGFzT3duUHJvcGVydHkoZSkmJnBlW2VdPyhcIlwiK2YpLnRyaW0oKTpmK1wicHhcIjtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHNlPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB0ZShhLGIpe2ImJihzZVthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dChcIjEzN1wiLGEsXCJcIik6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj90KFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOnQoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP3QoXCI2MlwiLFwiXCIpOnZvaWQgMCl9XG5mdW5jdGlvbiB1ZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19XG5mdW5jdGlvbiB2ZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1OZChhKTtiPXRhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhc093blByb3BlcnR5KGUpfHwhY1tlXSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpKZChcInNjcm9sbFwiLGEpO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6SmQoXCJmb2N1c1wiLGEpO0pkKFwiYmx1clwiLGEpO2MuYmx1cj0hMDtjLmZvY3VzPSEwO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpUYihlKSYmSmQoZSxhKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09ZmIuaW5kZXhPZihlKSYmRihlLGEpfWNbZV09ITB9fX1mdW5jdGlvbiB3ZSgpe312YXIgeGU9bnVsbCx5ZT1udWxsO1xuZnVuY3Rpb24gemUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfWZ1bmN0aW9uIEFlKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1mdW5jdGlvbiBCZShhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfVxuZnVuY3Rpb24gQ2UoYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfW5ldyBTZXQ7dmFyIERlPVtdLEVlPS0xO2Z1bmN0aW9uIEcoYSl7MD5FZXx8KGEuY3VycmVudD1EZVtFZV0sRGVbRWVdPW51bGwsRWUtLSl9ZnVuY3Rpb24gSChhLGIpe0VlKys7RGVbRWVdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgRmU9e30sST17Y3VycmVudDpGZX0sSj17Y3VycmVudDohMX0sR2U9RmU7XG5mdW5jdGlvbiBIZShhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEZlO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEsoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBJZShhKXtHKEosYSk7RyhJLGEpfWZ1bmN0aW9uIEplKGEpe0coSixhKTtHKEksYSl9XG5mdW5jdGlvbiBLZShhLGIsYyl7SS5jdXJyZW50IT09RmU/dChcIjE2OFwiKTp2b2lkIDA7SChJLGIsYSk7SChKLGMsYSl9ZnVuY3Rpb24gTGUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWUgaW4gYT92b2lkIDA6dChcIjEwOFwiLGxjKGIpfHxcIlVua25vd25cIixlKTtyZXR1cm4gbih7fSxjLGQpfWZ1bmN0aW9uIE1lKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8RmU7R2U9SS5jdXJyZW50O0goSSxiLGEpO0goSixKLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiBOZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7ZD92b2lkIDA6dChcIjE2OVwiKTtjPyhiPUxlKGEsYixHZSksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1iLEcoSixhKSxHKEksYSksSChJLGIsYSkpOkcoSixhKTtIKEosYyxhKX12YXIgT2U9bnVsbCxQZT1udWxsO2Z1bmN0aW9uIFFlKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19XG5mdW5jdGlvbiBSZShhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtPZT1RZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7UGU9UWUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIFNlKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBUZShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO251bGw9PT1kPyhkPW5ldyBTZShhLnRhZyxiLGEua2V5LGEubW9kZSksZC50eXBlPWEudHlwZSxkLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxkLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWQpOihkLnBlbmRpbmdQcm9wcz1iLGQuZWZmZWN0VGFnPTAsZC5uZXh0RWZmZWN0PW51bGwsZC5maXJzdEVmZmVjdD1udWxsLGQubGFzdEVmZmVjdD1udWxsKTtkLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2QuZXhwaXJhdGlvblRpbWU9YiE9PWEucGVuZGluZ1Byb3BzP2M6YS5leHBpcmF0aW9uVGltZTtkLmNoaWxkPWEuY2hpbGQ7ZC5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztkLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2QudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtkLmZpcnN0Q29udGV4dERlcGVuZGVuY3k9YS5maXJzdENvbnRleHREZXBlbmRlbmN5O2Quc2libGluZz1hLnNpYmxpbmc7XG5kLmluZGV4PWEuaW5kZXg7ZC5yZWY9YS5yZWY7cmV0dXJuIGR9XG5mdW5jdGlvbiBWZShhLGIsYyl7dmFyIGQ9YS50eXBlLGU9YS5rZXk7YT1hLnByb3BzO3ZhciBmPXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZClmPVRlKGQpPzI6NDtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgZClmPTc7ZWxzZSBhOnN3aXRjaChkKXtjYXNlIGJjOnJldHVybiBXZShhLmNoaWxkcmVuLGIsYyxlKTtjYXNlIGdjOmY9MTA7Ynw9MzticmVhaztjYXNlIGNjOmY9MTA7Ynw9MjticmVhaztjYXNlIGRjOnJldHVybiBkPW5ldyBTZSgxNSxhLGUsYnw0KSxkLnR5cGU9ZGMsZC5leHBpcmF0aW9uVGltZT1jLGQ7Y2FzZSBpYzpmPTE2O2JyZWFrO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZClzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBlYzpmPTEyO2JyZWFrIGE7Y2FzZSBmYzpmPTExO2JyZWFrIGE7Y2FzZSBoYzpmPTEzO2JyZWFrIGE7ZGVmYXVsdDppZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC50aGVuKXtmPTQ7YnJlYWsgYX19dChcIjEzMFwiLFxubnVsbD09ZD9kOnR5cGVvZiBkLFwiXCIpfWI9bmV3IFNlKGYsYSxlLGIpO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1mdW5jdGlvbiBXZShhLGIsYyxkKXthPW5ldyBTZSg5LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gWGUoYSxiLGMpe2E9bmV3IFNlKDgsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBZZShhLGIsYyl7Yj1uZXcgU2UoNixudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBaZShhLGIpe2EuZGlkRXJyb3I9ITE7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lOzA9PT1jP2EuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lPWI6Yz5iP2EuZWFybGllc3RQZW5kaW5nVGltZT1iOmEubGF0ZXN0UGVuZGluZ1RpbWU8YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yik7JGUoYixhKX1mdW5jdGlvbiAkZShhLGIpe3ZhciBjPWIuZWFybGllc3RTdXNwZW5kZWRUaW1lLGQ9Yi5sYXRlc3RTdXNwZW5kZWRUaW1lLGU9Yi5lYXJsaWVzdFBlbmRpbmdUaW1lLGY9Yi5sYXRlc3RQaW5nZWRUaW1lO2U9MCE9PWU/ZTpmOzA9PT1lJiYoMD09PWF8fGQ+YSkmJihlPWQpO2E9ZTswIT09YSYmMCE9PWMmJmM8YSYmKGE9Yyk7Yi5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1lO2IuZXhwaXJhdGlvblRpbWU9YX12YXIgYWY9ITE7XG5mdW5jdGlvbiBiZihhKXtyZXR1cm57YmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gY2YoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdFVwZGF0ZTphLmZpcnN0VXBkYXRlLGxhc3RVcGRhdGU6YS5sYXN0VXBkYXRlLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fVxuZnVuY3Rpb24gZGYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gZWYoYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gZmYoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPWJmKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPWJmKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPWJmKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1jZihlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1jZihkKSk7bnVsbD09PWV8fGQ9PT1lP2VmKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8oZWYoZCxiKSxlZihlLGIpKTooZWYoZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBnZihhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPWJmKGEubWVtb2l6ZWRTdGF0ZSk6aGYoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiBoZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1jZihiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBqZihhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIDE6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIDM6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8NjQ7Y2FzZSAwOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBuKHt9LGQsZSk7Y2FzZSAyOmFmPSEwfXJldHVybiBkfVxuZnVuY3Rpb24ga2YoYSxiLGMsZCxlKXthZj0hMTtiPWhmKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGc9bnVsbCxoPTAsaz1iLmZpcnN0VXBkYXRlLGw9ZjtudWxsIT09azspe3ZhciBtPWsuZXhwaXJhdGlvblRpbWU7aWYobT5lKXtpZihudWxsPT09ZyYmKGc9ayxmPWwpLDA9PT1ofHxoPm0paD1tfWVsc2UgbD1qZihhLGIsayxsLGMsZCksbnVsbCE9PWsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1rOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdEVmZmVjdD1rKSk7az1rLm5leHR9bT1udWxsO2ZvcihrPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09azspe3ZhciByPWsuZXhwaXJhdGlvblRpbWU7aWYocj5lKXtpZihudWxsPT09bSYmKG09ayxudWxsPT09ZyYmKGY9bCkpLDA9PT1ofHxoPnIpaD1yfWVsc2UgbD1qZihhLGIsayxsLGMsZCksXG5udWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWs6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RDYXB0dXJlZEVmZmVjdD1rKSk7az1rLm5leHR9bnVsbD09PWcmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PW0/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWcmJm51bGw9PT1tJiYoZj1sKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9ZztiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9bTthLmV4cGlyYXRpb25UaW1lPWg7YS5tZW1vaXplZFN0YXRlPWx9XG5mdW5jdGlvbiBsZihhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7bWYoYi5maXJzdEVmZmVjdCxjKTtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO21mKGIuZmlyc3RDYXB0dXJlZEVmZmVjdCxjKTtiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbH1mdW5jdGlvbiBtZihhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmNhbGxiYWNrO2lmKG51bGwhPT1jKXthLmNhbGxiYWNrPW51bGw7dmFyIGQ9YjtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz90KFwiMTkxXCIsYyk6dm9pZCAwO2MuY2FsbChkKX1hPWEubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBuZihhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOm1jKGIpfX12YXIgb2Y9e2N1cnJlbnQ6bnVsbH0scGY9bnVsbCxxZj1udWxsLHJmPW51bGw7ZnVuY3Rpb24gc2YoYSxiKXt2YXIgYz1hLnR5cGUuX2NvbnRleHQ7SChvZixjLl9jdXJyZW50VmFsdWUsYSk7Yy5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gdGYoYSl7dmFyIGI9b2YuY3VycmVudDtHKG9mLGEpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gdWYoYSl7cGY9YTtyZj1xZj1udWxsO2EuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT1udWxsfVxuZnVuY3Rpb24gdmYoYSxiKXtpZihyZiE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcmY9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07bnVsbD09PXFmPyhudWxsPT09cGY/dChcIjI3N1wiKTp2b2lkIDAscGYuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT1xZj1iKTpxZj1xZi5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgd2Y9e30sTD17Y3VycmVudDp3Zn0seGY9e2N1cnJlbnQ6d2Z9LHlmPXtjdXJyZW50OndmfTtmdW5jdGlvbiB6ZihhKXthPT09d2Y/dChcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9XG5mdW5jdGlvbiBBZihhLGIpe0goeWYsYixhKTtIKHhmLGEsYSk7SChMLHdmLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmxlKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj1sZShiLGMpfUcoTCxhKTtIKEwsYixhKX1mdW5jdGlvbiBCZihhKXtHKEwsYSk7Ryh4ZixhKTtHKHlmLGEpfWZ1bmN0aW9uIENmKGEpe3pmKHlmLmN1cnJlbnQpO3ZhciBiPXpmKEwuY3VycmVudCk7dmFyIGM9bGUoYixhLnR5cGUpO2IhPT1jJiYoSCh4ZixhLGEpLEgoTCxjLGEpKX1mdW5jdGlvbiBEZihhKXt4Zi5jdXJyZW50PT09YSYmKEcoTCxhKSxHKHhmLGEpKX12YXIgRWY9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBGZihhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jO2Q9YS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmMD09PWEuZXhwaXJhdGlvblRpbWUmJihkLmJhc2VTdGF0ZT1jKX1cbnZhciBKZj17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PWpkKGEpOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdmKCk7ZD1IZihkLGEpO3ZhciBlPWRmKGQpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtmZihhLGUpO0lmKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdmKCk7ZD1IZihkLGEpO3ZhciBlPWRmKGQpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO2ZmKGEsZSk7SWYoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9R2YoKTtjPUhmKGMsYSk7dmFyIGQ9ZGYoYyk7ZC50YWc9Mjt2b2lkIDAhPT1cbmImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtmZihhLGQpO0lmKGEsYyl9fTtmdW5jdGlvbiBLZihhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFpZChjLGQpfHwhaWQoZSxmKTohMH1mdW5jdGlvbiBMZihhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmSmYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBNZihhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZSxmPUsoYik/R2U6SS5jdXJyZW50O2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9RWY7ZS5jb250ZXh0PUhlKGEsZik7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoa2YoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEZmKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZcbmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJkpmLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKGtmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgTmY9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIE9mKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDIhPT1jLnRhZyYmMyE9PWMudGFnP3QoXCIxMTBcIik6dm9pZCAwLGQ9Yy5zdGF0ZU5vZGUpO2Q/dm9pZCAwOnQoXCIxNDdcIixhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUVmJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9XCJzdHJpbmdcIiE9PXR5cGVvZiBhP3QoXCIyODRcIik6dm9pZCAwO2MuX293bmVyP3ZvaWQgMDp0KFwiMjU0XCIsYSl9cmV0dXJuIGF9XG5mdW5jdGlvbiBQZihhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmdChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gUWYoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT1VZShhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8OCE9PWIudGFnKXJldHVybiBiPVhlKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi50eXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPU9mKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZShjLGEubW9kZSxkKTtkLnJlZj1PZihhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cblllKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8OSE9PWIudGFnKXJldHVybiBiPVdlKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiByKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1YZShcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSAkYjpyZXR1cm4gYz1WZShiLGEubW9kZSxjKSxjLnJlZj1PZihhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgYWM6cmV0dXJuIGI9WWUoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKE5mKGIpfHxrYyhiKSlyZXR1cm4gYj1XZShiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPVxuYSxiO1BmKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQShhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSAkYjpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWJjP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSBhYzpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihOZihjKXx8a2MoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1BmKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gUyhhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtcbmlmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlICRiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1iYz9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSBhYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihOZihkKXx8a2MoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1BmKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxtPW51bGwscD1nLHU9Zz0wLHE9bnVsbDtudWxsIT09cCYmdTxoLmxlbmd0aDt1Kyspe3AuaW5kZXg+dT8ocT1wLHA9bnVsbCk6cT1wLnNpYmxpbmc7dmFyIHY9QShlLHAsaFt1XSxrKTtpZihudWxsPT09dil7bnVsbD09PXAmJihwPXEpO2JyZWFrfWEmJnAmJm51bGw9PT12LmFsdGVybmF0ZSYmYihlLFxucCk7Zz1mKHYsZyx1KTtudWxsPT09bT9sPXY6bS5zaWJsaW5nPXY7bT12O3A9cX1pZih1PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxwKSxsO2lmKG51bGw9PT1wKXtmb3IoO3U8aC5sZW5ndGg7dSsrKWlmKHA9cihlLGhbdV0saykpZz1mKHAsZyx1KSxudWxsPT09bT9sPXA6bS5zaWJsaW5nPXAsbT1wO3JldHVybiBsfWZvcihwPWQoZSxwKTt1PGgubGVuZ3RoO3UrKylpZihxPVMocCxlLHUsaFt1XSxrKSlhJiZudWxsIT09cS5hbHRlcm5hdGUmJnAuZGVsZXRlKG51bGw9PT1xLmtleT91OnEua2V5KSxnPWYocSxnLHUpLG51bGw9PT1tP2w9cTptLnNpYmxpbmc9cSxtPXE7YSYmcC5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiBQKGUsZyxoLGspe3ZhciBsPWtjKGgpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBsP3QoXCIxNTBcIik6dm9pZCAwO2g9bC5jYWxsKGgpO251bGw9PWg/dChcIjE1MVwiKTp2b2lkIDA7Zm9yKHZhciBtPWw9bnVsbCxwPWcsdT1nPVxuMCxxPW51bGwsdj1oLm5leHQoKTtudWxsIT09cCYmIXYuZG9uZTt1Kyssdj1oLm5leHQoKSl7cC5pbmRleD51PyhxPXAscD1udWxsKTpxPXAuc2libGluZzt2YXIgeD1BKGUscCx2LnZhbHVlLGspO2lmKG51bGw9PT14KXtwfHwocD1xKTticmVha31hJiZwJiZudWxsPT09eC5hbHRlcm5hdGUmJmIoZSxwKTtnPWYoeCxnLHUpO251bGw9PT1tP2w9eDptLnNpYmxpbmc9eDttPXg7cD1xfWlmKHYuZG9uZSlyZXR1cm4gYyhlLHApLGw7aWYobnVsbD09PXApe2Zvcig7IXYuZG9uZTt1Kyssdj1oLm5leHQoKSl2PXIoZSx2LnZhbHVlLGspLG51bGwhPT12JiYoZz1mKHYsZyx1KSxudWxsPT09bT9sPXY6bS5zaWJsaW5nPXYsbT12KTtyZXR1cm4gbH1mb3IocD1kKGUscCk7IXYuZG9uZTt1Kyssdj1oLm5leHQoKSl2PVMocCxlLHUsdi52YWx1ZSxrKSxudWxsIT09diYmKGEmJm51bGwhPT12LmFsdGVybmF0ZSYmcC5kZWxldGUobnVsbD09PXYua2V5P3U6di5rZXkpLGc9Zih2LGcsdSksbnVsbD09PVxubT9sPXY6bS5zaWJsaW5nPXYsbT12KTthJiZwLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1iYyYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSAkYjphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpaWYoOT09PWsudGFnP2YudHlwZT09PWJjOmsudHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09YmM/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPU9mKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PWJjPyhkPVdlKGYucHJvcHMuY2hpbGRyZW4sXG5hLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVZlKGYsYS5tb2RlLGgpLGgucmVmPU9mKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSBhYzphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig2PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVllKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmOD09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGgpLGQucmV0dXJuPVxuYSxhPWQpOihjKGEsZCksZD1YZShmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihOZihmKSlyZXR1cm4gQihhLGQsZixoKTtpZihrYyhmKSlyZXR1cm4gUChhLGQsZixoKTtsJiZQZihhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDI6Y2FzZSAzOmNhc2UgMDpoPWEudHlwZSx0KFwiMTUyXCIsaC5kaXNwbGF5TmFtZXx8aC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgUmY9UWYoITApLFNmPVFmKCExKSxUZj1udWxsLFVmPW51bGwsVmY9ITE7ZnVuY3Rpb24gV2YoYSxiKXt2YXIgYz1uZXcgU2UoNyxudWxsLG51bGwsMCk7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBYZihhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA3OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA4OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBZZihhKXtpZihWZil7dmFyIGI9VWY7aWYoYil7dmFyIGM9YjtpZighWGYoYSxiKSl7Yj1CZShjKTtpZighYnx8IVhmKGEsYikpe2EuZWZmZWN0VGFnfD0yO1ZmPSExO1RmPWE7cmV0dXJufVdmKFRmLGMpfVRmPWE7VWY9Q2UoYil9ZWxzZSBhLmVmZmVjdFRhZ3w9MixWZj0hMSxUZj1hfX1cbmZ1bmN0aW9uIFpmKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY3IT09YS50YWcmJjUhPT1hLnRhZzspYT1hLnJldHVybjtUZj1hfWZ1bmN0aW9uICRmKGEpe2lmKGEhPT1UZilyZXR1cm4hMTtpZighVmYpcmV0dXJuIFpmKGEpLFZmPSEwLCExO3ZhciBiPWEudHlwZTtpZig3IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhQWUoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPVVmO2I7KVdmKGEsYiksYj1CZShiKTtaZihhKTtVZj1UZj9CZShhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBhZygpe1VmPVRmPW51bGw7VmY9ITF9XG5mdW5jdGlvbiBiZyhhKXtzd2l0Y2goYS5fcmVhY3RTdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYS5fcmVhY3RSZXN1bHQ7Y2FzZSAyOnRocm93IGEuX3JlYWN0UmVzdWx0O2Nhc2UgMDp0aHJvdyBhO2RlZmF1bHQ6dGhyb3cgYS5fcmVhY3RTdGF0dXM9MCxhLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3JlYWN0U3RhdHVzKXthLl9yZWFjdFN0YXR1cz0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3ZhciBjPWIuZGVmYXVsdDtiPXZvaWQgMCE9PWMmJm51bGwhPT1jP2M6Yn1hLl9yZWFjdFJlc3VsdD1ifX0sZnVuY3Rpb24oYil7MD09PWEuX3JlYWN0U3RhdHVzJiYoYS5fcmVhY3RTdGF0dXM9MixhLl9yZWFjdFJlc3VsdD1iKX0pLGE7fX12YXIgY2c9WWIuUmVhY3RDdXJyZW50T3duZXI7ZnVuY3Rpb24gTShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1NmKGIsbnVsbCxjLGQpOlJmKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gZGcoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO2lmKCFKLmN1cnJlbnQmJmIubWVtb2l6ZWRQcm9wcz09PWQmJmY9PT0obnVsbCE9PWE/YS5yZWY6bnVsbCkpcmV0dXJuIGVnKGEsYixlKTtjPWMoZCxmKTtNKGEsYixjLGUpO2IubWVtb2l6ZWRQcm9wcz1kO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGZnKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gZ2coYSxiLGMsZCxlKXt2YXIgZj1LKGMpP0dlOkkuY3VycmVudDtmPUhlKGIsZik7dWYoYixlKTtjPWMoZCxmKTtiLmVmZmVjdFRhZ3w9MTtNKGEsYixjLGUpO2IubWVtb2l6ZWRQcm9wcz1kO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaGcoYSxiLGMsZCxlKXtpZihLKGMpKXt2YXIgZj0hMDtNZShiKX1lbHNlIGY9ITE7dWYoYixlKTtpZihudWxsPT09YSlpZihudWxsPT09Yi5zdGF0ZU5vZGUpe3ZhciBnPUsoYyk/R2U6SS5jdXJyZW50LGg9Yy5jb250ZXh0VHlwZXMsaz1udWxsIT09aCYmdm9pZCAwIT09aDtoPWs/SGUoYixnKTpGZTt2YXIgbD1uZXcgYyhkLGgpO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09bC5zdGF0ZSYmdm9pZCAwIT09bC5zdGF0ZT9sLnN0YXRlOm51bGw7bC51cGRhdGVyPUpmO2Iuc3RhdGVOb2RlPWw7bC5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7ayYmKGs9Yi5zdGF0ZU5vZGUsay5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWcsay5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1oKTtNZihiLGMsZCxlKTtkPSEwfWVsc2V7Zz1iLnN0YXRlTm9kZTtoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIG09Zy5jb250ZXh0O1xuaz1LKGMpP0dlOkkuY3VycmVudDtrPUhlKGIsayk7dmFyIHI9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJ8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8bSE9PWspJiZMZihiLGcsZCxrKTthZj0hMTt2YXIgQT1iLm1lbW9pemVkU3RhdGU7bT1nLnN0YXRlPUE7dmFyIFM9Yi51cGRhdGVRdWV1ZTtudWxsIT09UyYmKGtmKGIsUyxkLGcsZSksbT1iLm1lbW9pemVkU3RhdGUpO2ghPT1kfHxBIT09bXx8Si5jdXJyZW50fHxhZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHImJihGZihiLGMscixkKSxtPWIubWVtb2l6ZWRTdGF0ZSksKGg9YWZ8fEtmKGIsYyxoLGQsQSxtLGspKT8obHx8XCJmdW5jdGlvblwiIT09XG50eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW0pLGcucHJvcHM9ZCxnLnN0YXRlPW0sZy5jb250ZXh0PWssZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLGg9XG5iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1oLG09Zy5jb250ZXh0LGs9SyhjKT9HZTpJLmN1cnJlbnQsaz1IZShiLGspLHI9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJ8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8bSE9PWspJiZMZihiLGcsZCxrKSxhZj0hMSxtPWIubWVtb2l6ZWRTdGF0ZSxBPWcuc3RhdGU9bSxTPWIudXBkYXRlUXVldWUsbnVsbCE9PVMmJihrZihiLFMsZCxnLGUpLEE9Yi5tZW1vaXplZFN0YXRlKSxoIT09ZHx8bSE9PUF8fEouY3VycmVudHx8YWY/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiByJiYoRmYoYixjLHIsZCksQT1iLm1lbW9pemVkU3RhdGUpLChyPWFmfHxLZihiLGMsaCxkLFxubSxBLGspKT8obHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxBLGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsQSxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJm09PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09XG50eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1BKSxnLnByb3BzPWQsZy5zdGF0ZT1BLGcuY29udGV4dD1rLGQ9cik6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBpZyhhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBpZyhhLGIsYyxkLGUsZil7ZmcoYSxiKTt2YXIgZz0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJk5lKGIsYywhMSksZWcoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7Y2cuY3VycmVudD1iO3ZhciBoPWc/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnJiYoTShhLGIsbnVsbCxmKSxiLmNoaWxkPW51bGwpO00oYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7Yi5tZW1vaXplZFByb3BzPWQucHJvcHM7ZSYmTmUoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBqZyhhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0tlKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJktlKGEsYi5jb250ZXh0LCExKTtBZihhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBuZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIG9nKGEsYixjLGQpe251bGwhPT1hP3QoXCIxNTVcIik6dm9pZCAwO3ZhciBlPWIucGVuZGluZ1Byb3BzO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnRoZW4pe2M9YmcoYyk7dmFyIGY9YztmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP1RlKGYpPzM6MTp2b2lkIDAhPT1mJiZudWxsIT09ZiYmZi4kJHR5cGVvZj8xNDo0O2Y9Yi50YWc9Zjt2YXIgZz1uZyhjLGUpO3N3aXRjaChmKXtjYXNlIDE6cmV0dXJuIGdnKGEsYixjLGcsZCk7Y2FzZSAzOnJldHVybiBoZyhhLGIsYyxnLGQpO2Nhc2UgMTQ6cmV0dXJuIGRnKGEsYixjLGcsZCk7ZGVmYXVsdDp0KFwiMjgzXCIsYyl9fWY9SGUoYixJLmN1cnJlbnQpO3VmKGIsZCk7Zj1jKGUsZik7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYucmVuZGVyJiZ2b2lkIDA9PT1mLiQkdHlwZW9mKXtiLnRhZz0yO0soYyk/XG4oZz0hMCxNZShiKSk6Zz0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWYuc3RhdGUmJnZvaWQgMCE9PWYuc3RhdGU/Zi5zdGF0ZTpudWxsO3ZhciBoPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBoJiZGZihiLGMsaCxlKTtmLnVwZGF0ZXI9SmY7Yi5zdGF0ZU5vZGU9ZjtmLl9yZWFjdEludGVybmFsRmliZXI9YjtNZihiLGMsZSxkKTtyZXR1cm4gaWcoYSxiLGMsITAsZyxkKX1iLnRhZz0wO00oYSxiLGYsZCk7Yi5tZW1vaXplZFByb3BzPWU7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBlZyhhLGIsYyl7bnVsbCE9PWEmJihiLmZpcnN0Q29udGV4dERlcGVuZGVuY3k9YS5maXJzdENvbnRleHREZXBlbmRlbmN5KTt2YXIgZD1iLmNoaWxkRXhwaXJhdGlvblRpbWU7aWYoMD09PWR8fGQ+YylyZXR1cm4gbnVsbDtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/dChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVVlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVVlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBnKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKCFKLmN1cnJlbnQmJigwPT09ZHx8ZD5jKSl7c3dpdGNoKGIudGFnKXtjYXNlIDU6amcoYik7YWcoKTticmVhaztjYXNlIDc6Q2YoYik7YnJlYWs7Y2FzZSAyOksoYi50eXBlKSYmTWUoYik7YnJlYWs7Y2FzZSAzOksoYi50eXBlLl9yZWFjdFJlc3VsdCkmJk1lKGIpO2JyZWFrO2Nhc2UgNjpBZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTI6c2YoYixiLm1lbW9pemVkUHJvcHMudmFsdWUpfXJldHVybiBlZyhhLGIsYyl9Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSA0OnJldHVybiBvZyhhLGIsYi50eXBlLGMpO2Nhc2UgMDpyZXR1cm4gZ2coYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxjKTtjYXNlIDE6dmFyIGU9Yi50eXBlLl9yZWFjdFJlc3VsdDtkPWIucGVuZGluZ1Byb3BzO2E9Z2coYSxiLGUsbmcoZSxkKSxjKTtiLm1lbW9pemVkUHJvcHM9ZDtyZXR1cm4gYTtcbmNhc2UgMjpyZXR1cm4gaGcoYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxjKTtjYXNlIDM6cmV0dXJuIGU9Yi50eXBlLl9yZWFjdFJlc3VsdCxkPWIucGVuZGluZ1Byb3BzLGE9aGcoYSxiLGUsbmcoZSxkKSxjKSxiLm1lbW9pemVkUHJvcHM9ZCxhO2Nhc2UgNTpqZyhiKTtkPWIudXBkYXRlUXVldWU7bnVsbD09PWQ/dChcIjI4MlwiKTp2b2lkIDA7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDtrZihiLGQsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKWFnKCksYj1lZyhhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGU9KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmUuaHlkcmF0ZSlVZj1DZShiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxUZj1iLGU9VmY9ITA7ZT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1TZihiLG51bGwsZCxjKSk6KE0oYSxiLGQsYyksYWcoKSk7Yj1iLmNoaWxkfXJldHVybiBiO1xuY2FzZSA3OkNmKGIpO251bGw9PT1hJiZZZihiKTtkPWIudHlwZTtlPWIucGVuZGluZ1Byb3BzO3ZhciBmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbjtBZShkLGUpP2c9bnVsbDpudWxsIT09ZiYmQWUoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNik7ZmcoYSxiKTsxMDczNzQxODIzIT09YyYmYi5tb2RlJjEmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYi5tZW1vaXplZFByb3BzPWUsYj1udWxsKTooTShhLGIsZyxjKSxiLm1lbW9pemVkUHJvcHM9ZSxiPWIuY2hpbGQpO3JldHVybiBiO2Nhc2UgODpyZXR1cm4gbnVsbD09PWEmJllmKGIpLGIubWVtb2l6ZWRQcm9wcz1iLnBlbmRpbmdQcm9wcyxudWxsO2Nhc2UgMTY6cmV0dXJuIG51bGw7Y2FzZSA2OnJldHVybiBBZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1SZihiLG51bGwsZCxjKTpNKGEsYixkLGMpLGIubWVtb2l6ZWRQcm9wcz1cbmQsYi5jaGlsZDtjYXNlIDEzOnJldHVybiBkZyhhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLl9yZWFjdFJlc3VsdCxkPWIucGVuZGluZ1Byb3BzLGE9ZGcoYSxiLGUsbmcoZSxkKSxjKSxiLm1lbW9pemVkUHJvcHM9ZCxhO2Nhc2UgOTpyZXR1cm4gZD1iLnBlbmRpbmdQcm9wcyxNKGEsYixkLGMpLGIubWVtb2l6ZWRQcm9wcz1kLGIuY2hpbGQ7Y2FzZSAxMDpyZXR1cm4gZD1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixNKGEsYixkLGMpLGIubWVtb2l6ZWRQcm9wcz1kLGIuY2hpbGQ7Y2FzZSAxNTpyZXR1cm4gZD1iLnBlbmRpbmdQcm9wcyxNKGEsYixkLmNoaWxkcmVuLGMpLGIubWVtb2l6ZWRQcm9wcz1kLGIuY2hpbGQ7Y2FzZSAxMjphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTtiLm1lbW9pemVkUHJvcHM9ZTtzZihiLGYpO2lmKG51bGwhPT1nKXt2YXIgaD1nLnZhbHVlO1xuZj1oPT09ZiYmKDAhPT1ofHwxL2g9PT0xL2YpfHxoIT09aCYmZiE9PWY/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MDtpZigwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFKLmN1cnJlbnQpe2I9ZWcoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGc9Yi5jaGlsZCxudWxsIT09ZyYmKGcucmV0dXJuPWIpO251bGwhPT1nOyl7aD1nLmZpcnN0Q29udGV4dERlcGVuZGVuY3k7aWYobnVsbCE9PWgpe2Rve2lmKGguY29udGV4dD09PWQmJjAhPT0oaC5vYnNlcnZlZEJpdHMmZikpe2lmKDI9PT1nLnRhZ3x8Mz09PWcudGFnKXt2YXIgaz1kZihjKTtrLnRhZz0yO2ZmKGcsayl9aWYoMD09PWcuZXhwaXJhdGlvblRpbWV8fGcuZXhwaXJhdGlvblRpbWU+YylnLmV4cGlyYXRpb25UaW1lPWM7az1nLmFsdGVybmF0ZTtudWxsIT09ayYmKDA9PT1rLmV4cGlyYXRpb25UaW1lfHxcbmsuZXhwaXJhdGlvblRpbWU+YykmJihrLmV4cGlyYXRpb25UaW1lPWMpO2Zvcih2YXIgbD1nLnJldHVybjtudWxsIT09bDspe2s9bC5hbHRlcm5hdGU7aWYoMD09PWwuY2hpbGRFeHBpcmF0aW9uVGltZXx8bC5jaGlsZEV4cGlyYXRpb25UaW1lPmMpbC5jaGlsZEV4cGlyYXRpb25UaW1lPWMsbnVsbCE9PWsmJigwPT09ay5jaGlsZEV4cGlyYXRpb25UaW1lfHxrLmNoaWxkRXhwaXJhdGlvblRpbWU+YykmJihrLmNoaWxkRXhwaXJhdGlvblRpbWU9Yyk7ZWxzZSBpZihudWxsIT09ayYmKDA9PT1rLmNoaWxkRXhwaXJhdGlvblRpbWV8fGsuY2hpbGRFeHBpcmF0aW9uVGltZT5jKSlrLmNoaWxkRXhwaXJhdGlvblRpbWU9YztlbHNlIGJyZWFrO2w9bC5yZXR1cm59fWs9Zy5jaGlsZDtoPWgubmV4dH13aGlsZShudWxsIT09aCl9ZWxzZSBrPTEyPT09Zy50YWc/Zy50eXBlPT09Yi50eXBlP251bGw6Zy5jaGlsZDpnLmNoaWxkO2lmKG51bGwhPT1rKWsucmV0dXJuPWc7ZWxzZSBmb3Ioaz1nO251bGwhPT1cbms7KXtpZihrPT09Yil7az1udWxsO2JyZWFrfWc9ay5zaWJsaW5nO2lmKG51bGwhPT1nKXtnLnJldHVybj1rLnJldHVybjtrPWc7YnJlYWt9az1rLnJldHVybn1nPWt9fU0oYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgMTE6cmV0dXJuIGY9Yi50eXBlLGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLHVmKGIsYyksZj12ZihmLGQudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxlPWUoZiksYi5lZmZlY3RUYWd8PTEsTShhLGIsZSxjKSxiLm1lbW9pemVkUHJvcHM9ZCxiLmNoaWxkO2RlZmF1bHQ6dChcIjE1NlwiKX19ZnVuY3Rpb24gcWcoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIHJnPXZvaWQgMCxzZz12b2lkIDAsdGc9dm9pZCAwO3JnPWZ1bmN0aW9uKCl7fTtcbnNnPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTt6ZihMLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj16YyhnLGYpO2Q9emMoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPWRlKGcsZik7ZD1kZShnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPWZlKGcsZik7ZD1mZShnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXdlKX10ZShjLGQpO2c9Yz12b2lkIDA7dmFyIGg9bnVsbDtmb3IoYyBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGMpJiZmLmhhc093blByb3BlcnR5KGMpJiZudWxsIT1mW2NdKWlmKFwic3R5bGVcIj09PVxuYyl7dmFyIGs9ZltjXTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJihofHwoaD17fSksaFtnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YyYmXCJjaGlsZHJlblwiIT09YyYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiZcImF1dG9Gb2N1c1wiIT09YyYmKHNhLmhhc093blByb3BlcnR5KGMpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChjLG51bGwpKTtmb3IoYyBpbiBkKXt2YXIgbD1kW2NdO2s9bnVsbCE9Zj9mW2NdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGMpJiZsIT09ayYmKG51bGwhPWx8fG51bGwhPWspKWlmKFwic3R5bGVcIj09PWMpaWYoayl7Zm9yKGcgaW4gaykhay5oYXNPd25Qcm9wZXJ0eShnKXx8bCYmbC5oYXNPd25Qcm9wZXJ0eShnKXx8KGh8fChoPXt9KSxoW2ddPVwiXCIpO2ZvcihnIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShnKSYma1tnXSE9PWxbZ10mJihofHxcbihoPXt9KSxoW2ddPWxbZ10pfWVsc2UgaHx8KGF8fChhPVtdKSxhLnB1c2goYyxoKSksaD1sO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1jPyhsPWw/bC5fX2h0bWw6dm9pZCAwLGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmayE9PWwmJihhPWF8fFtdKS5wdXNoKGMsXCJcIitsKSk6XCJjaGlsZHJlblwiPT09Yz9rPT09bHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBsJiZcIm51bWJlclwiIT09dHlwZW9mIGx8fChhPWF8fFtdKS5wdXNoKGMsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJihzYS5oYXNPd25Qcm9wZXJ0eShjKT8obnVsbCE9bCYmdmUoZSxjKSxhfHxrPT09bHx8KGE9W10pKTooYT1hfHxbXSkucHVzaChjLGwpKX1oJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsaCk7ZT1hOyhiLnVwZGF0ZVF1ZXVlPWUpJiZxZyhiKX19O3RnPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZxZyhiKX07XG5mdW5jdGlvbiB1ZyhhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPW1jKGMpKTtudWxsIT09YyYmbGMoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjI9PT1hLnRhZyYmbGMoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gdmcoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7d2coYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24geGcoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIFBlJiZQZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMjpjYXNlIDM6dmcoYSk7dmFyIGI9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXt3ZyhhLGMpfWJyZWFrO2Nhc2UgNzp2ZyhhKTticmVhaztjYXNlIDY6eWcoYSl9fWZ1bmN0aW9uIHpnKGEpe3JldHVybiA3PT09YS50YWd8fDU9PT1hLnRhZ3x8Nj09PWEudGFnfVxuZnVuY3Rpb24gQWcoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoemcoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXQoXCIxNjBcIik7Yz12b2lkIDB9dmFyIGQ9Yj12b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDc6Yj1jLnN0YXRlTm9kZTtkPSExO2JyZWFrO2Nhc2UgNTpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDY6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0KFwiMTYxXCIpfWMuZWZmZWN0VGFnJjE2JiYob2UoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fHpnKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs3IT09Yy50YWcmJjghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw2PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNz09PWUudGFnfHw4PT09ZS50YWcpaWYoYylpZihkKXt2YXIgZj1iLGc9ZS5zdGF0ZU5vZGUsaD1jOzg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxoKTpmLmluc2VydEJlZm9yZShnLGgpfWVsc2UgYi5pbnNlcnRCZWZvcmUoZS5zdGF0ZU5vZGUsYyk7ZWxzZSBkPyhmPWIsZz1lLnN0YXRlTm9kZSw4PT09Zi5ub2RlVHlwZT8oaD1mLnBhcmVudE5vZGUsaC5pbnNlcnRCZWZvcmUoZyxmKSk6KGg9ZixoLmFwcGVuZENoaWxkKGcpKSxudWxsPT09aC5vbmNsaWNrJiYoaC5vbmNsaWNrPXdlKSk6Yi5hcHBlbmRDaGlsZChlLnN0YXRlTm9kZSk7ZWxzZSBpZig2IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkLnJldHVybj1cbmU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24geWcoYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iLnJldHVybjthOmZvcig7Oyl7bnVsbD09PWM/dChcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDc6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA2OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jLnJldHVybn1jPSEwfWlmKDc9PT1iLnRhZ3x8OD09PWIudGFnKXthOmZvcih2YXIgZj1iLGc9Zjs7KWlmKHhnKGcpLG51bGwhPT1nLmNoaWxkJiY2IT09Zy50YWcpZy5jaGlsZC5yZXR1cm49ZyxnPWcuY2hpbGQ7ZWxzZXtpZihnPT09ZilicmVhaztmb3IoO251bGw9PT1nLnNpYmxpbmc7KXtpZihudWxsPT09Zy5yZXR1cm58fGcucmV0dXJuPT09ZilicmVhayBhO2c9Zy5yZXR1cm59Zy5zaWJsaW5nLnJldHVybj1nLnJldHVybjtnPWcuc2libGluZ31lP1xuKGY9ZCxnPWIuc3RhdGVOb2RlLDg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpmLnJlbW92ZUNoaWxkKGcpKTpkLnJlbW92ZUNoaWxkKGIuc3RhdGVOb2RlKX1lbHNlIGlmKDY9PT1iLnRhZz8oZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGU9ITApOnhnKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm47Yj1iLnJldHVybjs2PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1cbmZ1bmN0aW9uIEJnKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAzOmJyZWFrO2Nhc2UgNzp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1tKYV09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmQ2MoYyxkKTt1ZShhLGUpO2I9dWUoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP3JlKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9uZShjLGgpOlwiY2hpbGRyZW5cIj09PWc/b2UoYyxoKTp4YyhjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6RGMoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoZShjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxcbmMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZWUoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2VlKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTplZShjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fWJyZWFrO2Nhc2UgODpudWxsPT09Yi5zdGF0ZU5vZGU/dChcIjE2MlwiKTp2b2lkIDA7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDU6YnJlYWs7Y2FzZSAxNTpicmVhaztjYXNlIDE2OmJyZWFrO2RlZmF1bHQ6dChcIjE2M1wiKX19ZnVuY3Rpb24gQ2coYSxiLGMpe2M9ZGYoYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7RGcoZCk7dWcoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBFZyhhLGIsYyl7Yz1kZihjKTtjLnRhZz0zO3ZhciBkPWEuc3RhdGVOb2RlO251bGwhPT1kJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtudWxsPT09Rmc/Rmc9bmV3IFNldChbdGhpc10pOkZnLmFkZCh0aGlzKTt2YXIgYz1iLnZhbHVlLGQ9Yi5zdGFjazt1ZyhhLGIpO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYyx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWQ/ZDpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIEdnKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOksoYS50eXBlKSYmSWUoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gSyhhLnR5cGUuX3JlYWN0UmVzdWx0KSYmSWUoYSksYj1hLmVmZmVjdFRhZyxiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDU6cmV0dXJuIEJmKGEpLEplKGEpLGI9YS5lZmZlY3RUYWcsMCE9PShiJjY0KT90KFwiMjg1XCIpOnZvaWQgMCxhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGE7Y2FzZSA3OnJldHVybiBEZihhKSxudWxsO2Nhc2UgMTY6cmV0dXJuIGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA2OnJldHVybiBCZihhKSxudWxsO2Nhc2UgMTI6cmV0dXJuIHRmKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgSGc9e3JlYWRDb250ZXh0OnZmfSxJZz1ZYi5SZWFjdEN1cnJlbnRPd25lcixKZz0wLEtnPTAsTGc9ITEsTj1udWxsLE1nPW51bGwsTz0wLE5nPSExLFE9bnVsbCxPZz0hMSxGZz1udWxsO2Z1bmN0aW9uIFBnKCl7aWYobnVsbCE9PU4pZm9yKHZhciBhPU4ucmV0dXJuO251bGwhPT1hOyl7dmFyIGI9YTtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgYz1iLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJkllKGIpO2JyZWFrO2Nhc2UgMzpjPWIudHlwZS5fcmVhY3RSZXN1bHQuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJkllKGIpO2JyZWFrO2Nhc2UgNTpCZihiKTtKZShiKTticmVhaztjYXNlIDc6RGYoYik7YnJlYWs7Y2FzZSA2OkJmKGIpO2JyZWFrO2Nhc2UgMTI6dGYoYil9YT1hLnJldHVybn1NZz1udWxsO089MDtOZz0hMTtOPW51bGx9XG5mdW5jdGlvbiBRZyhhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS5yZXR1cm4sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyY1MTIpKXt2YXIgZT1iO2I9YTt2YXIgZj1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDE6YnJlYWs7Y2FzZSAyOksoYi50eXBlKSYmSWUoYik7YnJlYWs7Y2FzZSAzOksoYi50eXBlLl9yZWFjdFJlc3VsdCkmJkllKGIpO2JyZWFrO2Nhc2UgNTpCZihiKTtKZShiKTtmPWIuc3RhdGVOb2RlO2YucGVuZGluZ0NvbnRleHQmJihmLmNvbnRleHQ9Zi5wZW5kaW5nQ29udGV4dCxmLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1lfHxudWxsPT09ZS5jaGlsZCkkZihiKSxiLmVmZmVjdFRhZyY9LTM7cmcoYik7YnJlYWs7Y2FzZSA3OkRmKGIpO3ZhciBnPXpmKHlmLmN1cnJlbnQpLGg9Yi50eXBlO2lmKG51bGwhPT1lJiZudWxsIT1iLnN0YXRlTm9kZSlzZyhlLGIsaCxmLGcpLGUucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9XG4xMjgpO2Vsc2UgaWYoZil7dmFyIGs9emYoTC5jdXJyZW50KTtpZigkZihiKSl7Zj1iO2U9Zi5zdGF0ZU5vZGU7dmFyIGw9Zi50eXBlLG09Zi5tZW1vaXplZFByb3BzLHI9ZztlW0lhXT1mO2VbSmFdPW07aD12b2lkIDA7Zz1sO3N3aXRjaChnKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkYoXCJsb2FkXCIsZSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGw9MDtsPGZiLmxlbmd0aDtsKyspRihmYltsXSxlKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsZSk7RihcImxvYWRcIixlKTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGUpO0YoXCJzdWJtaXRcIixlKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixlKTticmVhaztjYXNlIFwiaW5wdXRcIjpCYyhlLG0pO0YoXCJpbnZhbGlkXCIsZSk7dmUocixcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFtLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGUpO3ZlKHIsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpnZShlLG0pLEYoXCJpbnZhbGlkXCIsZSksdmUocixcIm9uQ2hhbmdlXCIpfXRlKGcsbSk7bD1udWxsO2ZvcihoIGluIG0pbS5oYXNPd25Qcm9wZXJ0eShoKSYmKGs9bVtoXSxcImNoaWxkcmVuXCI9PT1oP1wic3RyaW5nXCI9PT10eXBlb2Ygaz9lLnRleHRDb250ZW50IT09ayYmKGw9W1wiY2hpbGRyZW5cIixrXSk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZlLnRleHRDb250ZW50IT09XCJcIitrJiYobD1bXCJjaGlsZHJlblwiLFwiXCIra10pOnNhLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1rJiZ2ZShyLGgpKTtzd2l0Y2goZyl7Y2FzZSBcImlucHV0XCI6V2IoZSk7RmMoZSxtLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpXYihlKTtpZShlLG0pO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgbS5vbkNsaWNrJiZcbihlLm9uY2xpY2s9d2UpfWg9bDtmLnVwZGF0ZVF1ZXVlPWg7Zj1udWxsIT09aD8hMDohMTtmJiZxZyhiKX1lbHNle209YjtlPWg7cj1mO2w9OT09PWcubm9kZVR5cGU/ZzpnLm93bmVyRG9jdW1lbnQ7az09PWplLmh0bWwmJihrPWtlKGUpKTtrPT09amUuaHRtbD9cInNjcmlwdFwiPT09ZT8oZT1sLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixsPWUucmVtb3ZlQ2hpbGQoZS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiByLmlzP2w9bC5jcmVhdGVFbGVtZW50KGUse2lzOnIuaXN9KToobD1sLmNyZWF0ZUVsZW1lbnQoZSksXCJzZWxlY3RcIj09PWUmJnIubXVsdGlwbGUmJihsLm11bHRpcGxlPSEwKSk6bD1sLmNyZWF0ZUVsZW1lbnROUyhrLGUpO2U9bDtlW0lhXT1tO2VbSmFdPWY7YTpmb3IobT1lLHI9YixsPXIuY2hpbGQ7bnVsbCE9PWw7KXtpZig3PT09bC50YWd8fDg9PT1sLnRhZyltLmFwcGVuZENoaWxkKGwuc3RhdGVOb2RlKTtcbmVsc2UgaWYoNiE9PWwudGFnJiZudWxsIT09bC5jaGlsZCl7bC5jaGlsZC5yZXR1cm49bDtsPWwuY2hpbGQ7Y29udGludWV9aWYobD09PXIpYnJlYWs7Zm9yKDtudWxsPT09bC5zaWJsaW5nOyl7aWYobnVsbD09PWwucmV0dXJufHxsLnJldHVybj09PXIpYnJlYWsgYTtsPWwucmV0dXJufWwuc2libGluZy5yZXR1cm49bC5yZXR1cm47bD1sLnNpYmxpbmd9cj1lO2w9aDttPWY7dmFyIEE9ZyxTPXVlKGwsbSk7c3dpdGNoKGwpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6RihcImxvYWRcIixyKTtnPW07YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGc9MDtnPGZiLmxlbmd0aDtnKyspRihmYltnXSxyKTtnPW07YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLHIpO2c9bTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixyKTtGKFwibG9hZFwiLHIpO2c9bTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLHIpO0YoXCJzdWJtaXRcIixcbnIpO2c9bTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixyKTtnPW07YnJlYWs7Y2FzZSBcImlucHV0XCI6QmMocixtKTtnPXpjKHIsbSk7RihcImludmFsaWRcIixyKTt2ZShBLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmc9ZGUocixtKTticmVhaztjYXNlIFwic2VsZWN0XCI6ci5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O2c9bih7fSxtLHt2YWx1ZTp2b2lkIDB9KTtGKFwiaW52YWxpZFwiLHIpO3ZlKEEsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpnZShyLG0pO2c9ZmUocixtKTtGKFwiaW52YWxpZFwiLHIpO3ZlKEEsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0Omc9bX10ZShsLGcpO2s9dm9pZCAwO3ZhciBCPWwsUD1yLHY9Zztmb3IoayBpbiB2KWlmKHYuaGFzT3duUHJvcGVydHkoaykpe3ZhciBwPXZba107XCJzdHlsZVwiPT09az9yZShQLHApOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWs/KHA9cD9wLl9faHRtbDp2b2lkIDAsXG5udWxsIT1wJiZuZShQLHApKTpcImNoaWxkcmVuXCI9PT1rP1wic3RyaW5nXCI9PT10eXBlb2YgcD8oXCJ0ZXh0YXJlYVwiIT09Qnx8XCJcIiE9PXApJiZvZShQLHApOlwibnVtYmVyXCI9PT10eXBlb2YgcCYmb2UoUCxcIlwiK3ApOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1rJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ayYmXCJhdXRvRm9jdXNcIiE9PWsmJihzYS5oYXNPd25Qcm9wZXJ0eShrKT9udWxsIT1wJiZ2ZShBLGspOm51bGwhPXAmJnhjKFAsayxwLFMpKX1zd2l0Y2gobCl7Y2FzZSBcImlucHV0XCI6V2Iocik7RmMocixtLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpXYihyKTtpZShyLG0pO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1tLnZhbHVlJiZyLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIit5YyhtLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmc9cjtnLm11bHRpcGxlPSEhbS5tdWx0aXBsZTtyPW0udmFsdWU7bnVsbCE9cj9lZShnLCEhbS5tdWx0aXBsZSxcbnIsITEpOm51bGwhPW0uZGVmYXVsdFZhbHVlJiZlZShnLCEhbS5tdWx0aXBsZSxtLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5vbkNsaWNrJiYoci5vbmNsaWNrPXdlKX0oZj16ZShoLGYpKSYmcWcoYik7Yi5zdGF0ZU5vZGU9ZX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNlIG51bGw9PT1iLnN0YXRlTm9kZT90KFwiMTY2XCIpOnZvaWQgMDticmVhaztjYXNlIDg6ZSYmbnVsbCE9Yi5zdGF0ZU5vZGU/dGcoZSxiLGUubWVtb2l6ZWRQcm9wcyxmKTooXCJzdHJpbmdcIiE9PXR5cGVvZiBmJiYobnVsbD09PWIuc3RhdGVOb2RlP3QoXCIxNjZcIik6dm9pZCAwKSxlPXpmKHlmLmN1cnJlbnQpLHpmKEwuY3VycmVudCksJGYoYik/KGY9YixoPWYuc3RhdGVOb2RlLGU9Zi5tZW1vaXplZFByb3BzLGhbSWFdPWYsKGY9aC5ub2RlVmFsdWUhPT1lKSYmcWcoYikpOihoPWIsZj0oOT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGYpLFxuZltJYV09aCxiLnN0YXRlTm9kZT1mKSk7YnJlYWs7Y2FzZSAxMzpjYXNlIDE0OmJyZWFrO2Nhc2UgMTY6YnJlYWs7Y2FzZSA5OmJyZWFrO2Nhc2UgMTA6YnJlYWs7Y2FzZSAxNTpicmVhaztjYXNlIDY6QmYoYik7cmcoYik7YnJlYWs7Y2FzZSAxMjp0ZihiKTticmVhaztjYXNlIDExOmJyZWFrO2Nhc2UgNDp0KFwiMTY3XCIpO2RlZmF1bHQ6dChcIjE1NlwiKX1iPU49bnVsbDtmPWE7aWYoMTA3Mzc0MTgyMz09PU98fDEwNzM3NDE4MjMhPT1mLmNoaWxkRXhwaXJhdGlvblRpbWUpe2g9MDtmb3IoZT1mLmNoaWxkO251bGwhPT1lOyl7Zz1lLmV4cGlyYXRpb25UaW1lO209ZS5jaGlsZEV4cGlyYXRpb25UaW1lO2lmKDA9PT1ofHwwIT09ZyYmZzxoKWg9ZztpZigwPT09aHx8MCE9PW0mJm08aCloPW07ZT1lLnNpYmxpbmd9Zi5jaGlsZEV4cGlyYXRpb25UaW1lPWh9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmNTEyKSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiZcbihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKX1lbHNle2E9R2coYSxPKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTUxMSxhO251bGwhPT1jJiYoYy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9bnVsbCxjLmVmZmVjdFRhZ3w9NTEyKX1pZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha31yZXR1cm4gbnVsbH1mdW5jdGlvbiBSZyhhKXt2YXIgYj1wZyhhLmFsdGVybmF0ZSxhLE8pO251bGw9PT1iJiYoYj1RZyhhKSk7SWcuY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gU2coYSxiLGMpe0xnP3QoXCIyNDNcIik6dm9pZCAwO0xnPSEwO0lnLmN1cnJlbnREaXNwYXRjaGVyPUhnO3ZhciBkPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT247aWYoZCE9PU98fGEhPT1NZ3x8bnVsbD09PU4pUGcoKSxNZz1hLE89ZCxOPVVlKE1nLmN1cnJlbnQsbnVsbCxPKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBlPSExO2Rve3RyeXtpZihiKWZvcig7bnVsbCE9PU4mJiFUZygpOylOPVJnKE4pO2Vsc2UgZm9yKDtudWxsIT09TjspTj1SZyhOKX1jYXRjaChyKXtpZihudWxsPT09TillPSEwLERnKHIpO2Vsc2V7bnVsbD09PU4/dChcIjI3MVwiKTp2b2lkIDA7dmFyIGY9TixnPWYucmV0dXJuO2lmKG51bGw9PT1nKWU9ITAsRGcocik7ZWxzZXthOnt2YXIgaD1nLGs9ZixsPXI7Zz1PO2suZWZmZWN0VGFnfD01MTI7ay5maXJzdEVmZmVjdD1rLmxhc3RFZmZlY3Q9bnVsbDtOZz0hMDtsPW5mKGwsayk7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDU6aC5lZmZlY3RUYWd8PVxuMTAyNDtoLmV4cGlyYXRpb25UaW1lPWc7Zz1DZyhoLGwsZyk7Z2YoaCxnKTticmVhayBhO2Nhc2UgMjpjYXNlIDM6az1sO3ZhciBtPWguc3RhdGVOb2RlO2lmKDA9PT0oaC5lZmZlY3RUYWcmNjQpJiZudWxsIT09bSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIG0uY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Rmd8fCFGZy5oYXMobSkpKXtoLmVmZmVjdFRhZ3w9MTAyNDtoLmV4cGlyYXRpb25UaW1lPWc7Zz1FZyhoLGssZyk7Z2YoaCxnKTticmVhayBhfX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKX1OPVFnKGYpO2NvbnRpbnVlfX19YnJlYWt9d2hpbGUoMSk7TGc9ITE7cmY9cWY9cGY9SWcuY3VycmVudERpc3BhdGNoZXI9bnVsbDtpZihlKU1nPW51bGwsYS5maW5pc2hlZFdvcms9bnVsbDtlbHNlIGlmKG51bGwhPT1OKWEuZmluaXNoZWRXb3JrPW51bGw7ZWxzZXtiPWEuY3VycmVudC5hbHRlcm5hdGU7bnVsbD09PWI/dChcIjI4MVwiKTp2b2lkIDA7TWc9bnVsbDtpZihOZyl7ZT1hLmxhdGVzdFBlbmRpbmdUaW1lO1xuZj1hLmxhdGVzdFN1c3BlbmRlZFRpbWU7Zz1hLmxhdGVzdFBpbmdlZFRpbWU7aWYoMCE9PWUmJmU+ZHx8MCE9PWYmJmY+ZHx8MCE9PWcmJmc+ZCl7YS5kaWRFcnJvcj0hMTtjPWEubGF0ZXN0UGluZ2VkVGltZTswIT09YyYmYzw9ZCYmKGEubGF0ZXN0UGluZ2VkVGltZT0wKTtjPWEuZWFybGllc3RQZW5kaW5nVGltZTtiPWEubGF0ZXN0UGVuZGluZ1RpbWU7Yz09PWQ/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWI9PT1kP2EubGF0ZXN0UGVuZGluZ1RpbWU9MDpiOmI9PT1kJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1jKTtjPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lO2I9YS5sYXRlc3RTdXNwZW5kZWRUaW1lOzA9PT1jP2EuZWFybGllc3RTdXNwZW5kZWRUaW1lPWEubGF0ZXN0U3VzcGVuZGVkVGltZT1kOmM+ZD9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1kOmI8ZCYmKGEubGF0ZXN0U3VzcGVuZGVkVGltZT1kKTskZShkLGEpO2EuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtyZXR1cm59aWYoIWEuZGlkRXJyb3ImJlxuIWMpe2EuZGlkRXJyb3I9ITA7YS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1kO2Q9YS5leHBpcmF0aW9uVGltZT0xO2EuZXhwaXJhdGlvblRpbWU9ZDtyZXR1cm59fWEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWQ7YS5maW5pc2hlZFdvcms9Yn19XG5mdW5jdGlvbiB3ZyhhLGIpe3ZhciBjO2E6e0xnJiYhT2c/dChcIjI2M1wiKTp2b2lkIDA7Zm9yKGM9YS5yZXR1cm47bnVsbCE9PWM7KXtzd2l0Y2goYy50YWcpe2Nhc2UgMjpjYXNlIDM6dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2h8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PUZnfHwhRmcuaGFzKGQpKSl7YT1uZihiLGEpO2E9RWcoYyxhLDEpO2ZmKGMsYSk7SWYoYywxKTtjPXZvaWQgMDticmVhayBhfWJyZWFrO2Nhc2UgNTphPW5mKGIsYSk7YT1DZyhjLGEsMSk7ZmYoYyxhKTtJZihjLDEpO2M9dm9pZCAwO2JyZWFrIGF9Yz1jLnJldHVybn01PT09YS50YWcmJihjPW5mKGIsYSksYz1DZyhhLGMsMSksZmYoYSxjKSxJZihhLDEpKTtjPXZvaWQgMH1yZXR1cm4gY31cbmZ1bmN0aW9uIEhmKGEsYil7MCE9PUtnP2E9S2c6TGc/YT1PZz8xOk86Yi5tb2RlJjE/KGE9VWc/MisxMCooKChhLTIrMTUpLzEwfDApKzEpOjIrMjUqKCgoYS0yKzUwMCkvMjV8MCkrMSksbnVsbCE9PU1nJiZhPT09TyYmKGErPTEpKTphPTE7VWcmJigwPT09Vmd8fGE+VmcpJiYoVmc9YSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBJZihhLGIpe2E6e2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmIpYS5leHBpcmF0aW9uVGltZT1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoMD09PWMuZXhwaXJhdGlvblRpbWV8fGMuZXhwaXJhdGlvblRpbWU+YikmJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuO2lmKG51bGw9PT1kJiY1PT09YS50YWcpYT1hLnN0YXRlTm9kZTtlbHNle2Zvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2lmKDA9PT1kLmNoaWxkRXhwaXJhdGlvblRpbWV8fGQuY2hpbGRFeHBpcmF0aW9uVGltZT5iKWQuY2hpbGRFeHBpcmF0aW9uVGltZT1iO251bGwhPT1jJiYoMD09PWMuY2hpbGRFeHBpcmF0aW9uVGltZXx8Yy5jaGlsZEV4cGlyYXRpb25UaW1lPmIpJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmNT09PWQudGFnKXthPWQuc3RhdGVOb2RlO2JyZWFrIGF9ZD1kLnJldHVybn1hPW51bGx9fWlmKG51bGwhPT1cbmEpeyFMZyYmMCE9PU8mJmI8TyYmUGcoKTtaZShhLGIpO2lmKCFMZ3x8T2d8fE1nIT09YSl7Yj1hO2E9YS5leHBpcmF0aW9uVGltZTtpZihudWxsPT09Yi5uZXh0U2NoZWR1bGVkUm9vdCliLmV4cGlyYXRpb25UaW1lPWEsbnVsbD09PVQ/KFU9VD1iLGIubmV4dFNjaGVkdWxlZFJvb3Q9Yik6KFQ9VC5uZXh0U2NoZWR1bGVkUm9vdD1iLFQubmV4dFNjaGVkdWxlZFJvb3Q9VSk7ZWxzZSBpZihjPWIuZXhwaXJhdGlvblRpbWUsMD09PWN8fGE8YyliLmV4cGlyYXRpb25UaW1lPWE7Vnx8KFc/V2cmJihZPWIsWj0xLFhnKGIsMSwhMCkpOjE9PT1hP1lnKDEsbnVsbCk6WmcoYixhKSl9JGc+YWgmJigkZz0wLHQoXCIxODVcIikpfX1mdW5jdGlvbiBiaChhLGIsYyxkLGUpe3ZhciBmPUtnO0tnPTE7dHJ5e3JldHVybiBhKGIsYyxkLGUpfWZpbmFsbHl7S2c9Zn19XG52YXIgVT1udWxsLFQ9bnVsbCxjaD0wLGRoPXZvaWQgMCxWPSExLFk9bnVsbCxaPTAsVmc9MCxlaD0hMSxmaD0hMSxnaD1udWxsLGhoPW51bGwsVz0hMSxXZz0hMSxVZz0hMSxpaD1udWxsLGpoPWJhLnVuc3RhYmxlX25vdygpLGtoPShqaC8xMHwwKSsyLGxoPWtoLGFoPTUwLCRnPTAsbWg9bnVsbCxuaD0xO2Z1bmN0aW9uIG9oKCl7a2g9KChiYS51bnN0YWJsZV9ub3coKS1qaCkvMTB8MCkrMn1mdW5jdGlvbiBaZyhhLGIpe2lmKDAhPT1jaCl7aWYoYj5jaClyZXR1cm47bnVsbCE9PWRoJiZiYS51bnN0YWJsZV9jYW5jZWxTY2hlZHVsZWRXb3JrKGRoKX1jaD1iO2E9YmEudW5zdGFibGVfbm93KCktamg7ZGg9YmEudW5zdGFibGVfc2NoZWR1bGVXb3JrKHBoLHt0aW1lb3V0OjEwKihiLTIpLWF9KX1mdW5jdGlvbiBHZigpe2lmKFYpcmV0dXJuIGxoO3FoKCk7aWYoMD09PVp8fDEwNzM3NDE4MjM9PT1aKW9oKCksbGg9a2g7cmV0dXJuIGxofVxuZnVuY3Rpb24gcWgoKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09VClmb3IodmFyIGM9VCxkPVU7bnVsbCE9PWQ7KXt2YXIgZT1kLmV4cGlyYXRpb25UaW1lO2lmKDA9PT1lKXtudWxsPT09Y3x8bnVsbD09PVQ/dChcIjI0NFwiKTp2b2lkIDA7aWYoZD09PWQubmV4dFNjaGVkdWxlZFJvb3Qpe1U9VD1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09VSlVPWU9ZC5uZXh0U2NoZWR1bGVkUm9vdCxULm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PVQpe1Q9YztULm5leHRTY2hlZHVsZWRSb290PVU7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtpZigwPT09YXx8ZTxhKWE9ZSxiPWQ7aWYoZD09PVQpYnJlYWs7aWYoMT09PWEpYnJlYWs7XG5jPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX1ZPWI7Wj1hfWZ1bmN0aW9uIHBoKGEpe2lmKGEuZGlkVGltZW91dCYmbnVsbCE9PVUpe29oKCk7dmFyIGI9VTtkb3t2YXIgYz1iLmV4cGlyYXRpb25UaW1lOzAhPT1jJiZraD49YyYmKGIubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249a2gpO2I9Yi5uZXh0U2NoZWR1bGVkUm9vdH13aGlsZShiIT09VSl9WWcoMCxhKX1cbmZ1bmN0aW9uIFlnKGEsYil7aGg9YjtxaCgpO2lmKG51bGwhPT1oaClmb3Iob2goKSxsaD1raDtudWxsIT09WSYmMCE9PVomJigwPT09YXx8YT49WikmJighZWh8fGtoPj1aKTspWGcoWSxaLGtoPj1aKSxxaCgpLG9oKCksbGg9a2g7ZWxzZSBmb3IoO251bGwhPT1ZJiYwIT09WiYmKDA9PT1hfHxhPj1aKTspWGcoWSxaLCEwKSxxaCgpO251bGwhPT1oaCYmKGNoPTAsZGg9bnVsbCk7MCE9PVomJlpnKFksWik7aGg9bnVsbDtlaD0hMTskZz0wO21oPW51bGw7aWYobnVsbCE9PWloKWZvcihhPWloLGloPW51bGwsYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO3RyeXtjLl9vbkNvbXBsZXRlKCl9Y2F0Y2goZCl7Zmh8fChmaD0hMCxnaD1kKX19aWYoZmgpdGhyb3cgYT1naCxnaD1udWxsLGZoPSExLGE7fVxuZnVuY3Rpb24gWGcoYSxiLGMpe1Y/dChcIjI0NVwiKTp2b2lkIDA7Vj0hMDtpZihudWxsPT09aGh8fGMpe3ZhciBkPWEuZmluaXNoZWRXb3JrO251bGwhPT1kP3JoKGEsZCxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxTZyhhLCExLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJnJoKGEsZCxiKSl9ZWxzZSBkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kP3JoKGEsZCxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxTZyhhLCEwLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJihUZygpP2EuZmluaXNoZWRXb3JrPWQ6cmgoYSxkLGIpKSk7Vj0hMX1cbmZ1bmN0aW9uIHJoKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPD1jJiYobnVsbD09PWloP2loPVtkXTppaC5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLmV4cGlyYXRpb25UaW1lPTA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7YT09PW1oPyRnKys6KG1oPWEsJGc9MCk7T2c9TGc9ITA7YS5jdXJyZW50PT09Yj90KFwiMTc3XCIpOnZvaWQgMDtjPWEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1jP3QoXCIyNjFcIik6dm9pZCAwO2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7ZD1iLmV4cGlyYXRpb25UaW1lO3ZhciBlPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtkPTA9PT1kfHwwIT09ZSYmZTxkP2U6ZDthLmRpZEVycm9yPSExOzA9PT1kPyhhLmVhcmxpZXN0UGVuZGluZ1RpbWU9MCxhLmxhdGVzdFBlbmRpbmdUaW1lPTAsYS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFN1c3BlbmRlZFRpbWU9XG4wLGEubGF0ZXN0UGluZ2VkVGltZT0wKTooZT1hLmxhdGVzdFBlbmRpbmdUaW1lLDAhPT1lJiYoZTxkP2EuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lPTA6YS5lYXJsaWVzdFBlbmRpbmdUaW1lPGQmJihhLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZSkpLGU9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsMD09PWU/WmUoYSxkKTpkPmEubGF0ZXN0U3VzcGVuZGVkVGltZT8oYS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFBpbmdlZFRpbWU9MCxaZShhLGQpKTpkPGUmJlplKGEsZCkpOyRlKDAsYSk7SWcuY3VycmVudD1udWxsOzE8Yi5lZmZlY3RUYWc/bnVsbCE9PWIubGFzdEVmZmVjdD8oYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YixkPWIuZmlyc3RFZmZlY3QpOmQ9YjpkPWIuZmlyc3RFZmZlY3Q7eGU9R2Q7ZT1UZCgpO2lmKFVkKGUpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBlKXZhciBmPVxue3N0YXJ0OmUuc2VsZWN0aW9uU3RhcnQsZW5kOmUuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2Y9KGY9ZS5vd25lckRvY3VtZW50KSYmZi5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBnPWYuZ2V0U2VsZWN0aW9uJiZmLmdldFNlbGVjdGlvbigpO2lmKGcmJjAhPT1nLnJhbmdlQ291bnQpe2Y9Zy5hbmNob3JOb2RlO3ZhciBoPWcuYW5jaG9yT2Zmc2V0LGs9Zy5mb2N1c05vZGU7Zz1nLmZvY3VzT2Zmc2V0O3RyeXtmLm5vZGVUeXBlLGsubm9kZVR5cGV9Y2F0Y2goWGEpe2Y9bnVsbDticmVhayBhfXZhciBsPTAsbT0tMSxyPS0xLEE9MCxTPTAsQj1lLFA9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB2Ozspe0IhPT1mfHwwIT09aCYmMyE9PUIubm9kZVR5cGV8fChtPWwraCk7QiE9PWt8fDAhPT1nJiYzIT09Qi5ub2RlVHlwZXx8KHI9bCtnKTszPT09Qi5ub2RlVHlwZSYmKGwrPUIubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh2PUIuZmlyc3RDaGlsZCkpYnJlYWs7UD1CO0I9dn1mb3IoOzspe2lmKEI9PT1cbmUpYnJlYWsgYjtQPT09ZiYmKytBPT09aCYmKG09bCk7UD09PWsmJisrUz09PWcmJihyPWwpO2lmKG51bGwhPT0odj1CLm5leHRTaWJsaW5nKSlicmVhaztCPVA7UD1CLnBhcmVudE5vZGV9Qj12fWY9LTE9PT1tfHwtMT09PXI/bnVsbDp7c3RhcnQ6bSxlbmQ6cn19ZWxzZSBmPW51bGx9Zj1mfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBmPW51bGw7eWU9e2ZvY3VzZWRFbGVtOmUsc2VsZWN0aW9uUmFuZ2U6Zn07R2Q9ITE7Zm9yKFE9ZDtudWxsIT09UTspe2U9ITE7Zj12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVE7KXtpZihRLmVmZmVjdFRhZyYyNTYpe3ZhciBwPVEuYWx0ZXJuYXRlO2E6c3dpdGNoKGg9USxoLnRhZyl7Y2FzZSAyOmNhc2UgMzppZihoLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1wKXt2YXIgdT1wLm1lbW9pemVkUHJvcHMseD1wLm1lbW9pemVkU3RhdGUsUj1oLnN0YXRlTm9kZTtSLnByb3BzPWgubWVtb2l6ZWRQcm9wcztSLnN0YXRlPWgubWVtb2l6ZWRTdGF0ZTt2YXIgeWg9Ui5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSh1LFxueCk7Ui5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT15aH1icmVhayBhO2Nhc2UgNTpjYXNlIDc6Y2FzZSA4OmNhc2UgNjpicmVhayBhO2RlZmF1bHQ6dChcIjE2M1wiKX19UT1RLm5leHRFZmZlY3R9fWNhdGNoKFhhKXtlPSEwLGY9WGF9ZSYmKG51bGw9PT1RP3QoXCIxNzhcIik6dm9pZCAwLHdnKFEsZiksbnVsbCE9PVEmJihRPVEubmV4dEVmZmVjdCkpfWZvcihRPWQ7bnVsbCE9PVE7KXtwPSExO3U9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1ROyl7dmFyIHc9US5lZmZlY3RUYWc7dyYxNiYmb2UoUS5zdGF0ZU5vZGUsXCJcIik7aWYodyYxMjgpe3ZhciB5PVEuYWx0ZXJuYXRlO2lmKG51bGwhPT15KXt2YXIgcT15LnJlZjtudWxsIT09cSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBxP3EobnVsbCk6cS5jdXJyZW50PW51bGwpfX1zd2l0Y2godyYxNCl7Y2FzZSAyOkFnKFEpO1EuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6QWcoUSk7US5lZmZlY3RUYWcmPS0zO0JnKFEuYWx0ZXJuYXRlLFxuUSk7YnJlYWs7Y2FzZSA0OkJnKFEuYWx0ZXJuYXRlLFEpO2JyZWFrO2Nhc2UgODp4PVEseWcoeCkseC5yZXR1cm49bnVsbCx4LmNoaWxkPW51bGwseC5hbHRlcm5hdGUmJih4LmFsdGVybmF0ZS5jaGlsZD1udWxsLHguYWx0ZXJuYXRlLnJldHVybj1udWxsKX1RPVEubmV4dEVmZmVjdH19Y2F0Y2goWGEpe3A9ITAsdT1YYX1wJiYobnVsbD09PVE/dChcIjE3OFwiKTp2b2lkIDAsd2coUSx1KSxudWxsIT09USYmKFE9US5uZXh0RWZmZWN0KSl9cT15ZTt5PVRkKCk7dz1xLmZvY3VzZWRFbGVtO3U9cS5zZWxlY3Rpb25SYW5nZTtpZih5IT09dyYmdyYmdy5vd25lckRvY3VtZW50JiZTZCh3Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHcpKXtudWxsIT09dSYmVWQodykmJih5PXUuc3RhcnQscT11LmVuZCx2b2lkIDA9PT1xJiYocT15KSxcInNlbGVjdGlvblN0YXJ0XCJpbiB3Pyh3LnNlbGVjdGlvblN0YXJ0PXksdy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4ocSx3LnZhbHVlLmxlbmd0aCkpOlxuKHA9dy5vd25lckRvY3VtZW50fHxkb2N1bWVudCx5PShwJiZwLmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLHg9dy50ZXh0Q29udGVudC5sZW5ndGgscT1NYXRoLm1pbih1LnN0YXJ0LHgpLHU9dm9pZCAwPT09dS5lbmQ/cTpNYXRoLm1pbih1LmVuZCx4KSwheS5leHRlbmQmJnE+dSYmKHg9dSx1PXEscT14KSx4PVJkKHcscSksUj1SZCh3LHUpLHgmJlImJigxIT09eS5yYW5nZUNvdW50fHx5LmFuY2hvck5vZGUhPT14Lm5vZGV8fHkuYW5jaG9yT2Zmc2V0IT09eC5vZmZzZXR8fHkuZm9jdXNOb2RlIT09Ui5ub2RlfHx5LmZvY3VzT2Zmc2V0IT09Ui5vZmZzZXQpJiYocD1wLmNyZWF0ZVJhbmdlKCkscC5zZXRTdGFydCh4Lm5vZGUseC5vZmZzZXQpLHkucmVtb3ZlQWxsUmFuZ2VzKCkscT51Pyh5LmFkZFJhbmdlKHApLHkuZXh0ZW5kKFIubm9kZSxSLm9mZnNldCkpOihwLnNldEVuZChSLm5vZGUsUi5vZmZzZXQpLHkuYWRkUmFuZ2UocCkpKSkpO3k9W107Zm9yKHE9dztxPVxucS5wYXJlbnROb2RlOykxPT09cS5ub2RlVHlwZSYmeS5wdXNoKHtlbGVtZW50OnEsbGVmdDpxLnNjcm9sbExlZnQsdG9wOnEuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZm9jdXMmJncuZm9jdXMoKTtmb3Iodz0wO3c8eS5sZW5ndGg7dysrKXE9eVt3XSxxLmVsZW1lbnQuc2Nyb2xsTGVmdD1xLmxlZnQscS5lbGVtZW50LnNjcm9sbFRvcD1xLnRvcH15ZT1udWxsO0dkPSEheGU7eGU9bnVsbDthLmN1cnJlbnQ9Yjtmb3IoUT1kO251bGwhPT1ROyl7ZD0hMTt3PXZvaWQgMDt0cnl7Zm9yKHk9YztudWxsIT09UTspe3ZhciBTYT1RLmVmZmVjdFRhZztpZihTYSYzNil7dmFyIG9jPVEuYWx0ZXJuYXRlO3E9UTtwPXk7c3dpdGNoKHEudGFnKXtjYXNlIDI6Y2FzZSAzOnZhciBYPXEuc3RhdGVOb2RlO2lmKHEuZWZmZWN0VGFnJjQpaWYobnVsbD09PW9jKVgucHJvcHM9cS5tZW1vaXplZFByb3BzLFguc3RhdGU9cS5tZW1vaXplZFN0YXRlLFguY29tcG9uZW50RGlkTW91bnQoKTtcbmVsc2V7dmFyIEloPW9jLm1lbW9pemVkUHJvcHMsSmg9b2MubWVtb2l6ZWRTdGF0ZTtYLnByb3BzPXEubWVtb2l6ZWRQcm9wcztYLnN0YXRlPXEubWVtb2l6ZWRTdGF0ZTtYLmNvbXBvbmVudERpZFVwZGF0ZShJaCxKaCxYLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIga2c9cS51cGRhdGVRdWV1ZTtudWxsIT09a2cmJihYLnByb3BzPXEubWVtb2l6ZWRQcm9wcyxYLnN0YXRlPXEubWVtb2l6ZWRTdGF0ZSxsZihxLGtnLFgscCkpO2JyZWFrO2Nhc2UgNTp2YXIgbGc9cS51cGRhdGVRdWV1ZTtpZihudWxsIT09bGcpe3U9bnVsbDtpZihudWxsIT09cS5jaGlsZClzd2l0Y2gocS5jaGlsZC50YWcpe2Nhc2UgNzp1PXEuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMjpjYXNlIDM6dT1xLmNoaWxkLnN0YXRlTm9kZX1sZihxLGxnLHUscCl9YnJlYWs7Y2FzZSA3OnZhciBLaD1xLnN0YXRlTm9kZTtudWxsPT09b2MmJnEuZWZmZWN0VGFnJjQmJnplKHEudHlwZSxxLm1lbW9pemVkUHJvcHMpJiZcbktoLmZvY3VzKCk7YnJlYWs7Y2FzZSA4OmJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDE1OmJyZWFrO2Nhc2UgMTY6YnJlYWs7ZGVmYXVsdDp0KFwiMTYzXCIpfX1pZihTYSYxMjgpe3ZhciBBYz1RLnJlZjtpZihudWxsIT09QWMpe3ZhciBtZz1RLnN0YXRlTm9kZTtzd2l0Y2goUS50YWcpe2Nhc2UgNzp2YXIgUGQ9bWc7YnJlYWs7ZGVmYXVsdDpQZD1tZ31cImZ1bmN0aW9uXCI9PT10eXBlb2YgQWM/QWMoUGQpOkFjLmN1cnJlbnQ9UGR9fXZhciBMaD1RLm5leHRFZmZlY3Q7US5uZXh0RWZmZWN0PW51bGw7UT1MaH19Y2F0Y2goWGEpe2Q9ITAsdz1YYX1kJiYobnVsbD09PVE/dChcIjE3OFwiKTp2b2lkIDAsd2coUSx3KSxudWxsIT09USYmKFE9US5uZXh0RWZmZWN0KSl9TGc9T2c9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIE9lJiZPZShiLnN0YXRlTm9kZSk7U2E9Yi5leHBpcmF0aW9uVGltZTtiPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtiPTA9PT1TYXx8MCE9PWImJmI8U2E/YjpTYTswPT09YiYmKEZnPVxubnVsbCk7YS5leHBpcmF0aW9uVGltZT1iO2EuZmluaXNoZWRXb3JrPW51bGx9ZnVuY3Rpb24gVGcoKXtyZXR1cm4gZWg/ITA6bnVsbD09PWhofHxoaC50aW1lUmVtYWluaW5nKCk+bmg/ITE6ZWg9ITB9ZnVuY3Rpb24gRGcoYSl7bnVsbD09PVk/dChcIjI0NlwiKTp2b2lkIDA7WS5leHBpcmF0aW9uVGltZT0wO2ZofHwoZmg9ITAsZ2g9YSl9ZnVuY3Rpb24gc2goYSxiKXt2YXIgYz1XO1c9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KFc9Yyl8fFZ8fFlnKDEsbnVsbCl9fWZ1bmN0aW9uIHRoKGEsYil7aWYoVyYmIVdnKXtXZz0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXZz0hMX19cmV0dXJuIGEoYil9ZnVuY3Rpb24gdWgoYSxiLGMpe2lmKFVnKXJldHVybiBhKGIsYyk7V3x8Vnx8MD09PVZnfHwoWWcoVmcsbnVsbCksVmc9MCk7dmFyIGQ9VWcsZT1XO1c9VWc9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXtVZz1kLChXPWUpfHxWfHxZZygxLG51bGwpfX1cbmZ1bmN0aW9uIHZoKGEpe2lmKCFhKXJldHVybiBGZTthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjthOnsyIT09amQoYSl8fDIhPT1hLnRhZyYmMyE9PWEudGFnP3QoXCIxNzBcIik6dm9pZCAwO3ZhciBiPWE7ZG97c3dpdGNoKGIudGFnKXtjYXNlIDU6Yj1iLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGE7Y2FzZSAyOmlmKEsoYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfWJyZWFrO2Nhc2UgMzppZihLKGIudHlwZS5fcmVhY3RSZXN1bHQpKXtiPWIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGF9fWI9Yi5yZXR1cm59d2hpbGUobnVsbCE9PWIpO3QoXCIxNzFcIik7Yj12b2lkIDB9aWYoMj09PWEudGFnKXt2YXIgYz1hLnR5cGU7aWYoSyhjKSlyZXR1cm4gTGUoYSxjLGIpfWVsc2UgaWYoMz09PWEudGFnJiYoYz1hLnR5cGUuX3JlYWN0UmVzdWx0LEsoYykpKXJldHVybiBMZShhLFxuYyxiKTtyZXR1cm4gYn1mdW5jdGlvbiB3aChhLGIsYyxkLGUpe3ZhciBmPWIuY3VycmVudDtjPXZoKGMpO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9ZTtlPWRmKGQpO2UucGF5bG9hZD17ZWxlbWVudDphfTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtmZihmLGUpO0lmKGYsZCk7cmV0dXJuIGR9ZnVuY3Rpb24geGgoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9R2YoKTtlPUhmKGYsZSk7cmV0dXJuIHdoKGEsYixjLGUsZCl9ZnVuY3Rpb24gemgoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDc6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIEFoKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6YWMsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5GYj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkRjKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1OYShkKTtlP3ZvaWQgMDp0KFwiOTBcIik7WGIoZCk7RGMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhlKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZlZShhLCEhYy5tdWx0aXBsZSxiLCExKX19O1xuZnVuY3Rpb24gQmgoYSl7dmFyIGI9MisyNSooKChHZigpLTIrNTAwKS8yNXwwKSsxKTtiPD1KZyYmKGI9SmcrMSk7dGhpcy5fZXhwaXJhdGlvblRpbWU9Smc9Yjt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfUJoLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOnQoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBDaDt3aChhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5CaC5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21wbGV0ZSlhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5CaC5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGI9YS5maXJzdEJhdGNoO3RoaXMuX2RlZmVyJiZudWxsIT09Yj92b2lkIDA6dChcIjI1MVwiKTtpZih0aGlzLl9oYXNDaGlsZHJlbil7dmFyIGM9dGhpcy5fZXhwaXJhdGlvblRpbWU7aWYoYiE9PXRoaXMpe3RoaXMuX2hhc0NoaWxkcmVuJiYoYz10aGlzLl9leHBpcmF0aW9uVGltZT1iLl9leHBpcmF0aW9uVGltZSx0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbikpO2Zvcih2YXIgZD1udWxsLGU9YjtlIT09dGhpczspZD1lLGU9ZS5fbmV4dDtudWxsPT09ZD90KFwiMjUxXCIpOnZvaWQgMDtkLl9uZXh0PWUuX25leHQ7dGhpcy5fbmV4dD1iO2EuZmlyc3RCYXRjaD10aGlzfXRoaXMuX2RlZmVyPSExO2I9YztWP3QoXCIyNTNcIik6dm9pZCAwO1k9YTtaPWI7WGcoYSxiLCEwKTtZZygxLG51bGwpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09XG5iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1udWxsLHRoaXMuX2RlZmVyPSExfTtCaC5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gQ2goKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1DaC5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuQ2gucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/dChcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07XG5mdW5jdGlvbiBEaChhLGIsYyl7Yj1uZXcgU2UoNSxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwsZWFybGllc3RQZW5kaW5nVGltZTowLGxhdGVzdFBlbmRpbmdUaW1lOjAsZWFybGllc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFBpbmdlZFRpbWU6MCxkaWRFcnJvcjohMSxwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6MCxmaW5pc2hlZFdvcms6bnVsbCx0aW1lb3V0SGFuZGxlOi0xLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjowLGV4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3RoaXMuX2ludGVybmFsUm9vdD1iLnN0YXRlTm9kZT1hfVxuRGgucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBDaDtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7eGgoYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtEaC5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgQ2g7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO3hoKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307RGgucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IENoO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTt4aChiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xuRGgucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IEJoKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gRWgoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfUxiPXNoO01iPXVoO05iPWZ1bmN0aW9uKCl7Vnx8MD09PVZnfHwoWWcoVmcsbnVsbCksVmc9MCl9O1xuZnVuY3Rpb24gRmgoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBEaChhLCExLGIpfVxuZnVuY3Rpb24gR2goYSxiLGMsZCxlKXtFaChjKT92b2lkIDA6dChcIjIwMFwiKTt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPXpoKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1udWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9RmgoYyxkKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9emgoZi5faW50ZXJuYWxSb290KTtoLmNhbGwoYSl9fXRoKGZ1bmN0aW9uKCl7bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX0pfXJldHVybiB6aChmLl9pbnRlcm5hbFJvb3QpfVxuZnVuY3Rpb24gSGgoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtFaChiKT92b2lkIDA6dChcIjIwMFwiKTtyZXR1cm4gQWgoYSxiLG51bGwsYyl9XG52YXIgTWg9e2NyZWF0ZVBvcnRhbDpIaCxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2b2lkIDA9PT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP3QoXCIxODhcIik6dChcIjI2OFwiLE9iamVjdC5rZXlzKGEpKSk7YT1tZChiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBHaChudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gR2gobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe251bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcj90KFwiMzhcIik6dm9pZCAwO3JldHVybiBHaChhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtFaChhKT9cbnZvaWQgMDp0KFwiNDBcIik7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8odGgoZnVuY3Rpb24oKXtHaChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiBIaC5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6c2gsdW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzOnVoLGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe1Y/dChcIjE4N1wiKTp2b2lkIDA7dmFyIGM9VztXPSEwO3RyeXtyZXR1cm4gYmgoYSxiKX1maW5hbGx5e1c9YyxZZygxLG51bGwpfX0sdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmZ1bmN0aW9uKGEpe3ZhciBiPVc7Vz0hMDt0cnl7YmgoYSl9ZmluYWxseXsoVz1iKXx8Vnx8WWcoMSxudWxsKX19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudHM6W0xhLFxuTWEsTmEsRWEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lLHFhLFVhLGZ1bmN0aW9uKGEpe3phKGEsVGEpfSxKYixLYixJZCxHYV19LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6ZnVuY3Rpb24oYSxiKXtFaChhKT92b2lkIDA6dChcIjI3OFwiKTtyZXR1cm4gbmV3IERoKGEsITAsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfX07KGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFJlKG4oe30sYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1tZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfX0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpLYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjUuMlwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO1xudmFyIE5oPXtkZWZhdWx0Ok1ofSxPaD1OaCYmTWh8fE5oO21vZHVsZS5leHBvcnRzPU9oLmRlZmF1bHR8fE9oO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICcuL3JlYWN0LXN3aXBlJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCcuL3JlYWN0LXN3aXBlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0U3dpcGUpO1xuICAgIGdsb2JhbC5pbmRleCA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0U3dpcGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3RTd2lwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdFN3aXBlKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZXhwb3J0cy5kZWZhdWx0ID0gX3JlYWN0U3dpcGUyLmRlZmF1bHQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMpO1xuICAgIGdsb2JhbC5yZWFjdFN3aXBlID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuICBleHBvcnRzLnNldEhhc1N1cHBvcnRUb0NhcHR1cmVPcHRpb24gPSBzZXRIYXNTdXBwb3J0VG9DYXB0dXJlT3B0aW9uO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykge1xuICAgIHZhciB0YXJnZXQgPSB7fTtcblxuICAgIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgICBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7XG4gICAgICB0YXJnZXRbaV0gPSBvYmpbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBzdXBwb3J0c0NhcHR1cmVPcHRpb24gPSBmYWxzZTtcbiAgZnVuY3Rpb24gc2V0SGFzU3VwcG9ydFRvQ2FwdHVyZU9wdGlvbihoYXNTdXBwb3J0KSB7XG4gICAgc3VwcG9ydHNDYXB0dXJlT3B0aW9uID0gaGFzU3VwcG9ydDtcbiAgfVxuXG4gIHRyeSB7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2NhcHR1cmUnLCB7IGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBzZXRIYXNTdXBwb3J0VG9DYXB0dXJlT3B0aW9uKHRydWUpO1xuICAgICAgfSB9KSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxuICBmdW5jdGlvbiBnZXRTYWZlRXZlbnRIYW5kbGVyT3B0cygpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogeyBjYXB0dXJlOiB0cnVlIH07XG5cbiAgICByZXR1cm4gc3VwcG9ydHNDYXB0dXJlT3B0aW9uID8gb3B0aW9ucyA6IG9wdGlvbnMuY2FwdHVyZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbZ2V0UG9zaXRpb24gcmV0dXJucyBhIHBvc2l0aW9uIGVsZW1lbnQgdGhhdCB3b3JrcyBmb3IgbW91c2Ugb3IgdG91Y2ggZXZlbnRzXVxuICAgKiBAcGFyYW0gIHtbRXZlbnRdfSBldmVudCBbdGhlIHJlY2VpdmVkIGV2ZW50XVxuICAgKiBAcmV0dXJuIHtbT2JqZWN0XX0gICAgICBbeCBhbmQgeSBjb29yZHNdXG4gICAqL1xuICBmdW5jdGlvbiBnZXRQb3NpdGlvbihldmVudCkge1xuICAgIGlmICgndG91Y2hlcycgaW4gZXZlbnQpIHtcbiAgICAgIHZhciBfZXZlbnQkdG91Y2hlcyQgPSBldmVudC50b3VjaGVzWzBdLFxuICAgICAgICAgIHBhZ2VYID0gX2V2ZW50JHRvdWNoZXMkLnBhZ2VYLFxuICAgICAgICAgIHBhZ2VZID0gX2V2ZW50JHRvdWNoZXMkLnBhZ2VZO1xuXG4gICAgICByZXR1cm4geyB4OiBwYWdlWCwgeTogcGFnZVkgfTtcbiAgICB9XG5cbiAgICB2YXIgc2NyZWVuWCA9IGV2ZW50LnNjcmVlblgsXG4gICAgICAgIHNjcmVlblkgPSBldmVudC5zY3JlZW5ZO1xuXG4gICAgcmV0dXJuIHsgeDogc2NyZWVuWCwgeTogc2NyZWVuWSB9O1xuICB9XG5cbiAgdmFyIFJlYWN0U3dpcGUgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhSZWFjdFN3aXBlLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFJlYWN0U3dpcGUoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlYWN0U3dpcGUpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IFJlYWN0U3dpcGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZWFjdFN3aXBlKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICAgIF90aGlzLl9oYW5kbGVTd2lwZVN0YXJ0ID0gX3RoaXMuX2hhbmRsZVN3aXBlU3RhcnQuYmluZChfdGhpcyk7XG4gICAgICBfdGhpcy5faGFuZGxlU3dpcGVNb3ZlID0gX3RoaXMuX2hhbmRsZVN3aXBlTW92ZS5iaW5kKF90aGlzKTtcbiAgICAgIF90aGlzLl9oYW5kbGVTd2lwZUVuZCA9IF90aGlzLl9oYW5kbGVTd2lwZUVuZC5iaW5kKF90aGlzKTtcblxuICAgICAgX3RoaXMuX29uTW91c2VEb3duID0gX3RoaXMuX29uTW91c2VEb3duLmJpbmQoX3RoaXMpO1xuICAgICAgX3RoaXMuX29uTW91c2VNb3ZlID0gX3RoaXMuX29uTW91c2VNb3ZlLmJpbmQoX3RoaXMpO1xuICAgICAgX3RoaXMuX29uTW91c2VVcCA9IF90aGlzLl9vbk1vdXNlVXAuYmluZChfdGhpcyk7XG5cbiAgICAgIF90aGlzLl9zZXRTd2lwZXJSZWYgPSBfdGhpcy5fc2V0U3dpcGVyUmVmLmJpbmQoX3RoaXMpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhSZWFjdFN3aXBlLCBbe1xuICAgICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy5zd2lwZXIpIHtcbiAgICAgICAgICB0aGlzLnN3aXBlci5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLl9oYW5kbGVTd2lwZU1vdmUsIGdldFNhZmVFdmVudEhhbmRsZXJPcHRzKHtcbiAgICAgICAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICAgICAgICBwYXNzaXZlOiBmYWxzZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3dpcGVyKSB7XG4gICAgICAgICAgdGhpcy5zd2lwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5faGFuZGxlU3dpcGVNb3ZlLCBnZXRTYWZlRXZlbnRIYW5kbGVyT3B0cyh7XG4gICAgICAgICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdfb25Nb3VzZURvd24nLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbk1vdXNlRG93bihldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMucHJvcHMuYWxsb3dNb3VzZUV2ZW50cykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubW91c2VEb3duID0gdHJ1ZTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5fb25Nb3VzZVVwKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5fb25Nb3VzZU1vdmUpO1xuXG4gICAgICAgIHRoaXMuX2hhbmRsZVN3aXBlU3RhcnQoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ19vbk1vdXNlTW92ZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX29uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5tb3VzZURvd24pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9oYW5kbGVTd2lwZU1vdmUoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ19vbk1vdXNlVXAnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbk1vdXNlVXAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZTtcblxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5fb25Nb3VzZVVwKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5fb25Nb3VzZU1vdmUpO1xuXG4gICAgICAgIHRoaXMuX2hhbmRsZVN3aXBlRW5kKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdfaGFuZGxlU3dpcGVTdGFydCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZVN3aXBlU3RhcnQoZXZlbnQpIHtcbiAgICAgICAgdmFyIF9nZXRQb3NpdGlvbiA9IGdldFBvc2l0aW9uKGV2ZW50KSxcbiAgICAgICAgICAgIHggPSBfZ2V0UG9zaXRpb24ueCxcbiAgICAgICAgICAgIHkgPSBfZ2V0UG9zaXRpb24ueTtcblxuICAgICAgICB0aGlzLm1vdmVTdGFydCA9IHsgeDogeCwgeTogeSB9O1xuICAgICAgICB0aGlzLnByb3BzLm9uU3dpcGVTdGFydChldmVudCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnX2hhbmRsZVN3aXBlTW92ZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZVN3aXBlTW92ZShldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMubW92ZVN0YXJ0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9nZXRQb3NpdGlvbjIgPSBnZXRQb3NpdGlvbihldmVudCksXG4gICAgICAgICAgICB4ID0gX2dldFBvc2l0aW9uMi54LFxuICAgICAgICAgICAgeSA9IF9nZXRQb3NpdGlvbjIueTtcblxuICAgICAgICB2YXIgZGVsdGFYID0geCAtIHRoaXMubW92ZVN0YXJ0Lng7XG4gICAgICAgIHZhciBkZWx0YVkgPSB5IC0gdGhpcy5tb3ZlU3RhcnQueTtcbiAgICAgICAgdGhpcy5tb3ZpbmcgPSB0cnVlO1xuXG4gICAgICAgIC8vIGhhbmRsaW5nIHRoZSByZXNwb25zYWJpbGl0eSBvZiBjYW5jZWxsaW5nIHRoZSBzY3JvbGwgdG9cbiAgICAgICAgLy8gdGhlIGNvbXBvbmVudCBoYW5kbGluZyB0aGUgZXZlbnRcbiAgICAgICAgdmFyIHNob3VsZFByZXZlbnREZWZhdWx0ID0gdGhpcy5wcm9wcy5vblN3aXBlTW92ZSh7XG4gICAgICAgICAgeDogZGVsdGFYLFxuICAgICAgICAgIHk6IGRlbHRhWVxuICAgICAgICB9LCBldmVudCk7XG5cbiAgICAgICAgaWYgKHNob3VsZFByZXZlbnREZWZhdWx0ICYmIGV2ZW50LmNhbmNlbGFibGUpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tb3ZlUG9zaXRpb24gPSB7IGRlbHRhWDogZGVsdGFYLCBkZWx0YVk6IGRlbHRhWSB9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ19oYW5kbGVTd2lwZUVuZCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZVN3aXBlRW5kKGV2ZW50KSB7XG4gICAgICAgIHRoaXMucHJvcHMub25Td2lwZUVuZChldmVudCk7XG5cbiAgICAgICAgdmFyIHRvbGVyYW5jZSA9IHRoaXMucHJvcHMudG9sZXJhbmNlO1xuXG5cbiAgICAgICAgaWYgKHRoaXMubW92aW5nICYmIHRoaXMubW92ZVBvc2l0aW9uKSB7XG4gICAgICAgICAgaWYgKHRoaXMubW92ZVBvc2l0aW9uLmRlbHRhWCA8IC10b2xlcmFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25Td2lwZUxlZnQoMSwgZXZlbnQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tb3ZlUG9zaXRpb24uZGVsdGFYID4gdG9sZXJhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uU3dpcGVSaWdodCgxLCBldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLm1vdmVQb3NpdGlvbi5kZWx0YVkgPCAtdG9sZXJhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uU3dpcGVVcCgxLCBldmVudCk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1vdmVQb3NpdGlvbi5kZWx0YVkgPiB0b2xlcmFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25Td2lwZURvd24oMSwgZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubW92ZVN0YXJ0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5tb3ZpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5tb3ZlUG9zaXRpb24gPSBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ19zZXRTd2lwZXJSZWYnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRTd2lwZXJSZWYobm9kZSkge1xuICAgICAgICB0aGlzLnN3aXBlciA9IG5vZGU7XG4gICAgICAgIHRoaXMucHJvcHMuaW5uZXJSZWYobm9kZSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgdGFnTmFtZSA9IF9wcm9wcy50YWdOYW1lLFxuICAgICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgICBhbGxvd01vdXNlRXZlbnRzID0gX3Byb3BzLmFsbG93TW91c2VFdmVudHMsXG4gICAgICAgICAgICBvblN3aXBlVXAgPSBfcHJvcHMub25Td2lwZVVwLFxuICAgICAgICAgICAgb25Td2lwZURvd24gPSBfcHJvcHMub25Td2lwZURvd24sXG4gICAgICAgICAgICBvblN3aXBlTGVmdCA9IF9wcm9wcy5vblN3aXBlTGVmdCxcbiAgICAgICAgICAgIG9uU3dpcGVSaWdodCA9IF9wcm9wcy5vblN3aXBlUmlnaHQsXG4gICAgICAgICAgICBvblN3aXBlU3RhcnQgPSBfcHJvcHMub25Td2lwZVN0YXJ0LFxuICAgICAgICAgICAgb25Td2lwZU1vdmUgPSBfcHJvcHMub25Td2lwZU1vdmUsXG4gICAgICAgICAgICBvblN3aXBlRW5kID0gX3Byb3BzLm9uU3dpcGVFbmQsXG4gICAgICAgICAgICBpbm5lclJlZiA9IF9wcm9wcy5pbm5lclJlZixcbiAgICAgICAgICAgIHRvbGVyYW5jZSA9IF9wcm9wcy50b2xlcmFuY2UsXG4gICAgICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsndGFnTmFtZScsICdjbGFzc05hbWUnLCAnc3R5bGUnLCAnY2hpbGRyZW4nLCAnYWxsb3dNb3VzZUV2ZW50cycsICdvblN3aXBlVXAnLCAnb25Td2lwZURvd24nLCAnb25Td2lwZUxlZnQnLCAnb25Td2lwZVJpZ2h0JywgJ29uU3dpcGVTdGFydCcsICdvblN3aXBlTW92ZScsICdvblN3aXBlRW5kJywgJ2lubmVyUmVmJywgJ3RvbGVyYW5jZSddKTtcblxuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgdGhpcy5wcm9wcy50YWdOYW1lLFxuICAgICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICAgIHJlZjogdGhpcy5fc2V0U3dpcGVyUmVmLFxuICAgICAgICAgICAgb25Nb3VzZURvd246IHRoaXMuX29uTW91c2VEb3duLFxuICAgICAgICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLl9oYW5kbGVTd2lwZVN0YXJ0LFxuICAgICAgICAgICAgb25Ub3VjaEVuZDogdGhpcy5faGFuZGxlU3dpcGVFbmQsXG4gICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgICAgIH0sIHByb3BzKSxcbiAgICAgICAgICBjaGlsZHJlblxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBSZWFjdFN3aXBlO1xuICB9KF9yZWFjdC5Db21wb25lbnQpO1xuXG4gIFJlYWN0U3dpcGUuZGlzcGxheU5hbWUgPSAnUmVhY3RTd2lwZSc7XG4gIFJlYWN0U3dpcGUucHJvcFR5cGVzID0ge1xuICAgIHRhZ05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAgIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gICAgYWxsb3dNb3VzZUV2ZW50czogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIG9uU3dpcGVVcDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAgIG9uU3dpcGVEb3duOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gICAgb25Td2lwZUxlZnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgICBvblN3aXBlUmlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgICBvblN3aXBlU3RhcnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgICBvblN3aXBlTW92ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAgIG9uU3dpcGVFbmQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgICBpbm5lclJlZjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAgIHRvbGVyYW5jZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIuaXNSZXF1aXJlZFxuICB9O1xuICBSZWFjdFN3aXBlLmRlZmF1bHRQcm9wcyA9IHtcbiAgICB0YWdOYW1lOiAnZGl2JyxcbiAgICBhbGxvd01vdXNlRXZlbnRzOiBmYWxzZSxcbiAgICBvblN3aXBlVXA6IGZ1bmN0aW9uIG9uU3dpcGVVcCgpIHt9LFxuICAgIG9uU3dpcGVEb3duOiBmdW5jdGlvbiBvblN3aXBlRG93bigpIHt9LFxuICAgIG9uU3dpcGVMZWZ0OiBmdW5jdGlvbiBvblN3aXBlTGVmdCgpIHt9LFxuICAgIG9uU3dpcGVSaWdodDogZnVuY3Rpb24gb25Td2lwZVJpZ2h0KCkge30sXG4gICAgb25Td2lwZVN0YXJ0OiBmdW5jdGlvbiBvblN3aXBlU3RhcnQoKSB7fSxcbiAgICBvblN3aXBlTW92ZTogZnVuY3Rpb24gb25Td2lwZU1vdmUoKSB7fSxcbiAgICBvblN3aXBlRW5kOiBmdW5jdGlvbiBvblN3aXBlRW5kKCkge30sXG4gICAgaW5uZXJSZWY6IGZ1bmN0aW9uIGlubmVyUmVmKCkge30sXG5cbiAgICB0b2xlcmFuY2U6IDBcbiAgfTtcbiAgZXhwb3J0cy5kZWZhdWx0ID0gUmVhY3RTd2lwZTtcbn0pOyIsIlwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCh0KXtyZXR1cm4gdCYmXCJvYmplY3RcIj09dHlwZW9mIHQmJlwiZGVmYXVsdFwiaW4gdD90LmRlZmF1bHQ6dH1PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgUmVhY3Q9X2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSksY2xhc3NDYWxsQ2hlY2s9ZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSxpbmhlcml0cz1mdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBlKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxlJiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LGUpOnQuX19wcm90b19fPWUpfSxwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuPWZ1bmN0aW9uKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiFlfHxcIm9iamVjdFwiIT10eXBlb2YgZSYmXCJmdW5jdGlvblwiIT10eXBlb2YgZT90OmV9LEFwcENvbnRhaW5lcj1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIGNsYXNzQ2FsbENoZWNrKHRoaXMsZSkscG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLHQuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gaW5oZXJpdHMoZSx0KSxlLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oKXtyZXR1cm4gUmVhY3QuQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKX0sZX0oUmVhY3QuQ29tcG9uZW50KSxob3RfcHJvZD1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gdH19LGFyZUNvbXBvbmVudHNFcXVhbD1mdW5jdGlvbih0LGUpe3JldHVybiB0PT09ZX0sc2V0Q29uZmlnPWZ1bmN0aW9uKCl7fSxjb2xkPWZ1bmN0aW9uKHQpe3JldHVybiB0fTtleHBvcnRzLkFwcENvbnRhaW5lcj1BcHBDb250YWluZXIsZXhwb3J0cy5ob3Q9aG90X3Byb2QsZXhwb3J0cy5hcmVDb21wb25lbnRzRXF1YWw9YXJlQ29tcG9uZW50c0VxdWFsLGV4cG9ydHMuc2V0Q29uZmlnPXNldENvbmZpZyxleHBvcnRzLmNvbGQ9Y29sZDtcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgZXZhbEFsbG93ZWQgPSBmYWxzZTtcbnRyeSB7XG4gIGV2YWwoJ2V2YWxBbGxvd2VkID0gdHJ1ZScpO1xufSBjYXRjaCAoZSkge1xuICAvLyBldmFsIG5vdCBhbGxvd2VkIGR1ZSB0byBDU1Bcbn1cblxuLy8gUkhMIG5lZWRzIHNldFByb3RvdHlwZU9mIHRvIG9wZXJhdGUgQ29tcG9uZW50IGluaGVyaXRhbmNlLCBhbmQgZXZhbCB0byBwYXRjaCBtZXRob2RzXG52YXIgcGxhdGZvcm1TdXBwb3J0ZWQgPSAhIU9iamVjdC5zZXRQcm90b3R5cGVPZiAmJiBldmFsQWxsb3dlZDtcblxuaWYgKCFtb2R1bGUuaG90IHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgfHwgIXBsYXRmb3JtU3VwcG9ydGVkKSB7XG4gIGlmIChtb2R1bGUuaG90KSB7XG4gICAgLy8gd2UgYXJlIG5vdCBpbiBwcm9kIG1vZGUsIGJ1dCBSSEwgY291bGQgbm90IGJlIGFjdGl2YXRlZFxuICAgIGNvbnNvbGUud2FybignUmVhY3QtSG90LUxvYWRlZCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQnKTtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9yZWFjdC1ob3QtbG9hZGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9yZWFjdC1ob3QtbG9hZGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gX2RlZmF1bHQocG9zaXRpb24sIG1ldHJpYywgYXhpcykge1xuICB2YXIgcG9zaXRpb25QZXJjZW50ID0gcG9zaXRpb24gPT09IDAgPyBwb3NpdGlvbiA6IHBvc2l0aW9uICsgbWV0cmljO1xuICB2YXIgcG9zaXRpb25Dc3MgPSBheGlzID09PSAnaG9yaXpvbnRhbCcgPyBbcG9zaXRpb25QZXJjZW50LCAwLCAwXSA6IFswLCBwb3NpdGlvblBlcmNlbnQsIDBdO1xuICB2YXIgdHJhbnNpdGlvblByb3AgPSAndHJhbnNsYXRlM2QnO1xuICB2YXIgdHJhbnNsYXRlZFBvc2l0aW9uID0gJygnICsgcG9zaXRpb25Dc3Muam9pbignLCcpICsgJyknO1xuICByZXR1cm4gdHJhbnNpdGlvblByb3AgKyB0cmFuc2xhdGVkUG9zaXRpb247XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX3JlYWN0RWFzeVN3aXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZWFzeS1zd2lwZVwiKSk7XG5cbnZhciBfY3NzQ2xhc3NlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2Nzc0NsYXNzZXNcIikpO1xuXG52YXIgX0NTU1RyYW5zbGF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0NTU1RyYW5zbGF0ZVwiKSk7XG5cbnZhciBfVGh1bWJzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UaHVtYnNcIikpO1xuXG52YXIgX2RvY3VtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hpbXMvZG9jdW1lbnRcIikpO1xuXG52YXIgX3dpbmRvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoaW1zL3dpbmRvd1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG52YXIgZGVmYXVsdFN0YXR1c0Zvcm1hdHRlciA9IGZ1bmN0aW9uIGRlZmF1bHRTdGF0dXNGb3JtYXR0ZXIoY3VycmVudCwgdG90YWwpIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KGN1cnJlbnQsIFwiIG9mIFwiKS5jb25jYXQodG90YWwpO1xufTtcblxudmFyIGlzS2V5Ym9hcmRFdmVudCA9IGZ1bmN0aW9uIGlzS2V5Ym9hcmRFdmVudChlKSB7XG4gIHJldHVybiBlID8gZS5oYXNPd25Qcm9wZXJ0eSgna2V5JykgOiBmYWxzZTtcbn07XG5cbnZhciBDYXJvdXNlbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ2Fyb3VzZWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQ2Fyb3VzZWwpO1xuXG4gIGZ1bmN0aW9uIENhcm91c2VsKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhcm91c2VsKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInRodW1ic1JlZlwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNhcm91c2VsV3JhcHBlclJlZlwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImxpc3RSZWZcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpdGVtc1JlZlwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInRpbWVyXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2V0VGh1bWJzUmVmXCIsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBfdGhpcy50aHVtYnNSZWYgPSBub2RlO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNldENhcm91c2VsV3JhcHBlclJlZlwiLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgX3RoaXMuY2Fyb3VzZWxXcmFwcGVyUmVmID0gbm9kZTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZXRMaXN0UmVmXCIsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBfdGhpcy5saXN0UmVmID0gbm9kZTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZXRJdGVtc1JlZlwiLCBmdW5jdGlvbiAobm9kZSwgaW5kZXgpIHtcbiAgICAgIGlmICghX3RoaXMuaXRlbXNSZWYpIHtcbiAgICAgICAgX3RoaXMuaXRlbXNSZWYgPSBbXTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuaXRlbXNSZWZbaW5kZXhdID0gbm9kZTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJhdXRvUGxheVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3JlYWN0LkNoaWxkcmVuLmNvdW50KF90aGlzLnByb3BzLmNoaWxkcmVuKSA8PSAxKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY2xlYXJBdXRvUGxheSgpO1xuXG4gICAgICBfdGhpcy50aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5pbmNyZW1lbnQoKTtcbiAgICAgIH0sIF90aGlzLnByb3BzLmludGVydmFsKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjbGVhckF1dG9QbGF5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy50aW1lcikgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVyKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZXNldEF1dG9QbGF5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNsZWFyQXV0b1BsYXkoKTtcblxuICAgICAgX3RoaXMuYXV0b1BsYXkoKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdG9wT25Ib3ZlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlzTW91c2VFbnRlcmVkOiB0cnVlXG4gICAgICB9LCBfdGhpcy5jbGVhckF1dG9QbGF5KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGFydE9uTGVhdmVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc01vdXNlRW50ZXJlZDogZmFsc2VcbiAgICAgIH0sIF90aGlzLmF1dG9QbGF5KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpc0ZvY3VzV2l0aGluVGhlQ2Fyb3VzZWxcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5jYXJvdXNlbFdyYXBwZXJSZWYpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoKDAsIF9kb2N1bWVudC5kZWZhdWx0KSgpLmFjdGl2ZUVsZW1lbnQgPT09IF90aGlzLmNhcm91c2VsV3JhcHBlclJlZiB8fCBfdGhpcy5jYXJvdXNlbFdyYXBwZXJSZWYuY29udGFpbnMoKDAsIF9kb2N1bWVudC5kZWZhdWx0KSgpLmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwibmF2aWdhdGVXaXRoS2V5Ym9hcmRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICghX3RoaXMuaXNGb2N1c1dpdGhpblRoZUNhcm91c2VsKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXhpcyA9IF90aGlzLnByb3BzLmF4aXM7XG4gICAgICB2YXIgaXNIb3Jpem9udGFsID0gYXhpcyA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgdmFyIGtleU5hbWVzID0ge1xuICAgICAgICBBcnJvd1VwOiAzOCxcbiAgICAgICAgQXJyb3dSaWdodDogMzksXG4gICAgICAgIEFycm93RG93bjogNDAsXG4gICAgICAgIEFycm93TGVmdDogMzdcbiAgICAgIH07XG4gICAgICB2YXIgbmV4dEtleSA9IGlzSG9yaXpvbnRhbCA/IGtleU5hbWVzLkFycm93UmlnaHQgOiBrZXlOYW1lcy5BcnJvd0Rvd247XG4gICAgICB2YXIgcHJldktleSA9IGlzSG9yaXpvbnRhbCA/IGtleU5hbWVzLkFycm93TGVmdCA6IGtleU5hbWVzLkFycm93VXA7XG5cbiAgICAgIGlmIChuZXh0S2V5ID09PSBlLmtleUNvZGUpIHtcbiAgICAgICAgX3RoaXMuaW5jcmVtZW50KCk7XG4gICAgICB9IGVsc2UgaWYgKHByZXZLZXkgPT09IGUua2V5Q29kZSkge1xuICAgICAgICBfdGhpcy5kZWNyZW1lbnQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ1cGRhdGVTaXplc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLmluaXRpYWxpemVkIHx8ICFfdGhpcy5pdGVtc1JlZiB8fCBfdGhpcy5pdGVtc1JlZi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNIb3Jpem9udGFsID0gX3RoaXMucHJvcHMuYXhpcyA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgdmFyIGZpcnN0SXRlbSA9IF90aGlzLml0ZW1zUmVmWzBdO1xuXG4gICAgICBpZiAoIWZpcnN0SXRlbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpdGVtU2l6ZSA9IGlzSG9yaXpvbnRhbCA/IGZpcnN0SXRlbS5jbGllbnRXaWR0aCA6IGZpcnN0SXRlbS5jbGllbnRIZWlnaHQ7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXRlbVNpemU6IGl0ZW1TaXplXG4gICAgICB9KTtcblxuICAgICAgaWYgKF90aGlzLnRodW1ic1JlZikge1xuICAgICAgICBfdGhpcy50aHVtYnNSZWYudXBkYXRlU2l6ZXMoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZXRNb3VudFN0YXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaGFzTW91bnQ6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy51cGRhdGVTaXplcygpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrSXRlbVwiLCBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcbiAgICAgIGlmIChfcmVhY3QuQ2hpbGRyZW4uY291bnQoX3RoaXMucHJvcHMuY2hpbGRyZW4pID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnN0YXRlLmNhbmNlbENsaWNrKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBjYW5jZWxDbGljazogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5wcm9wcy5vbkNsaWNrSXRlbShpbmRleCwgaXRlbSk7XG5cbiAgICAgIGlmIChpbmRleCAhPT0gX3RoaXMuc3RhdGUuc2VsZWN0ZWRJdGVtKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBzZWxlY3RlZEl0ZW06IGluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZU9uQ2hhbmdlXCIsIGZ1bmN0aW9uIChpbmRleCwgaXRlbSkge1xuICAgICAgaWYgKF9yZWFjdC5DaGlsZHJlbi5jb3VudChfdGhpcy5wcm9wcy5jaGlsZHJlbikgPD0gMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlKGluZGV4LCBpdGVtKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVDbGlja1RodW1iXCIsIGZ1bmN0aW9uIChpbmRleCwgaXRlbSkge1xuICAgICAgX3RoaXMucHJvcHMub25DbGlja1RodW1iKGluZGV4LCBpdGVtKTtcblxuICAgICAgX3RoaXMubW92ZVRvKGluZGV4KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblN3aXBlU3RhcnRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHN3aXBpbmc6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5wcm9wcy5vblN3aXBlU3RhcnQoZXZlbnQpO1xuXG4gICAgICBfdGhpcy5jbGVhckF1dG9QbGF5KCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25Td2lwZUVuZFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3dpcGluZzogZmFsc2UsXG4gICAgICAgIGNhbmNlbENsaWNrOiBmYWxzZSxcbiAgICAgICAgc3dpcGVNb3ZlbWVudFN0YXJ0ZWQ6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMucHJvcHMub25Td2lwZUVuZChldmVudCk7XG5cbiAgICAgIF90aGlzLmF1dG9QbGF5KCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25Td2lwZU1vdmVcIiwgZnVuY3Rpb24gKGRlbHRhLCBldmVudCkge1xuICAgICAgX3RoaXMucHJvcHMub25Td2lwZU1vdmUoZXZlbnQpO1xuXG4gICAgICB2YXIgaXNIb3Jpem9udGFsID0gX3RoaXMucHJvcHMuYXhpcyA9PT0gJ2hvcml6b250YWwnO1xuXG4gICAgICB2YXIgY2hpbGRyZW5MZW5ndGggPSBfcmVhY3QuQ2hpbGRyZW4uY291bnQoX3RoaXMucHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgICB2YXIgaW5pdGlhbEJvdW5kcnkgPSAwO1xuXG4gICAgICB2YXIgY3VycmVudFBvc2l0aW9uID0gX3RoaXMuZ2V0UG9zaXRpb24oX3RoaXMuc3RhdGUuc2VsZWN0ZWRJdGVtKTtcblxuICAgICAgdmFyIGZpbmFsQm91bmRyeSA9IF90aGlzLnByb3BzLmluZmluaXRlTG9vcCA/IF90aGlzLmdldFBvc2l0aW9uKGNoaWxkcmVuTGVuZ3RoIC0gMSkgLSAxMDAgOiBfdGhpcy5nZXRQb3NpdGlvbihjaGlsZHJlbkxlbmd0aCAtIDEpO1xuICAgICAgdmFyIGF4aXNEZWx0YSA9IGlzSG9yaXpvbnRhbCA/IGRlbHRhLnggOiBkZWx0YS55O1xuICAgICAgdmFyIGhhbmRsZWREZWx0YSA9IGF4aXNEZWx0YTsgLy8gcHJldmVudCB1c2VyIGZyb20gc3dpcGluZyBsZWZ0IG91dCBvZiBib3VuZGFyaWVzXG5cbiAgICAgIGlmIChjdXJyZW50UG9zaXRpb24gPT09IGluaXRpYWxCb3VuZHJ5ICYmIGF4aXNEZWx0YSA+IDApIHtcbiAgICAgICAgaGFuZGxlZERlbHRhID0gMDtcbiAgICAgIH0gLy8gcHJldmVudCB1c2VyIGZyb20gc3dpcGluZyByaWdodCBvdXQgb2YgYm91bmRhcmllc1xuXG5cbiAgICAgIGlmIChjdXJyZW50UG9zaXRpb24gPT09IGZpbmFsQm91bmRyeSAmJiBheGlzRGVsdGEgPCAwKSB7XG4gICAgICAgIGhhbmRsZWREZWx0YSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBwb3NpdGlvbiA9IGN1cnJlbnRQb3NpdGlvbiArIDEwMCAvIChfdGhpcy5zdGF0ZS5pdGVtU2l6ZSAvIGhhbmRsZWREZWx0YSk7XG5cbiAgICAgIHZhciBoYXNNb3ZlZCA9IE1hdGguYWJzKGF4aXNEZWx0YSkgPiBfdGhpcy5wcm9wcy5zd2lwZVNjcm9sbFRvbGVyYW5jZTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLmluZmluaXRlTG9vcCAmJiBoYXNNb3ZlZCkge1xuICAgICAgICAvLyBXaGVuIGFsbG93aW5nIGluZmluaXRlIGxvb3AsIGlmIHdlIHNsaWRlIGxlZnQgZnJvbSBwb3NpdGlvbiAwIHdlIHJldmVhbCB0aGUgY2xvbmVkIGxhc3Qgc2xpZGUgdGhhdCBhcHBlYXJzIGJlZm9yZSBpdFxuICAgICAgICAvLyBpZiB3ZSBzbGlkZSBldmVuIGZ1cnRoZXIgd2UgbmVlZCB0byBqdW1wIHRvIG90aGVyIHNpZGUgc28gaXQgY2FuIGNvbnRpbnVlIC0gYW5kIHZpY2UgdmVyc2EgZm9yIHRoZSBsYXN0IHNsaWRlXG4gICAgICAgIGlmIChfdGhpcy5zdGF0ZS5zZWxlY3RlZEl0ZW0gPT09IDAgJiYgcG9zaXRpb24gPiAtMTAwKSB7XG4gICAgICAgICAgcG9zaXRpb24gLT0gY2hpbGRyZW5MZW5ndGggKiAxMDA7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMuc3RhdGUuc2VsZWN0ZWRJdGVtID09PSBjaGlsZHJlbkxlbmd0aCAtIDEgJiYgcG9zaXRpb24gPCAtY2hpbGRyZW5MZW5ndGggKiAxMDApIHtcbiAgICAgICAgICBwb3NpdGlvbiArPSBjaGlsZHJlbkxlbmd0aCAqIDEwMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIV90aGlzLnByb3BzLnByZXZlbnRNb3ZlbWVudFVudGlsU3dpcGVTY3JvbGxUb2xlcmFuY2UgfHwgaGFzTW92ZWQgfHwgX3RoaXMuc3RhdGUuc3dpcGVNb3ZlbWVudFN0YXJ0ZWQpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5zdGF0ZS5zd2lwZU1vdmVtZW50U3RhcnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHN3aXBlTW92ZW1lbnRTdGFydGVkOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5zZXRQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICB9IC8vIGFsbG93cyBzY3JvbGwgaWYgdGhlIHN3aXBlIHdhcyB3aXRoaW4gdGhlIHRvbGVyYW5jZVxuXG5cbiAgICAgIGlmIChoYXNNb3ZlZCAmJiAhX3RoaXMuc3RhdGUuY2FuY2VsQ2xpY2spIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGNhbmNlbENsaWNrOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGFzTW92ZWQ7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2V0UG9zaXRpb25cIiwgZnVuY3Rpb24gKHBvc2l0aW9uLCBmb3JjZVJlZmxvdykge1xuICAgICAgdmFyIGxpc3QgPSBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZShfdGhpcy5saXN0UmVmKTtcblxuICAgICAgaWYgKGxpc3QgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICBbJ1dlYmtpdFRyYW5zZm9ybScsICdNb3pUcmFuc2Zvcm0nLCAnTXNUcmFuc2Zvcm0nLCAnT1RyYW5zZm9ybScsICd0cmFuc2Zvcm0nLCAnbXNUcmFuc2Zvcm0nXS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgbGlzdC5zdHlsZVtwcm9wXSA9ICgwLCBfQ1NTVHJhbnNsYXRlLmRlZmF1bHQpKHBvc2l0aW9uLCAnJScsIF90aGlzLnByb3BzLmF4aXMpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZsb3cpIHtcbiAgICAgICAgICBsaXN0Lm9mZnNldExlZnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZXNldFBvc2l0aW9uXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdXJyZW50UG9zaXRpb24gPSBfdGhpcy5nZXRQb3NpdGlvbihfdGhpcy5zdGF0ZS5zZWxlY3RlZEl0ZW0pO1xuXG4gICAgICBfdGhpcy5zZXRQb3NpdGlvbihjdXJyZW50UG9zaXRpb24pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImRlY3JlbWVudFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcG9zaXRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxO1xuICAgICAgdmFyIGZyb21Td2lwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgICAgIF90aGlzLm1vdmVUbyhfdGhpcy5zdGF0ZS5zZWxlY3RlZEl0ZW0gLSAodHlwZW9mIHBvc2l0aW9ucyA9PT0gJ251bWJlcicgPyBwb3NpdGlvbnMgOiAxKSwgZnJvbVN3aXBlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpbmNyZW1lbnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBvc2l0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMTtcbiAgICAgIHZhciBmcm9tU3dpcGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gICAgICBfdGhpcy5tb3ZlVG8oX3RoaXMuc3RhdGUuc2VsZWN0ZWRJdGVtICsgKHR5cGVvZiBwb3NpdGlvbnMgPT09ICdudW1iZXInID8gcG9zaXRpb25zIDogMSksIGZyb21Td2lwZSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwibW92ZVRvXCIsIGZ1bmN0aW9uIChwb3NpdGlvbiwgZnJvbVN3aXBlKSB7XG4gICAgICBpZiAodHlwZW9mIHBvc2l0aW9uICE9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBsYXN0UG9zaXRpb24gPSBfcmVhY3QuQ2hpbGRyZW4uY291bnQoX3RoaXMucHJvcHMuY2hpbGRyZW4pIC0gMTtcbiAgICAgIHZhciBuZWVkQ2xvbmVkU2xpZGUgPSBfdGhpcy5wcm9wcy5pbmZpbml0ZUxvb3AgJiYgIWZyb21Td2lwZSAmJiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID4gbGFzdFBvc2l0aW9uKTtcbiAgICAgIHZhciBvbGRQb3NpdGlvbiA9IHBvc2l0aW9uO1xuXG4gICAgICBpZiAocG9zaXRpb24gPCAwKSB7XG4gICAgICAgIHBvc2l0aW9uID0gX3RoaXMucHJvcHMuaW5maW5pdGVMb29wID8gbGFzdFBvc2l0aW9uIDogMDtcbiAgICAgIH1cblxuICAgICAgaWYgKHBvc2l0aW9uID4gbGFzdFBvc2l0aW9uKSB7XG4gICAgICAgIHBvc2l0aW9uID0gX3RoaXMucHJvcHMuaW5maW5pdGVMb29wID8gMCA6IGxhc3RQb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRDbG9uZWRTbGlkZSkge1xuICAgICAgICAvLyBzZXQgc3dpcGluZyB0cnVlIHdvdWxkIGRpc2FibGUgdHJhbnNpdGlvbiB0aW1lLCB0aGVuIHdlIHNldCBzbGlkZXIgdG8gY2xvbmVkIHBvc2l0aW9uIGFuZCBmb3JjZSBhIHJlZmxvd1xuICAgICAgICAvLyB0aGlzIGlzIG9ubHkgbmVlZGVkIGZvciBub24tc3dpcGluZyBzaXR1YXRpb25cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHN3aXBpbmc6IHRydWVcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChvbGRQb3NpdGlvbiA8IDApIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5jZW50ZXJNb2RlICYmIF90aGlzLnByb3BzLmNlbnRlclNsaWRlUGVyY2VudGFnZSAmJiBfdGhpcy5wcm9wcy5heGlzID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgICAgX3RoaXMuc2V0UG9zaXRpb24oLShsYXN0UG9zaXRpb24gKyAyKSAqIF90aGlzLnByb3BzLmNlbnRlclNsaWRlUGVyY2VudGFnZSAtICgxMDAgLSBfdGhpcy5wcm9wcy5jZW50ZXJTbGlkZVBlcmNlbnRhZ2UpIC8gMiwgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpcy5zZXRQb3NpdGlvbigtKGxhc3RQb3NpdGlvbiArIDIpICogMTAwLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKG9sZFBvc2l0aW9uID4gbGFzdFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRQb3NpdGlvbigwLCB0cnVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpcy5zZWxlY3RJdGVtKHtcbiAgICAgICAgICAgIHNlbGVjdGVkSXRlbTogcG9zaXRpb24sXG4gICAgICAgICAgICBzd2lwaW5nOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnNlbGVjdEl0ZW0oe1xuICAgICAgICAgIC8vIGlmIGl0J3Mgbm90IGEgc2xpZGVyLCB3ZSBkb24ndCBuZWVkIHRvIHNldCBwb3NpdGlvbiBoZXJlXG4gICAgICAgICAgc2VsZWN0ZWRJdGVtOiBwb3NpdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0gLy8gZG9uJ3QgcmVzZXQgYXV0byBwbGF5IHdoZW4gc3RvcCBvbiBob3ZlciBpcyBlbmFibGVkLCBkb2luZyBzbyB3aWxsIHRyaWdnZXIgYSBjYWxsIHRvIGF1dG8gcGxheSBtb3JlIHRoYW4gb25jZVxuICAgICAgLy8gYW5kIHdpbGwgcmVzdWx0IGluIHRoZSBpbnRlcnZhbCBmdW5jdGlvbiBub3QgYmVpbmcgY2xlYXJlZCBjb3JyZWN0bHkuXG5cblxuICAgICAgaWYgKF90aGlzLnN0YXRlLmF1dG9QbGF5ICYmIF90aGlzLnN0YXRlLmlzTW91c2VFbnRlcmVkID09PSBmYWxzZSkge1xuICAgICAgICBfdGhpcy5yZXNldEF1dG9QbGF5KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25DbGlja05leHRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuaW5jcmVtZW50KDEsIGZhbHNlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbkNsaWNrUHJldlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5kZWNyZW1lbnQoMSwgZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uU3dpcGVGb3J3YXJkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmluY3JlbWVudCgxLCB0cnVlKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLmVtdWxhdGVUb3VjaCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgY2FuY2VsQ2xpY2s6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25Td2lwZUJhY2t3YXJkc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5kZWNyZW1lbnQoMSwgdHJ1ZSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5lbXVsYXRlVG91Y2gpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGNhbmNlbENsaWNrOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNoYW5nZUl0ZW1cIiwgZnVuY3Rpb24gKG5ld0luZGV4KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCFpc0tleWJvYXJkRXZlbnQoZSkgfHwgZS5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgICAgICBfdGhpcy5tb3ZlVG8obmV3SW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNlbGVjdEl0ZW1cIiwgZnVuY3Rpb24gKHN0YXRlLCBjYikge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoc3RhdGUsIGNiKTtcblxuICAgICAgX3RoaXMuaGFuZGxlT25DaGFuZ2Uoc3RhdGUuc2VsZWN0ZWRJdGVtLCBfcmVhY3QuQ2hpbGRyZW4udG9BcnJheShfdGhpcy5wcm9wcy5jaGlsZHJlbilbc3RhdGUuc2VsZWN0ZWRJdGVtXSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0SW5pdGlhbEltYWdlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzZWxlY3RlZEl0ZW0gPSBfdGhpcy5wcm9wcy5zZWxlY3RlZEl0ZW07XG4gICAgICB2YXIgaXRlbSA9IF90aGlzLml0ZW1zUmVmICYmIF90aGlzLml0ZW1zUmVmW3NlbGVjdGVkSXRlbV07XG4gICAgICB2YXIgaW1hZ2VzID0gaXRlbSAmJiBpdGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbWcnKSB8fCBbXTtcbiAgICAgIHJldHVybiBpbWFnZXNbMF07XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZ2V0VmFyaWFibGVJdGVtSGVpZ2h0XCIsIGZ1bmN0aW9uIChwb3NpdGlvbikge1xuICAgICAgdmFyIGl0ZW0gPSBfdGhpcy5pdGVtc1JlZiAmJiBfdGhpcy5pdGVtc1JlZltwb3NpdGlvbl07XG5cbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5oYXNNb3VudCAmJiBpdGVtICYmIGl0ZW0uY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIHZhciBzbGlkZUltYWdlcyA9IGl0ZW0uY2hpbGRyZW5bMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ltZycpIHx8IFtdO1xuXG4gICAgICAgIGlmIChzbGlkZUltYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIGltYWdlID0gc2xpZGVJbWFnZXNbMF07XG5cbiAgICAgICAgICBpZiAoIWltYWdlLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGUgaW1hZ2UgaXMgc3RpbGwgbG9hZGluZywgdGhlIHNpemUgd29uJ3QgYmUgYXZhaWxhYmxlIHNvIHdlIHRyaWdnZXIgYSBuZXcgcmVuZGVyIGFmdGVyIGl0J3MgZG9uZVxuICAgICAgICAgICAgdmFyIG9uSW1hZ2VMb2FkID0gZnVuY3Rpb24gb25JbWFnZUxvYWQoKSB7XG4gICAgICAgICAgICAgIF90aGlzLmZvcmNlVXBkYXRlKCk7XG5cbiAgICAgICAgICAgICAgaW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uSW1hZ2VMb2FkKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbkltYWdlTG9hZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIHRyeSB0byBnZXQgaW1nIGZpcnN0LCBpZiBpbWcgbm90IHRoZXJlIGZpbmQgZmlyc3QgZGlzcGxheSB0YWdcblxuXG4gICAgICAgIHZhciBkaXNwbGF5SXRlbSA9IHNsaWRlSW1hZ2VzWzBdIHx8IGl0ZW0uY2hpbGRyZW5bMF07XG4gICAgICAgIHZhciBoZWlnaHQgPSBkaXNwbGF5SXRlbS5jbGllbnRIZWlnaHQ7XG4gICAgICAgIHJldHVybiBoZWlnaHQgPiAwID8gaGVpZ2h0IDogbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGluaXRpYWxpemVkOiBmYWxzZSxcbiAgICAgIHNlbGVjdGVkSXRlbTogcHJvcHMuc2VsZWN0ZWRJdGVtLFxuICAgICAgaGFzTW91bnQ6IGZhbHNlLFxuICAgICAgaXNNb3VzZUVudGVyZWQ6IGZhbHNlLFxuICAgICAgYXV0b1BsYXk6IHByb3BzLmF1dG9QbGF5LFxuICAgICAgc3dpcGluZzogZmFsc2UsXG4gICAgICBzd2lwZU1vdmVtZW50U3RhcnRlZDogZmFsc2UsXG4gICAgICBjYW5jZWxDbGljazogZmFsc2UsXG4gICAgICBpdGVtU2l6ZTogMVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENhcm91c2VsLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0dXBDYXJvdXNlbCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICBpZiAoIXByZXZQcm9wcy5jaGlsZHJlbiAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICF0aGlzLnN0YXRlLmluaXRpYWxpemVkKSB7XG4gICAgICAgIHRoaXMuc2V0dXBDYXJvdXNlbCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXByZXZQcm9wcy5hdXRvRm9jdXMgJiYgdGhpcy5wcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgICAgdGhpcy5mb3JjZUZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmV2U3RhdGUuc3dpcGluZyAmJiAhdGhpcy5zdGF0ZS5zd2lwaW5nKSB7XG4gICAgICAgIC8vIFdlIHN0b3BwZWQgc3dpcGluZywgZW5zdXJlIHdlIGFyZSBoZWFkaW5nIHRvIHRoZSBuZXcvY3VycmVudCBzbGlkZSBhbmQgbm90IHN0dWNrXG4gICAgICAgIHRoaXMucmVzZXRQb3NpdGlvbigpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJldlByb3BzLnNlbGVjdGVkSXRlbSAhPT0gdGhpcy5wcm9wcy5zZWxlY3RlZEl0ZW0gfHwgcHJldlByb3BzLmNlbnRlck1vZGUgIT09IHRoaXMucHJvcHMuY2VudGVyTW9kZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZVNpemVzKCk7XG4gICAgICAgIHRoaXMubW92ZVRvKHRoaXMucHJvcHMuc2VsZWN0ZWRJdGVtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZQcm9wcy5hdXRvUGxheSAhPT0gdGhpcy5wcm9wcy5hdXRvUGxheSkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5hdXRvUGxheSkge1xuICAgICAgICAgIHRoaXMuc2V0dXBBdXRvUGxheSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZGVzdHJveUF1dG9QbGF5KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBhdXRvUGxheTogdGhpcy5wcm9wcy5hdXRvUGxheVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmRlc3Ryb3lDYXJvdXNlbCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXR1cENhcm91c2VsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwQ2Fyb3VzZWwoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG5cbiAgICAgIGlmICh0aGlzLnN0YXRlLmF1dG9QbGF5ICYmIF9yZWFjdC5DaGlsZHJlbi5jb3VudCh0aGlzLnByb3BzLmNoaWxkcmVuKSA+IDEpIHtcbiAgICAgICAgdGhpcy5zZXR1cEF1dG9QbGF5KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmF1dG9Gb2N1cykge1xuICAgICAgICB0aGlzLmZvcmNlRm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGluaXRpYWxpemVkOiB0cnVlXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbml0aWFsSW1hZ2UgPSBfdGhpczIuZ2V0SW5pdGlhbEltYWdlKCk7XG5cbiAgICAgICAgaWYgKGluaXRpYWxJbWFnZSAmJiAhaW5pdGlhbEltYWdlLmNvbXBsZXRlKSB7XG4gICAgICAgICAgLy8gaWYgaXQncyBhIGNhcm91c2VsIG9mIGltYWdlcywgd2Ugc2V0IHRoZSBtb3VudCBzdGF0ZSBhZnRlciB0aGUgZmlyc3QgaW1hZ2UgaXMgbG9hZGVkXG4gICAgICAgICAgaW5pdGlhbEltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBfdGhpczIuc2V0TW91bnRTdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMyLnNldE1vdW50U3RhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lDYXJvdXNlbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95Q2Fyb3VzZWwoKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5pbml0aWFsaXplZCkge1xuICAgICAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICAgICAgICB0aGlzLmRlc3Ryb3lBdXRvUGxheSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXR1cEF1dG9QbGF5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwQXV0b1BsYXkoKSB7XG4gICAgICB0aGlzLmF1dG9QbGF5KCk7XG4gICAgICB2YXIgY2Fyb3VzZWxXcmFwcGVyID0gdGhpcy5jYXJvdXNlbFdyYXBwZXJSZWY7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLnN0b3BPbkhvdmVyICYmIGNhcm91c2VsV3JhcHBlcikge1xuICAgICAgICBjYXJvdXNlbFdyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIHRoaXMuc3RvcE9uSG92ZXIpO1xuICAgICAgICBjYXJvdXNlbFdyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMuc3RhcnRPbkxlYXZlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVzdHJveUF1dG9QbGF5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3lBdXRvUGxheSgpIHtcbiAgICAgIHRoaXMuY2xlYXJBdXRvUGxheSgpO1xuICAgICAgdmFyIGNhcm91c2VsV3JhcHBlciA9IHRoaXMuY2Fyb3VzZWxXcmFwcGVyUmVmO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5zdG9wT25Ib3ZlciAmJiBjYXJvdXNlbFdyYXBwZXIpIHtcbiAgICAgICAgY2Fyb3VzZWxXcmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLnN0b3BPbkhvdmVyKTtcbiAgICAgICAgY2Fyb3VzZWxXcmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLnN0YXJ0T25MZWF2ZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImJpbmRFdmVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmluZEV2ZW50cygpIHtcbiAgICAgIC8vIGFzIHRoZSB3aWR0aHMgYXJlIGNhbGN1bGF0ZWQsIHdlIG5lZWQgdG8gcmVzaXplXG4gICAgICAvLyB0aGUgY2Fyb3VzZWwgd2hlbiB0aGUgd2luZG93IGlzIHJlc2l6ZWRcbiAgICAgICgwLCBfd2luZG93LmRlZmF1bHQpKCkuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy51cGRhdGVTaXplcyk7IC8vIGlzc3VlICMyIC0gaW1hZ2UgbG9hZGluZyBzbWFsbGVyXG5cbiAgICAgICgwLCBfd2luZG93LmRlZmF1bHQpKCkuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHRoaXMudXBkYXRlU2l6ZXMpO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy51c2VLZXlib2FyZEFycm93cykge1xuICAgICAgICAoMCwgX2RvY3VtZW50LmRlZmF1bHQpKCkuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMubmF2aWdhdGVXaXRoS2V5Ym9hcmQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1bmJpbmRFdmVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5iaW5kRXZlbnRzKCkge1xuICAgICAgLy8gcmVtb3ZpbmcgbGlzdGVuZXJzXG4gICAgICAoMCwgX3dpbmRvdy5kZWZhdWx0KSgpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMudXBkYXRlU2l6ZXMpO1xuICAgICAgKDAsIF93aW5kb3cuZGVmYXVsdCkoKS5yZW1vdmVFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgdGhpcy51cGRhdGVTaXplcyk7XG4gICAgICB2YXIgaW5pdGlhbEltYWdlID0gdGhpcy5nZXRJbml0aWFsSW1hZ2UoKTtcblxuICAgICAgaWYgKGluaXRpYWxJbWFnZSkge1xuICAgICAgICBpbml0aWFsSW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIHRoaXMuc2V0TW91bnRTdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLnVzZUtleWJvYXJkQXJyb3dzKSB7XG4gICAgICAgICgwLCBfZG9jdW1lbnQuZGVmYXVsdCkoKS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5uYXZpZ2F0ZVdpdGhLZXlib2FyZCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvcmNlRm9jdXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yY2VGb2N1cygpIHtcbiAgICAgIHZhciBfdGhpcyRjYXJvdXNlbFdyYXBwZXI7XG5cbiAgICAgIChfdGhpcyRjYXJvdXNlbFdyYXBwZXIgPSB0aGlzLmNhcm91c2VsV3JhcHBlclJlZikgPT09IG51bGwgfHwgX3RoaXMkY2Fyb3VzZWxXcmFwcGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRjYXJvdXNlbFdyYXBwZXIuZm9jdXMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UG9zaXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UG9zaXRpb24oaW5kZXgpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmluZmluaXRlTG9vcCkge1xuICAgICAgICAvLyBpbmRleCBoYXMgdG8gYmUgYWRkZWQgYnkgMSBiZWNhdXNlIG9mIHRoZSBmaXJzdCBjbG9uZWQgc2xpZGVcbiAgICAgICAgKytpbmRleDtcbiAgICAgIH1cblxuICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hpbGRyZW5MZW5ndGggPSBfcmVhY3QuQ2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmNlbnRlck1vZGUgJiYgdGhpcy5wcm9wcy5heGlzID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRQb3NpdGlvbiA9IC1pbmRleCAqIHRoaXMucHJvcHMuY2VudGVyU2xpZGVQZXJjZW50YWdlO1xuICAgICAgICB2YXIgbGFzdFBvc2l0aW9uID0gY2hpbGRyZW5MZW5ndGggLSAxO1xuXG4gICAgICAgIGlmIChpbmRleCAmJiAoaW5kZXggIT09IGxhc3RQb3NpdGlvbiB8fCB0aGlzLnByb3BzLmluZmluaXRlTG9vcCkpIHtcbiAgICAgICAgICBjdXJyZW50UG9zaXRpb24gKz0gKDEwMCAtIHRoaXMucHJvcHMuY2VudGVyU2xpZGVQZXJjZW50YWdlKSAvIDI7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IGxhc3RQb3NpdGlvbikge1xuICAgICAgICAgIGN1cnJlbnRQb3NpdGlvbiArPSAxMDAgLSB0aGlzLnByb3BzLmNlbnRlclNsaWRlUGVyY2VudGFnZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjdXJyZW50UG9zaXRpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAtaW5kZXggKiAxMDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlckl0ZW1zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckl0ZW1zKGlzQ2xvbmUpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0LkNoaWxkcmVuLm1hcCh0aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIHNsaWRlUHJvcHMgPSB7XG4gICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoZSkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5zZXRJdGVtc1JlZihlLCBpbmRleCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBrZXk6ICdpdGVtS2V5JyArIGluZGV4ICsgKGlzQ2xvbmUgPyAnY2xvbmUnIDogJycpLFxuICAgICAgICAgIGNsYXNzTmFtZTogX2Nzc0NsYXNzZXMuZGVmYXVsdC5JVEVNKHRydWUsIGluZGV4ID09PSBfdGhpczMuc3RhdGUuc2VsZWN0ZWRJdGVtKSxcbiAgICAgICAgICBvbkNsaWNrOiBfdGhpczMuaGFuZGxlQ2xpY2tJdGVtLmJpbmQoX3RoaXMzLCBpbmRleCwgaXRlbSlcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGV4dHJhUHJvcHMgPSB7fTtcblxuICAgICAgICBpZiAoX3RoaXMzLnByb3BzLmNlbnRlck1vZGUgJiYgX3RoaXMzLnByb3BzLmF4aXMgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIGV4dHJhUHJvcHMuc3R5bGUgPSB7XG4gICAgICAgICAgICBtaW5XaWR0aDogX3RoaXMzLnByb3BzLmNlbnRlclNsaWRlUGVyY2VudGFnZSArICclJ1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCBfZXh0ZW5kcyh7fSwgc2xpZGVQcm9wcywgZXh0cmFQcm9wcyksIF90aGlzMy5wcm9wcy5yZW5kZXJJdGVtKGl0ZW0sIHtcbiAgICAgICAgICBpc1NlbGVjdGVkOiBpbmRleCA9PT0gX3RoaXMzLnN0YXRlLnNlbGVjdGVkSXRlbVxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyQ29udHJvbHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQ29udHJvbHMoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBzaG93SW5kaWNhdG9ycyA9IF90aGlzJHByb3BzLnNob3dJbmRpY2F0b3JzLFxuICAgICAgICAgIGxhYmVscyA9IF90aGlzJHByb3BzLmxhYmVscyxcbiAgICAgICAgICByZW5kZXJJbmRpY2F0b3IgPSBfdGhpcyRwcm9wcy5yZW5kZXJJbmRpY2F0b3IsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbjtcblxuICAgICAgaWYgKCFzaG93SW5kaWNhdG9ycykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwidWxcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiY29udHJvbC1kb3RzXCJcbiAgICAgIH0sIF9yZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChfLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gcmVuZGVySW5kaWNhdG9yICYmIHJlbmRlckluZGljYXRvcihfdGhpczQuY2hhbmdlSXRlbShpbmRleCksIGluZGV4ID09PSBfdGhpczQuc3RhdGUuc2VsZWN0ZWRJdGVtLCBpbmRleCwgbGFiZWxzLml0ZW0pO1xuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJTdGF0dXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyU3RhdHVzKCkge1xuICAgICAgaWYgKCF0aGlzLnByb3BzLnNob3dTdGF0dXMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiY2Fyb3VzZWwtc3RhdHVzXCJcbiAgICAgIH0sIHRoaXMucHJvcHMuc3RhdHVzRm9ybWF0dGVyKHRoaXMuc3RhdGUuc2VsZWN0ZWRJdGVtICsgMSwgX3JlYWN0LkNoaWxkcmVuLmNvdW50KHRoaXMucHJvcHMuY2hpbGRyZW4pKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclRodW1ic1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJUaHVtYnMoKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMuc2hvd1RodW1icyB8fCAhdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBfcmVhY3QuQ2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbikgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVGh1bWJzLmRlZmF1bHQsIHtcbiAgICAgICAgcmVmOiB0aGlzLnNldFRodW1ic1JlZixcbiAgICAgICAgb25TZWxlY3RJdGVtOiB0aGlzLmhhbmRsZUNsaWNrVGh1bWIsXG4gICAgICAgIHNlbGVjdGVkSXRlbTogdGhpcy5zdGF0ZS5zZWxlY3RlZEl0ZW0sXG4gICAgICAgIHRyYW5zaXRpb25UaW1lOiB0aGlzLnByb3BzLnRyYW5zaXRpb25UaW1lLFxuICAgICAgICB0aHVtYldpZHRoOiB0aGlzLnByb3BzLnRodW1iV2lkdGgsXG4gICAgICAgIGxhYmVsczogdGhpcy5wcm9wcy5sYWJlbHNcbiAgICAgIH0sIHRoaXMucHJvcHMucmVuZGVyVGh1bWJzKHRoaXMucHJvcHMuY2hpbGRyZW4pKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMucHJvcHMuY2hpbGRyZW4gfHwgX3JlYWN0LkNoaWxkcmVuLmNvdW50KHRoaXMucHJvcHMuY2hpbGRyZW4pID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNTd2lwZWFibGUgPSB0aGlzLnByb3BzLnN3aXBlYWJsZSAmJiBfcmVhY3QuQ2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbikgPiAxO1xuICAgICAgdmFyIGlzSG9yaXpvbnRhbCA9IHRoaXMucHJvcHMuYXhpcyA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgdmFyIGNhblNob3dBcnJvd3MgPSB0aGlzLnByb3BzLnNob3dBcnJvd3MgJiYgX3JlYWN0LkNoaWxkcmVuLmNvdW50KHRoaXMucHJvcHMuY2hpbGRyZW4pID4gMTsgLy8gc2hvdyBsZWZ0IGFycm93P1xuXG4gICAgICB2YXIgaGFzUHJldiA9IGNhblNob3dBcnJvd3MgJiYgKHRoaXMuc3RhdGUuc2VsZWN0ZWRJdGVtID4gMCB8fCB0aGlzLnByb3BzLmluZmluaXRlTG9vcCkgfHwgZmFsc2U7IC8vIHNob3cgcmlnaHQgYXJyb3dcblxuICAgICAgdmFyIGhhc05leHQgPSBjYW5TaG93QXJyb3dzICYmICh0aGlzLnN0YXRlLnNlbGVjdGVkSXRlbSA8IF9yZWFjdC5DaGlsZHJlbi5jb3VudCh0aGlzLnByb3BzLmNoaWxkcmVuKSAtIDEgfHwgdGhpcy5wcm9wcy5pbmZpbml0ZUxvb3ApIHx8IGZhbHNlOyAvLyBvYmogdG8gaG9sZCB0aGUgdHJhbnNmb3JtYXRpb25zIGFuZCBzdHlsZXNcblxuICAgICAgdmFyIGl0ZW1MaXN0U3R5bGVzID0ge307XG4gICAgICB2YXIgY3VycmVudFBvc2l0aW9uID0gdGhpcy5nZXRQb3NpdGlvbih0aGlzLnN0YXRlLnNlbGVjdGVkSXRlbSk7IC8vIGlmIDNkIGlzIGF2YWlsYWJsZSwgbGV0J3MgdGFrZSBhZHZhbnRhZ2Ugb2YgdGhlIHBlcmZvcm1hbmNlIG9mIHRyYW5zZm9ybVxuXG4gICAgICB2YXIgdHJhbnNmb3JtUHJvcCA9ICgwLCBfQ1NTVHJhbnNsYXRlLmRlZmF1bHQpKGN1cnJlbnRQb3NpdGlvbiwgJyUnLCB0aGlzLnByb3BzLmF4aXMpO1xuICAgICAgdmFyIHRyYW5zaXRpb25UaW1lID0gdGhpcy5wcm9wcy50cmFuc2l0aW9uVGltZSArICdtcyc7XG4gICAgICBpdGVtTGlzdFN0eWxlcyA9IHtcbiAgICAgICAgV2Via2l0VHJhbnNmb3JtOiB0cmFuc2Zvcm1Qcm9wLFxuICAgICAgICBNb3pUcmFuc2Zvcm06IHRyYW5zZm9ybVByb3AsXG4gICAgICAgIE1zVHJhbnNmb3JtOiB0cmFuc2Zvcm1Qcm9wLFxuICAgICAgICBPVHJhbnNmb3JtOiB0cmFuc2Zvcm1Qcm9wLFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybVByb3AsXG4gICAgICAgIG1zVHJhbnNmb3JtOiB0cmFuc2Zvcm1Qcm9wXG4gICAgICB9O1xuXG4gICAgICBpZiAoIXRoaXMuc3RhdGUuc3dpcGluZykge1xuICAgICAgICBpdGVtTGlzdFN0eWxlcyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgaXRlbUxpc3RTdHlsZXMpLCB7fSwge1xuICAgICAgICAgIFdlYmtpdFRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvblRpbWUsXG4gICAgICAgICAgTW96VHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uVGltZSxcbiAgICAgICAgICBNc1RyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvblRpbWUsXG4gICAgICAgICAgT1RyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvblRpbWUsXG4gICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uVGltZSxcbiAgICAgICAgICBtc1RyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvblRpbWVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpdGVtc0Nsb25lID0gdGhpcy5yZW5kZXJJdGVtcyh0cnVlKTtcbiAgICAgIHZhciBmaXJzdENsb25lID0gaXRlbXNDbG9uZS5zaGlmdCgpO1xuICAgICAgdmFyIGxhc3RDbG9uZSA9IGl0ZW1zQ2xvbmUucG9wKCk7XG4gICAgICB2YXIgc3dpcGVyUHJvcHMgPSB7XG4gICAgICAgIGNsYXNzTmFtZTogX2Nzc0NsYXNzZXMuZGVmYXVsdC5TTElERVIodHJ1ZSwgdGhpcy5zdGF0ZS5zd2lwaW5nKSxcbiAgICAgICAgb25Td2lwZU1vdmU6IHRoaXMub25Td2lwZU1vdmUsXG4gICAgICAgIG9uU3dpcGVTdGFydDogdGhpcy5vblN3aXBlU3RhcnQsXG4gICAgICAgIG9uU3dpcGVFbmQ6IHRoaXMub25Td2lwZUVuZCxcbiAgICAgICAgc3R5bGU6IGl0ZW1MaXN0U3R5bGVzLFxuICAgICAgICB0b2xlcmFuY2U6IHRoaXMucHJvcHMuc3dpcGVTY3JvbGxUb2xlcmFuY2VcbiAgICAgIH07XG4gICAgICB2YXIgY29udGFpbmVyU3R5bGVzID0ge307XG5cbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgc3dpcGVyUHJvcHMub25Td2lwZUxlZnQgPSB0aGlzLm9uU3dpcGVGb3J3YXJkO1xuICAgICAgICBzd2lwZXJQcm9wcy5vblN3aXBlUmlnaHQgPSB0aGlzLm9uU3dpcGVCYWNrd2FyZHM7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZHluYW1pY0hlaWdodCkge1xuICAgICAgICAgIHZhciBpdGVtSGVpZ2h0ID0gdGhpcy5nZXRWYXJpYWJsZUl0ZW1IZWlnaHQodGhpcy5zdGF0ZS5zZWxlY3RlZEl0ZW0pO1xuICAgICAgICAgIHN3aXBlclByb3BzLnN0eWxlLmhlaWdodCA9IGl0ZW1IZWlnaHQgfHwgJ2F1dG8nO1xuICAgICAgICAgIGNvbnRhaW5lclN0eWxlcy5oZWlnaHQgPSBpdGVtSGVpZ2h0IHx8ICdhdXRvJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyUHJvcHMub25Td2lwZVVwID0gdGhpcy5wcm9wcy52ZXJ0aWNhbFN3aXBlID09PSAnbmF0dXJhbCcgPyB0aGlzLm9uU3dpcGVCYWNrd2FyZHMgOiB0aGlzLm9uU3dpcGVGb3J3YXJkO1xuICAgICAgICBzd2lwZXJQcm9wcy5vblN3aXBlRG93biA9IHRoaXMucHJvcHMudmVydGljYWxTd2lwZSA9PT0gJ25hdHVyYWwnID8gdGhpcy5vblN3aXBlRm9yd2FyZCA6IHRoaXMub25Td2lwZUJhY2t3YXJkcztcbiAgICAgICAgc3dpcGVyUHJvcHMuc3R5bGUuaGVpZ2h0ID0gdGhpcy5zdGF0ZS5pdGVtU2l6ZTtcbiAgICAgICAgY29udGFpbmVyU3R5bGVzLmhlaWdodCA9IHRoaXMuc3RhdGUuaXRlbVNpemU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogX2Nzc0NsYXNzZXMuZGVmYXVsdC5ST09UKHRoaXMucHJvcHMuY2xhc3NOYW1lKSxcbiAgICAgICAgcmVmOiB0aGlzLnNldENhcm91c2VsV3JhcHBlclJlZixcbiAgICAgICAgdGFiSW5kZXg6IDBcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBfY3NzQ2xhc3Nlcy5kZWZhdWx0LkNBUk9VU0VMKHRydWUpLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHdpZHRoOiB0aGlzLnByb3BzLndpZHRoXG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMucmVuZGVyQ29udHJvbHMoKSwgdGhpcy5wcm9wcy5yZW5kZXJBcnJvd1ByZXYodGhpcy5vbkNsaWNrUHJldiwgaGFzUHJldiwgdGhpcy5wcm9wcy5sYWJlbHMubGVmdEFycm93KSwgLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IF9jc3NDbGFzc2VzLmRlZmF1bHQuV1JBUFBFUih0cnVlLCB0aGlzLnByb3BzLmF4aXMpLFxuICAgICAgICBzdHlsZTogY29udGFpbmVyU3R5bGVzXG4gICAgICB9LCBpc1N3aXBlYWJsZSA/IC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdEVhc3lTd2lwZS5kZWZhdWx0LCBfZXh0ZW5kcyh7XG4gICAgICAgIHRhZ05hbWU6IFwidWxcIixcbiAgICAgICAgaW5uZXJSZWY6IHRoaXMuc2V0TGlzdFJlZlxuICAgICAgfSwgc3dpcGVyUHJvcHMsIHtcbiAgICAgICAgYWxsb3dNb3VzZUV2ZW50czogdGhpcy5wcm9wcy5lbXVsYXRlVG91Y2hcbiAgICAgIH0pLCB0aGlzLnByb3BzLmluZmluaXRlTG9vcCAmJiBsYXN0Q2xvbmUsIHRoaXMucmVuZGVySXRlbXMoKSwgdGhpcy5wcm9wcy5pbmZpbml0ZUxvb3AgJiYgZmlyc3RDbG9uZSkgOiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInVsXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBfY3NzQ2xhc3Nlcy5kZWZhdWx0LlNMSURFUih0cnVlLCB0aGlzLnN0YXRlLnN3aXBpbmcpLFxuICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNS5zZXRMaXN0UmVmKG5vZGUpO1xuICAgICAgICB9LFxuICAgICAgICBzdHlsZTogaXRlbUxpc3RTdHlsZXNcbiAgICAgIH0sIHRoaXMucHJvcHMuaW5maW5pdGVMb29wICYmIGxhc3RDbG9uZSwgdGhpcy5yZW5kZXJJdGVtcygpLCB0aGlzLnByb3BzLmluZmluaXRlTG9vcCAmJiBmaXJzdENsb25lKSksIHRoaXMucHJvcHMucmVuZGVyQXJyb3dOZXh0KHRoaXMub25DbGlja05leHQsIGhhc05leHQsIHRoaXMucHJvcHMubGFiZWxzLnJpZ2h0QXJyb3cpLCB0aGlzLnJlbmRlclN0YXR1cygpKSwgdGhpcy5yZW5kZXJUaHVtYnMoKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENhcm91c2VsO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDYXJvdXNlbDtcblxuX2RlZmluZVByb3BlcnR5KENhcm91c2VsLCBcImRpc3BsYXlOYW1lXCIsICdDYXJvdXNlbCcpO1xuXG5fZGVmaW5lUHJvcGVydHkoQ2Fyb3VzZWwsIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgYXhpczogJ2hvcml6b250YWwnLFxuICBjZW50ZXJTbGlkZVBlcmNlbnRhZ2U6IDgwLFxuICBpbnRlcnZhbDogMzAwMCxcbiAgbGFiZWxzOiB7XG4gICAgbGVmdEFycm93OiAncHJldmlvdXMgc2xpZGUgLyBpdGVtJyxcbiAgICByaWdodEFycm93OiAnbmV4dCBzbGlkZSAvIGl0ZW0nLFxuICAgIGl0ZW06ICdzbGlkZSBpdGVtJ1xuICB9LFxuICBvbkNsaWNrSXRlbTogbm9vcCxcbiAgb25DbGlja1RodW1iOiBub29wLFxuICBvbkNoYW5nZTogbm9vcCxcbiAgb25Td2lwZVN0YXJ0OiBmdW5jdGlvbiBvblN3aXBlU3RhcnQoKSB7fSxcbiAgb25Td2lwZUVuZDogZnVuY3Rpb24gb25Td2lwZUVuZCgpIHt9LFxuICBvblN3aXBlTW92ZTogZnVuY3Rpb24gb25Td2lwZU1vdmUoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBwcmV2ZW50TW92ZW1lbnRVbnRpbFN3aXBlU2Nyb2xsVG9sZXJhbmNlOiBmYWxzZSxcbiAgcmVuZGVyQXJyb3dQcmV2OiBmdW5jdGlvbiByZW5kZXJBcnJvd1ByZXYob25DbGlja0hhbmRsZXIsIGhhc1ByZXYsIGxhYmVsKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICBcImFyaWEtbGFiZWxcIjogbGFiZWwsXG4gICAgICBjbGFzc05hbWU6IF9jc3NDbGFzc2VzLmRlZmF1bHQuQVJST1dfUFJFVighaGFzUHJldiksXG4gICAgICBvbkNsaWNrOiBvbkNsaWNrSGFuZGxlclxuICAgIH0pO1xuICB9LFxuICByZW5kZXJBcnJvd05leHQ6IGZ1bmN0aW9uIHJlbmRlckFycm93TmV4dChvbkNsaWNrSGFuZGxlciwgaGFzTmV4dCwgbGFiZWwpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1xuICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiBsYWJlbCxcbiAgICAgIGNsYXNzTmFtZTogX2Nzc0NsYXNzZXMuZGVmYXVsdC5BUlJPV19ORVhUKCFoYXNOZXh0KSxcbiAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tIYW5kbGVyXG4gICAgfSk7XG4gIH0sXG4gIHJlbmRlckluZGljYXRvcjogZnVuY3Rpb24gcmVuZGVySW5kaWNhdG9yKG9uQ2xpY2tIYW5kbGVyLCBpc1NlbGVjdGVkLCBpbmRleCwgbGFiZWwpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7XG4gICAgICBjbGFzc05hbWU6IF9jc3NDbGFzc2VzLmRlZmF1bHQuRE9UKGlzU2VsZWN0ZWQpLFxuICAgICAgb25DbGljazogb25DbGlja0hhbmRsZXIsXG4gICAgICBvbktleURvd246IG9uQ2xpY2tIYW5kbGVyLFxuICAgICAgdmFsdWU6IGluZGV4LFxuICAgICAga2V5OiBpbmRleCxcbiAgICAgIHJvbGU6IFwiYnV0dG9uXCIsXG4gICAgICB0YWJJbmRleDogMCxcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiBcIlwiLmNvbmNhdChsYWJlbCwgXCIgXCIpLmNvbmNhdChpbmRleCArIDEpXG4gICAgfSk7XG4gIH0sXG4gIHJlbmRlckl0ZW06IGZ1bmN0aW9uIHJlbmRlckl0ZW0oaXRlbSkge1xuICAgIHJldHVybiBpdGVtO1xuICB9LFxuICByZW5kZXJUaHVtYnM6IGZ1bmN0aW9uIHJlbmRlclRodW1icyhjaGlsZHJlbikge1xuICAgIHZhciBpbWFnZXMgPSBfcmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGltZyA9IGl0ZW07IC8vIGlmIHRoZSBpdGVtIGlzIG5vdCBhbiBpbWFnZSwgdHJ5IHRvIGZpbmQgdGhlIGZpcnN0IGltYWdlIGluIHRoZSBpdGVtJ3MgY2hpbGRyZW4uXG5cbiAgICAgIGlmIChpdGVtLnR5cGUgIT09ICdpbWcnKSB7XG4gICAgICAgIGltZyA9IF9yZWFjdC5DaGlsZHJlbi50b0FycmF5KGl0ZW0ucHJvcHMuY2hpbGRyZW4pLmZpbmQoZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkcmVuLnR5cGUgPT09ICdpbWcnO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpbWcpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGltZztcbiAgICB9KTtcblxuICAgIGlmIChpbWFnZXMuZmlsdGVyKGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgcmV0dXJuIGltYWdlO1xuICAgIH0pLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc29sZS53YXJuKFwiTm8gaW1hZ2VzIGZvdW5kISBDYW4ndCBidWlsZCB0aGUgdGh1bWIgbGlzdCB3aXRob3V0IGltYWdlcy4gSWYgeW91IGRvbid0IG5lZWQgdGh1bWJzLCBzZXQgc2hvd1RodW1icz17ZmFsc2V9IGluIHRoZSBDYXJvdXNlbC4gTm90ZSB0aGF0IGl0J3Mgbm90IHBvc3NpYmxlIHRvIGdldCBpbWFnZXMgcmVuZGVyZWQgaW5zaWRlIGN1c3RvbSBjb21wb25lbnRzLiBNb3JlIGluZm8gYXQgaHR0cHM6Ly9naXRodWIuY29tL2xlYW5kcm93ZC9yZWFjdC1yZXNwb25zaXZlLWNhcm91c2VsL2Jsb2IvbWFzdGVyL1RST1VCTEVTSE9PVElORy5tZFwiKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW1hZ2VzO1xuICB9LFxuICBzdGF0dXNGb3JtYXR0ZXI6IGRlZmF1bHRTdGF0dXNGb3JtYXR0ZXIsXG4gIHNlbGVjdGVkSXRlbTogMCxcbiAgc2hvd0Fycm93czogdHJ1ZSxcbiAgc2hvd0luZGljYXRvcnM6IHRydWUsXG4gIHNob3dTdGF0dXM6IHRydWUsXG4gIHNob3dUaHVtYnM6IHRydWUsXG4gIHN0b3BPbkhvdmVyOiB0cnVlLFxuICBzd2lwZVNjcm9sbFRvbGVyYW5jZTogNSxcbiAgc3dpcGVhYmxlOiB0cnVlLFxuICB0cmFuc2l0aW9uVGltZTogMzUwLFxuICB2ZXJ0aWNhbFN3aXBlOiAnc3RhbmRhcmQnLFxuICB3aWR0aDogJzEwMCUnXG59KTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3NzQ2xhc3NlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2Nzc0NsYXNzZXNcIikpO1xuXG52YXIgX2RpbWVuc2lvbnMgPSByZXF1aXJlKFwiLi4vZGltZW5zaW9uc1wiKTtcblxudmFyIF9DU1NUcmFuc2xhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9DU1NUcmFuc2xhdGVcIikpO1xuXG52YXIgX3JlYWN0RWFzeVN3aXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZWFzeS1zd2lwZVwiKSk7XG5cbnZhciBfd2luZG93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hpbXMvd2luZG93XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgaXNLZXlib2FyZEV2ZW50ID0gZnVuY3Rpb24gaXNLZXlib2FyZEV2ZW50KGUpIHtcbiAgcmV0dXJuIGUuaGFzT3duUHJvcGVydHkoJ2tleScpO1xufTtcblxudmFyIFRodW1icyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVGh1bWJzLCBfQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFRodW1icyk7XG5cbiAgZnVuY3Rpb24gVGh1bWJzKF9wcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUaHVtYnMpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBfcHJvcHMpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIml0ZW1zV3JhcHBlclJlZlwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIml0ZW1zTGlzdFJlZlwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInRodW1ic1JlZlwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNldEl0ZW1zV3JhcHBlclJlZlwiLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgX3RoaXMuaXRlbXNXcmFwcGVyUmVmID0gbm9kZTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZXRJdGVtc0xpc3RSZWZcIiwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIF90aGlzLml0ZW1zTGlzdFJlZiA9IG5vZGU7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2V0VGh1bWJzUmVmXCIsIGZ1bmN0aW9uIChub2RlLCBpbmRleCkge1xuICAgICAgaWYgKCFfdGhpcy50aHVtYnNSZWYpIHtcbiAgICAgICAgX3RoaXMudGh1bWJzUmVmID0gW107XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnRodW1ic1JlZltpbmRleF0gPSBub2RlO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInVwZGF0ZVNpemVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMucHJvcHMuY2hpbGRyZW4gfHwgIV90aGlzLml0ZW1zV3JhcHBlclJlZiB8fCAhX3RoaXMudGh1bWJzUmVmKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRvdGFsID0gX3JlYWN0LkNoaWxkcmVuLmNvdW50KF90aGlzLnByb3BzLmNoaWxkcmVuKTtcblxuICAgICAgdmFyIHdyYXBwZXJTaXplID0gX3RoaXMuaXRlbXNXcmFwcGVyUmVmLmNsaWVudFdpZHRoO1xuICAgICAgdmFyIGl0ZW1TaXplID0gX3RoaXMucHJvcHMudGh1bWJXaWR0aCA/IF90aGlzLnByb3BzLnRodW1iV2lkdGggOiAoMCwgX2RpbWVuc2lvbnMub3V0ZXJXaWR0aCkoX3RoaXMudGh1bWJzUmVmWzBdKTtcbiAgICAgIHZhciB2aXNpYmxlSXRlbXMgPSBNYXRoLmZsb29yKHdyYXBwZXJTaXplIC8gaXRlbVNpemUpO1xuICAgICAgdmFyIGxhc3RQb3NpdGlvbiA9IHRvdGFsIC0gdmlzaWJsZUl0ZW1zO1xuICAgICAgdmFyIHNob3dBcnJvd3MgPSB2aXNpYmxlSXRlbXMgPCB0b3RhbDtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKF9zdGF0ZSwgcHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpdGVtU2l6ZTogaXRlbVNpemUsXG4gICAgICAgICAgdmlzaWJsZUl0ZW1zOiB2aXNpYmxlSXRlbXMsXG4gICAgICAgICAgZmlyc3RJdGVtOiBzaG93QXJyb3dzID8gX3RoaXMuZ2V0Rmlyc3RJdGVtKHByb3BzLnNlbGVjdGVkSXRlbSkgOiAwLFxuICAgICAgICAgIGxhc3RQb3NpdGlvbjogbGFzdFBvc2l0aW9uLFxuICAgICAgICAgIHNob3dBcnJvd3M6IHNob3dBcnJvd3NcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrSXRlbVwiLCBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0sIGUpIHtcbiAgICAgIGlmICghaXNLZXlib2FyZEV2ZW50KGUpIHx8IGUua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gX3RoaXMucHJvcHMub25TZWxlY3RJdGVtO1xuXG4gICAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGhhbmRsZXIoaW5kZXgsIGl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25Td2lwZVN0YXJ0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3dpcGluZzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25Td2lwZUVuZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHN3aXBpbmc6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblN3aXBlTW92ZVwiLCBmdW5jdGlvbiAoZGVsdGEpIHtcbiAgICAgIHZhciBkZWx0YVggPSBkZWx0YS54O1xuXG4gICAgICBpZiAoIV90aGlzLnN0YXRlLml0ZW1TaXplIHx8ICFfdGhpcy5pdGVtc1dyYXBwZXJSZWYpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVmdEJvdW5kYXJ5ID0gMDtcbiAgICAgIHZhciBjdXJyZW50UG9zaXRpb24gPSAtX3RoaXMuc3RhdGUuZmlyc3RJdGVtICogX3RoaXMuc3RhdGUuaXRlbVNpemU7XG4gICAgICB2YXIgbGFzdExlZnRCb3VuZGFyeSA9IC1fdGhpcy5zdGF0ZS52aXNpYmxlSXRlbXMgKiBfdGhpcy5zdGF0ZS5pdGVtU2l6ZTsgLy8gcHJldmVudCB1c2VyIGZyb20gc3dpcGluZyBsZWZ0IG91dCBvZiBib3VuZGFyaWVzXG5cbiAgICAgIGlmIChjdXJyZW50UG9zaXRpb24gPT09IGxlZnRCb3VuZGFyeSAmJiBkZWx0YVggPiAwKSB7XG4gICAgICAgIGRlbHRhWCA9IDA7XG4gICAgICB9IC8vIHByZXZlbnQgdXNlciBmcm9tIHN3aXBpbmcgcmlnaHQgb3V0IG9mIGJvdW5kYXJpZXNcblxuXG4gICAgICBpZiAoY3VycmVudFBvc2l0aW9uID09PSBsYXN0TGVmdEJvdW5kYXJ5ICYmIGRlbHRhWCA8IDApIHtcbiAgICAgICAgZGVsdGFYID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIHdyYXBwZXJTaXplID0gX3RoaXMuaXRlbXNXcmFwcGVyUmVmLmNsaWVudFdpZHRoO1xuICAgICAgdmFyIHBvc2l0aW9uID0gY3VycmVudFBvc2l0aW9uICsgMTAwIC8gKHdyYXBwZXJTaXplIC8gZGVsdGFYKTsgLy8gaWYgM2QgaXNuJ3QgYXZhaWxhYmxlIHdlIHdpbGwgdXNlIGxlZnQgdG8gbW92ZVxuXG4gICAgICBpZiAoX3RoaXMuaXRlbXNMaXN0UmVmKSB7XG4gICAgICAgIFsnV2Via2l0VHJhbnNmb3JtJywgJ01velRyYW5zZm9ybScsICdNc1RyYW5zZm9ybScsICdPVHJhbnNmb3JtJywgJ3RyYW5zZm9ybScsICdtc1RyYW5zZm9ybSddLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICBfdGhpcy5pdGVtc0xpc3RSZWYuc3R5bGVbcHJvcF0gPSAoMCwgX0NTU1RyYW5zbGF0ZS5kZWZhdWx0KShwb3NpdGlvbiwgJyUnLCBfdGhpcy5wcm9wcy5heGlzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNsaWRlUmlnaHRcIiwgZnVuY3Rpb24gKHBvc2l0aW9ucykge1xuICAgICAgX3RoaXMubW92ZVRvKF90aGlzLnN0YXRlLmZpcnN0SXRlbSAtICh0eXBlb2YgcG9zaXRpb25zID09PSAnbnVtYmVyJyA/IHBvc2l0aW9ucyA6IDEpKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzbGlkZUxlZnRcIiwgZnVuY3Rpb24gKHBvc2l0aW9ucykge1xuICAgICAgX3RoaXMubW92ZVRvKF90aGlzLnN0YXRlLmZpcnN0SXRlbSArICh0eXBlb2YgcG9zaXRpb25zID09PSAnbnVtYmVyJyA/IHBvc2l0aW9ucyA6IDEpKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJtb3ZlVG9cIiwgZnVuY3Rpb24gKHBvc2l0aW9uKSB7XG4gICAgICAvLyBwb3NpdGlvbiBjYW4ndCBiZSBsb3dlciB0aGFuIDBcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPCAwID8gMCA6IHBvc2l0aW9uOyAvLyBwb3NpdGlvbiBjYW4ndCBiZSBoaWdoZXIgdGhhbiBsYXN0IHBvc3Rpb25cblxuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA+PSBfdGhpcy5zdGF0ZS5sYXN0UG9zaXRpb24gPyBfdGhpcy5zdGF0ZS5sYXN0UG9zaXRpb24gOiBwb3NpdGlvbjtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmaXJzdEl0ZW06IHBvc2l0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc2VsZWN0ZWRJdGVtOiBfcHJvcHMuc2VsZWN0ZWRJdGVtLFxuICAgICAgc3dpcGluZzogZmFsc2UsXG4gICAgICBzaG93QXJyb3dzOiBmYWxzZSxcbiAgICAgIGZpcnN0SXRlbTogMCxcbiAgICAgIHZpc2libGVJdGVtczogMCxcbiAgICAgIGxhc3RQb3NpdGlvbjogMFxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRodW1icywgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnNldHVwVGh1bWJzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHByb3BzKSB7XG4gICAgICBpZiAocHJvcHMuc2VsZWN0ZWRJdGVtICE9PSB0aGlzLnN0YXRlLnNlbGVjdGVkSXRlbSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBzZWxlY3RlZEl0ZW06IHByb3BzLnNlbGVjdGVkSXRlbSxcbiAgICAgICAgICBmaXJzdEl0ZW06IHRoaXMuZ2V0Rmlyc3RJdGVtKHByb3BzLnNlbGVjdGVkSXRlbSlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5jaGlsZHJlbiA9PT0gcHJldlByb3BzLmNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gVGhpcyB3aWxsIGNhcHR1cmUgYW55IHNpemUgY2hhbmdlcyBmb3IgYXJyb3cgYWRqdXN0bWVudHMgZXRjLlxuICAgICAgLy8gdXN1YWxseSBpbiB0aGUgc2FtZSByZW5kZXIgY3ljbGUgc28gd2UgZG9uJ3Qgc2VlIGFueSBmbGlja2Vyc1xuXG5cbiAgICAgIHRoaXMudXBkYXRlU2l6ZXMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmRlc3Ryb3lUaHVtYnMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0dXBUaHVtYnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXBUaHVtYnMoKSB7XG4gICAgICAvLyBhcyB0aGUgd2lkdGhzIGFyZSBjYWxjdWxhdGVkLCB3ZSBuZWVkIHRvIHJlc2l6ZVxuICAgICAgLy8gdGhlIGNhcm91c2VsIHdoZW4gdGhlIHdpbmRvdyBpcyByZXNpemVkXG4gICAgICAoMCwgX3dpbmRvdy5kZWZhdWx0KSgpLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMudXBkYXRlU2l6ZXMpOyAvLyBpc3N1ZSAjMiAtIGltYWdlIGxvYWRpbmcgc21hbGxlclxuXG4gICAgICAoMCwgX3dpbmRvdy5kZWZhdWx0KSgpLmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCB0aGlzLnVwZGF0ZVNpemVzKTsgLy8gd2hlbiB0aGUgY29tcG9uZW50IGlzIHJlbmRlcmVkIHdlIG5lZWQgdG8gY2FsY3VsYXRlXG4gICAgICAvLyB0aGUgY29udGFpbmVyIHNpemUgdG8gYWRqdXN0IHRoZSByZXNwb25zaXZlIGJlaGF2aW91clxuXG4gICAgICB0aGlzLnVwZGF0ZVNpemVzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlc3Ryb3lUaHVtYnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveVRodW1icygpIHtcbiAgICAgIC8vIHJlbW92aW5nIGxpc3RlbmVyc1xuICAgICAgKDAsIF93aW5kb3cuZGVmYXVsdCkoKS5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnVwZGF0ZVNpemVzKTtcbiAgICAgICgwLCBfd2luZG93LmRlZmF1bHQpKCkucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHRoaXMudXBkYXRlU2l6ZXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRGaXJzdEl0ZW1cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Rmlyc3RJdGVtKHNlbGVjdGVkSXRlbSkge1xuICAgICAgdmFyIGZpcnN0SXRlbSA9IHNlbGVjdGVkSXRlbTtcblxuICAgICAgaWYgKHNlbGVjdGVkSXRlbSA+PSB0aGlzLnN0YXRlLmxhc3RQb3NpdGlvbikge1xuICAgICAgICBmaXJzdEl0ZW0gPSB0aGlzLnN0YXRlLmxhc3RQb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGVjdGVkSXRlbSA8IHRoaXMuc3RhdGUuZmlyc3RJdGVtICsgdGhpcy5zdGF0ZS52aXNpYmxlSXRlbXMpIHtcbiAgICAgICAgZmlyc3RJdGVtID0gdGhpcy5zdGF0ZS5maXJzdEl0ZW07XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3RlZEl0ZW0gPCB0aGlzLnN0YXRlLmZpcnN0SXRlbSkge1xuICAgICAgICBmaXJzdEl0ZW0gPSBzZWxlY3RlZEl0ZW07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmaXJzdEl0ZW07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlckl0ZW1zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckl0ZW1zKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuLm1hcChmdW5jdGlvbiAoaW1nLCBpbmRleCkge1xuICAgICAgICB2YXIgaXRlbUNsYXNzID0gX2Nzc0NsYXNzZXMuZGVmYXVsdC5JVEVNKGZhbHNlLCBpbmRleCA9PT0gX3RoaXMyLnN0YXRlLnNlbGVjdGVkSXRlbSk7XG5cbiAgICAgICAgdmFyIHRodW1iUHJvcHMgPSB7XG4gICAgICAgICAga2V5OiBpbmRleCxcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLnNldFRodW1ic1JlZihlLCBpbmRleCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjbGFzc05hbWU6IGl0ZW1DbGFzcyxcbiAgICAgICAgICBvbkNsaWNrOiBfdGhpczIuaGFuZGxlQ2xpY2tJdGVtLmJpbmQoX3RoaXMyLCBpbmRleCwgX3RoaXMyLnByb3BzLmNoaWxkcmVuW2luZGV4XSksXG4gICAgICAgICAgb25LZXlEb3duOiBfdGhpczIuaGFuZGxlQ2xpY2tJdGVtLmJpbmQoX3RoaXMyLCBpbmRleCwgX3RoaXMyLnByb3BzLmNoaWxkcmVuW2luZGV4XSksXG4gICAgICAgICAgJ2FyaWEtbGFiZWwnOiBcIlwiLmNvbmNhdChfdGhpczIucHJvcHMubGFiZWxzLml0ZW0sIFwiIFwiKS5jb25jYXQoaW5kZXggKyAxKSxcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgd2lkdGg6IF90aGlzMi5wcm9wcy50aHVtYldpZHRoXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCBfZXh0ZW5kcyh7fSwgdGh1bWJQcm9wcywge1xuICAgICAgICAgIHJvbGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgdGFiSW5kZXg6IDBcbiAgICAgICAgfSksIGltZyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBpc1N3aXBlYWJsZSA9IF9yZWFjdC5DaGlsZHJlbi5jb3VudCh0aGlzLnByb3BzLmNoaWxkcmVuKSA+IDE7IC8vIHNob3cgbGVmdCBhcnJvdz9cblxuICAgICAgdmFyIGhhc1ByZXYgPSB0aGlzLnN0YXRlLnNob3dBcnJvd3MgJiYgdGhpcy5zdGF0ZS5maXJzdEl0ZW0gPiAwOyAvLyBzaG93IHJpZ2h0IGFycm93XG5cbiAgICAgIHZhciBoYXNOZXh0ID0gdGhpcy5zdGF0ZS5zaG93QXJyb3dzICYmIHRoaXMuc3RhdGUuZmlyc3RJdGVtIDwgdGhpcy5zdGF0ZS5sYXN0UG9zaXRpb247IC8vIG9iaiB0byBob2xkIHRoZSB0cmFuc2Zvcm1hdGlvbnMgYW5kIHN0eWxlc1xuXG4gICAgICB2YXIgaXRlbUxpc3RTdHlsZXMgPSB7fTtcbiAgICAgIHZhciBjdXJyZW50UG9zaXRpb24gPSAtdGhpcy5zdGF0ZS5maXJzdEl0ZW0gKiAodGhpcy5zdGF0ZS5pdGVtU2l6ZSB8fCAwKTtcbiAgICAgIHZhciB0cmFuc2Zvcm1Qcm9wID0gKDAsIF9DU1NUcmFuc2xhdGUuZGVmYXVsdCkoY3VycmVudFBvc2l0aW9uLCAncHgnLCB0aGlzLnByb3BzLmF4aXMpO1xuICAgICAgdmFyIHRyYW5zaXRpb25UaW1lID0gdGhpcy5wcm9wcy50cmFuc2l0aW9uVGltZSArICdtcyc7XG4gICAgICBpdGVtTGlzdFN0eWxlcyA9IHtcbiAgICAgICAgV2Via2l0VHJhbnNmb3JtOiB0cmFuc2Zvcm1Qcm9wLFxuICAgICAgICBNb3pUcmFuc2Zvcm06IHRyYW5zZm9ybVByb3AsXG4gICAgICAgIE1zVHJhbnNmb3JtOiB0cmFuc2Zvcm1Qcm9wLFxuICAgICAgICBPVHJhbnNmb3JtOiB0cmFuc2Zvcm1Qcm9wLFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybVByb3AsXG4gICAgICAgIG1zVHJhbnNmb3JtOiB0cmFuc2Zvcm1Qcm9wLFxuICAgICAgICBXZWJraXRUcmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25UaW1lLFxuICAgICAgICBNb3pUcmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25UaW1lLFxuICAgICAgICBNc1RyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvblRpbWUsXG4gICAgICAgIE9UcmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25UaW1lLFxuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25UaW1lLFxuICAgICAgICBtc1RyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvblRpbWVcbiAgICAgIH07XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IF9jc3NDbGFzc2VzLmRlZmF1bHQuQ0FST1VTRUwoZmFsc2UpXG4gICAgICB9LCAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogX2Nzc0NsYXNzZXMuZGVmYXVsdC5XUkFQUEVSKGZhbHNlKSxcbiAgICAgICAgcmVmOiB0aGlzLnNldEl0ZW1zV3JhcHBlclJlZlxuICAgICAgfSwgLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1xuICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICBjbGFzc05hbWU6IF9jc3NDbGFzc2VzLmRlZmF1bHQuQVJST1dfUFJFVighaGFzUHJldiksXG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy5zbGlkZVJpZ2h0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiB0aGlzLnByb3BzLmxhYmVscy5sZWZ0QXJyb3dcbiAgICAgIH0pLCBpc1N3aXBlYWJsZSA/IC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdEVhc3lTd2lwZS5kZWZhdWx0LCB7XG4gICAgICAgIHRhZ05hbWU6IFwidWxcIixcbiAgICAgICAgY2xhc3NOYW1lOiBfY3NzQ2xhc3Nlcy5kZWZhdWx0LlNMSURFUihmYWxzZSwgdGhpcy5zdGF0ZS5zd2lwaW5nKSxcbiAgICAgICAgb25Td2lwZUxlZnQ6IHRoaXMuc2xpZGVMZWZ0LFxuICAgICAgICBvblN3aXBlUmlnaHQ6IHRoaXMuc2xpZGVSaWdodCxcbiAgICAgICAgb25Td2lwZU1vdmU6IHRoaXMub25Td2lwZU1vdmUsXG4gICAgICAgIG9uU3dpcGVTdGFydDogdGhpcy5vblN3aXBlU3RhcnQsXG4gICAgICAgIG9uU3dpcGVFbmQ6IHRoaXMub25Td2lwZUVuZCxcbiAgICAgICAgc3R5bGU6IGl0ZW1MaXN0U3R5bGVzLFxuICAgICAgICBpbm5lclJlZjogdGhpcy5zZXRJdGVtc0xpc3RSZWZcbiAgICAgIH0sIHRoaXMucmVuZGVySXRlbXMoKSkgOiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInVsXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBfY3NzQ2xhc3Nlcy5kZWZhdWx0LlNMSURFUihmYWxzZSwgdGhpcy5zdGF0ZS5zd2lwaW5nKSxcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYobm9kZSkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMuc2V0SXRlbXNMaXN0UmVmKG5vZGUpO1xuICAgICAgICB9LFxuICAgICAgICBzdHlsZTogaXRlbUxpc3RTdHlsZXNcbiAgICAgIH0sIHRoaXMucmVuZGVySXRlbXMoKSksIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgY2xhc3NOYW1lOiBfY3NzQ2xhc3Nlcy5kZWZhdWx0LkFSUk9XX05FWFQoIWhhc05leHQpLFxuICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMuc2xpZGVMZWZ0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiB0aGlzLnByb3BzLmxhYmVscy5yaWdodEFycm93XG4gICAgICB9KSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUaHVtYnM7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBUaHVtYnM7XG5cbl9kZWZpbmVQcm9wZXJ0eShUaHVtYnMsIFwiZGlzcGxheU5hbWVcIiwgJ1RodW1icycpO1xuXG5fZGVmaW5lUHJvcGVydHkoVGh1bWJzLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGF4aXM6ICdob3Jpem9udGFsJyxcbiAgbGFiZWxzOiB7XG4gICAgbGVmdEFycm93OiAncHJldmlvdXMgc2xpZGUgLyBpdGVtJyxcbiAgICByaWdodEFycm93OiAnbmV4dCBzbGlkZSAvIGl0ZW0nLFxuICAgIGl0ZW06ICdzbGlkZSBpdGVtJ1xuICB9LFxuICBzZWxlY3RlZEl0ZW06IDAsXG4gIHRodW1iV2lkdGg6IDgwLFxuICB0cmFuc2l0aW9uVGltZTogMzUwXG59KTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBfZGVmYXVsdCA9IHtcbiAgUk9PVDogZnVuY3Rpb24gUk9PVChjdXN0b21DbGFzc05hbWUpIHtcbiAgICByZXR1cm4gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICAnY2Fyb3VzZWwtcm9vdCc6IHRydWVcbiAgICB9LCBjdXN0b21DbGFzc05hbWUgfHwgJycsICEhY3VzdG9tQ2xhc3NOYW1lKSk7XG4gIH0sXG4gIENBUk9VU0VMOiBmdW5jdGlvbiBDQVJPVVNFTChpc1NsaWRlcikge1xuICAgIHJldHVybiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoe1xuICAgICAgY2Fyb3VzZWw6IHRydWUsXG4gICAgICAnY2Fyb3VzZWwtc2xpZGVyJzogaXNTbGlkZXJcbiAgICB9KTtcbiAgfSxcbiAgV1JBUFBFUjogZnVuY3Rpb24gV1JBUFBFUihpc1NsaWRlciwgYXhpcykge1xuICAgIHJldHVybiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoe1xuICAgICAgJ3RodW1icy13cmFwcGVyJzogIWlzU2xpZGVyLFxuICAgICAgJ3NsaWRlci13cmFwcGVyJzogaXNTbGlkZXIsXG4gICAgICAnYXhpcy1ob3Jpem9udGFsJzogYXhpcyA9PT0gJ2hvcml6b250YWwnLFxuICAgICAgJ2F4aXMtdmVydGljYWwnOiBheGlzICE9PSAnaG9yaXpvbnRhbCdcbiAgICB9KTtcbiAgfSxcbiAgU0xJREVSOiBmdW5jdGlvbiBTTElERVIoaXNTbGlkZXIsIGlzU3dpcGluZykge1xuICAgIHJldHVybiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoe1xuICAgICAgdGh1bWJzOiAhaXNTbGlkZXIsXG4gICAgICBzbGlkZXI6IGlzU2xpZGVyLFxuICAgICAgYW5pbWF0ZWQ6ICFpc1N3aXBpbmdcbiAgICB9KTtcbiAgfSxcbiAgSVRFTTogZnVuY3Rpb24gSVRFTShpc1NsaWRlciwgc2VsZWN0ZWQsIHByZXZpb3VzKSB7XG4gICAgcmV0dXJuICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KSh7XG4gICAgICB0aHVtYjogIWlzU2xpZGVyLFxuICAgICAgc2xpZGU6IGlzU2xpZGVyLFxuICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkLFxuICAgICAgcHJldmlvdXM6IHByZXZpb3VzXG4gICAgfSk7XG4gIH0sXG4gIEFSUk9XX1BSRVY6IGZ1bmN0aW9uIEFSUk9XX1BSRVYoZGlzYWJsZWQpIHtcbiAgICByZXR1cm4gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKHtcbiAgICAgICdjb250cm9sLWFycm93IGNvbnRyb2wtcHJldic6IHRydWUsXG4gICAgICAnY29udHJvbC1kaXNhYmxlZCc6IGRpc2FibGVkXG4gICAgfSk7XG4gIH0sXG4gIEFSUk9XX05FWFQ6IGZ1bmN0aW9uIEFSUk9XX05FWFQoZGlzYWJsZWQpIHtcbiAgICByZXR1cm4gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKHtcbiAgICAgICdjb250cm9sLWFycm93IGNvbnRyb2wtbmV4dCc6IHRydWUsXG4gICAgICAnY29udHJvbC1kaXNhYmxlZCc6IGRpc2FibGVkXG4gICAgfSk7XG4gIH0sXG4gIERPVDogZnVuY3Rpb24gRE9UKHNlbGVjdGVkKSB7XG4gICAgcmV0dXJuICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KSh7XG4gICAgICBkb3Q6IHRydWUsXG4gICAgICBzZWxlY3RlZDogc2VsZWN0ZWRcbiAgICB9KTtcbiAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5vdXRlcldpZHRoID0gdm9pZCAwO1xuXG52YXIgb3V0ZXJXaWR0aCA9IGZ1bmN0aW9uIG91dGVyV2lkdGgoZWwpIHtcbiAgdmFyIHdpZHRoID0gZWwub2Zmc2V0V2lkdGg7XG4gIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuICB3aWR0aCArPSBwYXJzZUludChzdHlsZS5tYXJnaW5MZWZ0KSArIHBhcnNlSW50KHN0eWxlLm1hcmdpblJpZ2h0KTtcbiAgcmV0dXJuIHdpZHRoO1xufTtcblxuZXhwb3J0cy5vdXRlcldpZHRoID0gb3V0ZXJXaWR0aDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNhcm91c2VsXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9DYXJvdXNlbC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRodW1ic1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVGh1bWJzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0Nhcm91c2VsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL0Nhcm91c2VsXCIpKTtcblxudmFyIF9UaHVtYnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvVGh1bWJzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gIHJldHVybiBkb2N1bWVudDtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2RlZmF1bHQgPSBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgcmV0dXJuIHdpbmRvdztcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnLCBmbGFncyhvcHRpb25zKSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNS4yXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSx5PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyO24mJlN5bWJvbC5mb3IoXCJyZWFjdC5wbGFjZWhvbGRlclwiKTtcbnZhciB6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBBKGEsYixkLGMsZSxnLGgsZil7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGs9W2QsYyxlLGcsaCxmXSxsPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4ga1tsKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24gQihhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGQ9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWQrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO0EoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixkKX12YXIgQz17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRD17fTtcbmZ1bmN0aW9uIEUoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZHx8Q31FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0UucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9CKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixkKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWR8fEN9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7bShILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPXtjdXJyZW50Om51bGwsY3VycmVudERpc3BhdGNoZXI6bnVsbH0sSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEwoYSxiLGQpe3ZhciBjPXZvaWQgMCxlPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGMpJiYhSy5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Zil7Zm9yKHZhciBrPUFycmF5KGYpLGw9MDtsPGY7bCsrKWtbbF09YXJndW1lbnRzW2wrMl07ZS5jaGlsZHJlbj1rfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1lW2NdJiYoZVtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZSxfb3duZXI6SS5jdXJyZW50fX1cbmZ1bmN0aW9uIE0oYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE4oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTz0vXFwvKy9nLFA9W107ZnVuY3Rpb24gUShhLGIsZCxjKXtpZihQLmxlbmd0aCl7dmFyIGU9UC5wb3AoKTtlLnJlc3VsdD1hO2Uua2V5UHJlZml4PWI7ZS5mdW5jPWQ7ZS5jb250ZXh0PWM7ZS5jb3VudD0wO3JldHVybiBlfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmQsY29udGV4dDpjLGNvdW50OjB9fVxuZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixkLGMpe3ZhciBlPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1lfHxcImJvb2xlYW5cIj09PWUpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBkKGMsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2U9YVtoXTt2YXIgZj1iK1QoZSxoKTtnKz1TKGUsZixkLGMpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxoPVxuMDshKGU9YS5uZXh0KCkpLmRvbmU7KWU9ZS52YWx1ZSxmPWIrVChlLGgrKyksZys9UyhlLGYsZCxjKTtlbHNlXCJvYmplY3RcIj09PWUmJihkPVwiXCIrYSxCKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZD9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpkLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBVKGEsYixkKXtyZXR1cm4gbnVsbD09YT8wOlMoYSxcIlwiLGIsZCl9ZnVuY3Rpb24gVChhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVihhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBhYShhLGIsZCl7dmFyIGM9YS5yZXN1bHQsZT1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9XKGEsYyxkLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE4oYSkmJihhPU0oYSxlKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStkKSksYy5wdXNoKGEpKX1mdW5jdGlvbiBXKGEsYixkLGMsZSl7dmFyIGc9XCJcIjtudWxsIT1kJiYoZz0oXCJcIitkKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxlKTtVKGEsYWEsYik7UihiKX1mdW5jdGlvbiBiYShhLGIpe3ZhciBkPUkuY3VycmVudERpc3BhdGNoZXI7bnVsbD09PWQ/QihcIjI3N1wiKTp2b2lkIDA7cmV0dXJuIGQucmVhZENvbnRleHQoYSxiKX1cbnZhciBYPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBjPVtdO1coYSxjLG51bGwsYixkKTtyZXR1cm4gY30sZm9yRWFjaDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVEobnVsbCxudWxsLGIsZCk7VShhLFYsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFUoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtXKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TihhKT92b2lkIDA6QihcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsXG5fY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsdW5zdGFibGVfcmVhZDpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O2EuQ29uc3VtZXI9YTthLnVuc3RhYmxlX3JlYWQ9YmEuYmluZChudWxsLGEpO3JldHVybiBhfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LHJlbmRlcjphfX0sRnJhZ21lbnQ6cixTdHJpY3RNb2RlOnQsdW5zdGFibGVfQXN5bmNNb2RlOngsdW5zdGFibGVfUHJvZmlsZXI6dSxjcmVhdGVFbGVtZW50OkwsY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixkKXtudWxsPT09YXx8dm9pZCAwPT09YT9CKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxlPW0oe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9SS5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSk7XG52YXIgaz12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYoaz1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUouY2FsbChiLGMpJiYhSy5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09az9rW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Yyl7az1BcnJheShjKTtmb3IodmFyIGw9MDtsPGM7bCsrKWtbbF09YXJndW1lbnRzW2wrMl07ZS5jaGlsZHJlbj1rfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmUsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPUwuYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi41LjJcIixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6SSxcbmFzc2lnbjptfX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0fHxaO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjUuMlxuICogc2NoZWR1bGUucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGM9bnVsbCxlPSExLGY9ITEsZz1cIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93LGw9e3RpbWVSZW1haW5pbmc6Zz9mdW5jdGlvbigpe3ZhciBhPWgoKS1wZXJmb3JtYW5jZS5ub3coKTtyZXR1cm4gMDxhP2E6MH06ZnVuY3Rpb24oKXt2YXIgYT1oKCktRGF0ZS5ub3coKTtyZXR1cm4gMDxhP2E6MH0sZGlkVGltZW91dDohMX07ZnVuY3Rpb24gbSgpe2lmKCFlKXt2YXIgYT1jLnRpbWVzT3V0QXQ7Zj9uKCk6Zj0hMDtwKHEsYSl9fWZ1bmN0aW9uIHIoKXt2YXIgYT1jLGI9Yy5uZXh0O2lmKGM9PT1iKWM9bnVsbDtlbHNle3ZhciBkPWMucHJldmlvdXM7Yz1kLm5leHQ9YjtiLnByZXZpb3VzPWR9YS5uZXh0PWEucHJldmlvdXM9bnVsbDthPWEuY2FsbGJhY2s7YShsKX1cbmZ1bmN0aW9uIHEoYSl7ZT0hMDtsLmRpZFRpbWVvdXQ9YTt0cnl7aWYoYSlmb3IoO251bGwhPT1jOyl7dmFyIGI9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihjLnRpbWVzT3V0QXQ8PWIpe2RvIHIoKTt3aGlsZShudWxsIT09YyYmYy50aW1lc091dEF0PD1iKX1lbHNlIGJyZWFrfWVsc2UgaWYobnVsbCE9PWMpe2RvIHIoKTt3aGlsZShudWxsIT09YyYmMDxoKCktZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9fWZpbmFsbHl7ZT0hMSxudWxsIT09Yz9tKGMpOmY9ITF9fVxudmFyIHQ9RGF0ZSx1PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLHc9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZT9yZXF1ZXN0QW5pbWF0aW9uRnJhbWU6dm9pZCAwLHg9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNhbmNlbEFuaW1hdGlvbkZyYW1lP2NhbmNlbEFuaW1hdGlvbkZyYW1lOnZvaWQgMCx5LHo7ZnVuY3Rpb24gQShhKXt5PXcoZnVuY3Rpb24oYil7dih6KTthKGIpfSk7ej11KGZ1bmN0aW9uKCl7eCh5KTthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSwxMDApfWlmKGcpe3ZhciBCPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIEIubm93KCl9fWVsc2UgZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gdC5ub3coKX07dmFyIHAsbixoO1xuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cpe3ZhciBDPS0xO3A9ZnVuY3Rpb24oYSl7Qz1zZXRUaW1lb3V0KGEsMCwhMCl9O249ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQoQyl9O2g9ZnVuY3Rpb24oKXtyZXR1cm4gMH19ZWxzZSBpZih3aW5kb3cuX3NjaGVkTW9jayl7dmFyIEQ9d2luZG93Ll9zY2hlZE1vY2s7cD1EWzBdO249RFsxXTtoPURbMl19ZWxzZXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJihcImZ1bmN0aW9uXCIhPT10eXBlb2YgdyYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeCYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpKTtcbnZhciBFPW51bGwsRj0hMSxHPS0xLEg9ITEsST0hMSxKPTAsSz0zMyxMPTMzO2g9ZnVuY3Rpb24oKXtyZXR1cm4gSn07dmFyIE09XCJfX3JlYWN0SWRsZUNhbGxiYWNrJFwiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGZ1bmN0aW9uKGEpe2lmKGEuc291cmNlPT09d2luZG93JiZhLmRhdGE9PT1NKXtGPSExO3ZhciBiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7YT0hMTtpZigwPj1KLWIpaWYoLTEhPT1HJiZHPD1iKWE9ITA7ZWxzZXtIfHwoSD0hMCxBKE4pKTtyZXR1cm59Rz0tMTtiPUU7RT1udWxsO2lmKG51bGwhPT1iKXtJPSEwO3RyeXtiKGEpfWZpbmFsbHl7ST0hMX19fX0sITEpO3ZhciBOPWZ1bmN0aW9uKGEpe0g9ITE7dmFyIGI9YS1KK0w7YjxMJiZLPEw/KDg+YiYmKGI9OCksTD1iPEs/SzpiKTpLPWI7Sj1hK0w7Rnx8KEY9ITAsd2luZG93LnBvc3RNZXNzYWdlKE0sXCIqXCIpKX07cD1mdW5jdGlvbihhLFxuYil7RT1hO0c9YjtJP3dpbmRvdy5wb3N0TWVzc2FnZShNLFwiKlwiKTpIfHwoSD0hMCxBKE4pKX07bj1mdW5jdGlvbigpe0U9bnVsbDtGPSExO0c9LTF9fWV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVXb3JrPWZ1bmN0aW9uKGEsYil7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtiPXZvaWQgMCE9PWImJm51bGwhPT1iJiZudWxsIT09Yi50aW1lb3V0JiZ2b2lkIDAhPT1iLnRpbWVvdXQ/ZCtiLnRpbWVvdXQ6ZCs1RTM7YT17Y2FsbGJhY2s6YSx0aW1lc091dEF0OmIsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9O2lmKG51bGw9PT1jKWM9YS5uZXh0PWEucHJldmlvdXM9YSxtKGMpO2Vsc2V7ZD1udWxsO3ZhciBrPWM7ZG97aWYoay50aW1lc091dEF0PmIpe2Q9azticmVha31rPWsubmV4dH13aGlsZShrIT09Yyk7bnVsbD09PWQ/ZD1jOmQ9PT1jJiYoYz1hLG0oYykpO2I9ZC5wcmV2aW91cztiLm5leHQ9ZC5wcmV2aW91cz1hO2EubmV4dD1kO2EucHJldmlvdXM9Yn1yZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX2NhbmNlbFNjaGVkdWxlZFdvcms9ZnVuY3Rpb24oYSl7dmFyIGI9YS5uZXh0O2lmKG51bGwhPT1iKXtpZihiPT09YSljPW51bGw7ZWxzZXthPT09YyYmKGM9Yik7dmFyIGQ9YS5wcmV2aW91cztkLm5leHQ9YjtiLnByZXZpb3VzPWR9YS5uZXh0PWEucHJldmlvdXM9bnVsbH19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Nhcm91c2VsLm1pbi5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Nhcm91c2VsLm1pbi5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY2Fyb3VzZWwubWluLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BcHAuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQXBwLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BcHAuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9OYXZpZ2F0aW9uLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL05hdmlnYXRpb24uc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL05hdmlnYXRpb24uc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Qcm9qZWN0RGlzcGxheS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Qcm9qZWN0RGlzcGxheS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUHJvamVjdERpc3BsYXkuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Qcm9maWxlLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Byb2ZpbGUuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Byb2ZpbGUuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9WaXN1YWxzLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Zpc3VhbHMuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Zpc3VhbHMuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9iYXNlLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Jhc2Uuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Jhc2Uuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yZXNldC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yZXNldC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcmVzZXQuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCl7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0LCBwYXJlbnQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEF0LmJlZm9yZSwgdGFyZ2V0KTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRpZihvcHRpb25zLmF0dHJzLm5vbmNlID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuXHRcdGlmIChub25jZSkge1xuXHRcdFx0b3B0aW9ucy5hdHRycy5ub25jZSA9IG5vbmNlO1xuXHRcdH1cblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdldE5vbmNlKCkge1xuXHRpZiAodHlwZW9mIF9fd2VicGFja19ub25jZV9fID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIF9fd2VicGFja19ub25jZV9fO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vY2Fyb3VzZWwtMS5qcGdcIjogNzIzNCxcblx0XCIuL2Nhcm91c2VsLTIuanBnXCI6IDc4NDMsXG5cdFwiLi9jYXJvdXNlbC0zLmpwZ1wiOiA2ODQyXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMTE2ODsiLCJ2YXIgbWFwID0ge1xuXHRcIi4vZ2FtZXMvYXN0ZXJvaWRzLmpwZ1wiOiA1Nzg1LFxuXHRcIi4vZ2FtZXMvZmlzaGluZy1lbnRlcnByaXNlcy5qcGdcIjogNDUxMCxcblx0XCIuL2dhbWVzL292ZXJzZWVyLmpwZ1wiOiA3MzExLFxuXHRcIi4vcG9ydGZvbGlvL2N5bnRyYXNhZmUuanBnXCI6IDI5MTQsXG5cdFwiLi9wb3J0Zm9saW8vZmFubGl0ZS1lbmdpbmVlcmluZy5qcGdcIjogODQyOCxcblx0XCIuL3BvcnRmb2xpby9pb3RhLW9ubGluZS5qcGdcIjogOTU3Myxcblx0XCIuL3BvcnRmb2xpby9sb3ZlbG90dXMuanBnXCI6IDM1NzAsXG5cdFwiLi9wb3J0Zm9saW8vb3BpbmlvbmF0ZWQuanBnXCI6IDE3MDEsXG5cdFwiLi9wb3J0Zm9saW8vc2luZXN0YXRzLmpwZ1wiOiA4MDA0LFxuXHRcIi4vcG9ydGZvbGlvL3N1ZG8tbmV3cy5qcGdcIjogNzU4Myxcblx0XCIuL3Byb2ZpbGUvaGVhZHNob3QuanBnXCI6IDQ2MjQsXG5cdFwiLi92aXN1YWxzL2Fic3RyYWN0LXNxdWFyZXMuanBnXCI6IDk4NDAsXG5cdFwiLi92aXN1YWxzL2JvdW5jaW5nLWxhc2VyLmpwZ1wiOiA2NjAwLFxuXHRcIi4vdmlzdWFscy9jYXJvdXNlbC9jYXJvdXNlbC0xLmpwZ1wiOiA3MjM0LFxuXHRcIi4vdmlzdWFscy9jYXJvdXNlbC9jYXJvdXNlbC0yLmpwZ1wiOiA3ODQzLFxuXHRcIi4vdmlzdWFscy9jYXJvdXNlbC9jYXJvdXNlbC0zLmpwZ1wiOiA2ODQyLFxuXHRcIi4vdmlzdWFscy9jdWJpYy1hdWRpby12aXN1YWxpemVyLmpwZ1wiOiA2NjQxLFxuXHRcIi4vdmlzdWFscy9mYWxsaW5nLWxpZ2h0cy5qcGdcIjogNDkyOCxcblx0XCIuL3Zpc3VhbHMvZmFsbGluZy10ZXh0LmpwZ1wiOiA4NTcwLFxuXHRcIi4vdmlzdWFscy9mdXR1cmlzdGljLWF1ZGlvLXZpc3VhbGl6ZXIuanBnXCI6IDIzMzIsXG5cdFwiLi92aXN1YWxzL2dlb21ldHJpYy1jb25zdGVsbGF0aW9ucy5qcGdcIjogMjExLFxuXHRcIi4vdmlzdWFscy9ncmFkaWVudC1jaXJjdWl0LmpwZ1wiOiA0OTMwLFxuXHRcIi4vdmlzdWFscy9tZXRlb3Itc2hvd2VyLmpwZ1wiOiA2MjYxLFxuXHRcIi4vdmlzdWFscy9yYWluYm93LWJsYWNrLWhvbGUuanBnXCI6IDk2OTQsXG5cdFwiLi92aXN1YWxzL3JhaW5kcm9wcy5qcGdcIjogMTIwLFxuXHRcIi4vdmlzdWFscy9yYW5kb20td2Fsa2Vycy5qcGdcIjogMTcwMCxcblx0XCIuL3Zpc3VhbHMvcmVhY2hpbmctYXJtcy5qcGdcIjogMzQ5Nixcblx0XCIuL3Zpc3VhbHMvcm90YXRpbmctc3BpcmFsLmpwZ1wiOiA2MDYxXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gOTkwOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRpZiAoY2FjaGVkTW9kdWxlLmVycm9yICE9PSB1bmRlZmluZWQpIHRocm93IGNhY2hlZE1vZHVsZS5lcnJvcjtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0dHJ5IHtcblx0XHR2YXIgZXhlY09wdGlvbnMgPSB7IGlkOiBtb2R1bGVJZCwgbW9kdWxlOiBtb2R1bGUsIGZhY3Rvcnk6IF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLCByZXF1aXJlOiBfX3dlYnBhY2tfcmVxdWlyZV9fIH07XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcikgeyBoYW5kbGVyKGV4ZWNPcHRpb25zKTsgfSk7XG5cdFx0bW9kdWxlID0gZXhlY09wdGlvbnMubW9kdWxlO1xuXHRcdGV4ZWNPcHRpb25zLmZhY3RvcnkuY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgZXhlY09wdGlvbnMucmVxdWlyZSk7XG5cdH0gY2F0Y2goZSkge1xuXHRcdG1vZHVsZS5lcnJvciA9IGU7XG5cdFx0dGhyb3cgZTtcblx0fVxuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbl9fd2VicGFja19yZXF1aXJlX18uYyA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgZXhlY3V0aW9uIGludGVyY2VwdG9yXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBbXTtcblxuIiwidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwibXJzcGVycnkuZ2l0aHViLmlvOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cdH1cblx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuXHR2YXIgb25TY3JpcHRDb21wbGV0ZSA9IChwcmV2LCBldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiAoZm4oZXZlbnQpKSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9XG5cdDtcblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhbGwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmh1ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uaG1yRiA9ICgpID0+IChcIm1haW4uXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSArIFwiLmhvdC11cGRhdGUuanNvblwiKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCI3NDJiNTAwNDQzNjg5MWNiZmIzOVwiKSIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZSA9IE9iamVjdC5jcmVhdGUobW9kdWxlKTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCAnZXhwb3J0cycsIHtcblx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdHNldDogKCkgPT4ge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFUyBNb2R1bGVzIG1heSBub3QgYXNzaWduIG1vZHVsZS5leHBvcnRzIG9yIGV4cG9ydHMuKiwgVXNlIEVTTSBleHBvcnQgc3ludGF4LCBpbnN0ZWFkOiAnICsgbW9kdWxlLmlkKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIGN1cnJlbnRNb2R1bGVEYXRhID0ge307XG52YXIgaW5zdGFsbGVkTW9kdWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18uYztcblxuLy8gbW9kdWxlIGFuZCByZXF1aXJlIGNyZWF0aW9uXG52YXIgY3VycmVudENoaWxkTW9kdWxlO1xudmFyIGN1cnJlbnRQYXJlbnRzID0gW107XG5cbi8vIHN0YXR1c1xudmFyIHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyA9IFtdO1xudmFyIGN1cnJlbnRTdGF0dXMgPSBcImlkbGVcIjtcblxuLy8gd2hpbGUgZG93bmxvYWRpbmdcbnZhciBibG9ja2luZ1Byb21pc2VzO1xuXG4vLyBUaGUgdXBkYXRlIGluZm9cbnZhciBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycztcbnZhciBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXM7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJEID0gY3VycmVudE1vZHVsZURhdGE7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaS5wdXNoKGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdHZhciBtb2R1bGUgPSBvcHRpb25zLm1vZHVsZTtcblx0dmFyIHJlcXVpcmUgPSBjcmVhdGVSZXF1aXJlKG9wdGlvbnMucmVxdWlyZSwgb3B0aW9ucy5pZCk7XG5cdG1vZHVsZS5ob3QgPSBjcmVhdGVNb2R1bGVIb3RPYmplY3Qob3B0aW9ucy5pZCwgbW9kdWxlKTtcblx0bW9kdWxlLnBhcmVudHMgPSBjdXJyZW50UGFyZW50cztcblx0bW9kdWxlLmNoaWxkcmVuID0gW107XG5cdGN1cnJlbnRQYXJlbnRzID0gW107XG5cdG9wdGlvbnMucmVxdWlyZSA9IHJlcXVpcmU7XG59KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDID0ge307XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkgPSB7fTtcblxuZnVuY3Rpb24gY3JlYXRlUmVxdWlyZShyZXF1aXJlLCBtb2R1bGVJZCkge1xuXHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcblx0aWYgKCFtZSkgcmV0dXJuIHJlcXVpcmU7XG5cdHZhciBmbiA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG5cdFx0aWYgKG1lLmhvdC5hY3RpdmUpIHtcblx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRzID0gaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzO1xuXHRcdFx0XHRpZiAocGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA9PT0gLTEpIHtcblx0XHRcdFx0XHRwYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG5cdFx0XHRcdGN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XG5cdFx0XHR9XG5cdFx0XHRpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIHtcblx0XHRcdFx0bWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArXG5cdFx0XHRcdFx0cmVxdWVzdCArXG5cdFx0XHRcdFx0XCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICtcblx0XHRcdFx0XHRtb2R1bGVJZFxuXHRcdFx0KTtcblx0XHRcdGN1cnJlbnRQYXJlbnRzID0gW107XG5cdFx0fVxuXHRcdHJldHVybiByZXF1aXJlKHJlcXVlc3QpO1xuXHR9O1xuXHR2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gcmVxdWlyZVtuYW1lXTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRyZXF1aXJlW25hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblx0Zm9yICh2YXIgbmFtZSBpbiByZXF1aXJlKSB7XG5cdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXF1aXJlLCBuYW1lKSAmJiBuYW1lICE9PSBcImVcIikge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSkpO1xuXHRcdH1cblx0fVxuXHRmbi5lID0gZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRyZXR1cm4gdHJhY2tCbG9ja2luZ1Byb21pc2UocmVxdWlyZS5lKGNodW5rSWQpKTtcblx0fTtcblx0cmV0dXJuIGZuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNb2R1bGVIb3RPYmplY3QobW9kdWxlSWQsIG1lKSB7XG5cdHZhciBfbWFpbiA9IGN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQ7XG5cdHZhciBob3QgPSB7XG5cdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuXHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXG5cdFx0X2FjY2VwdGVkRXJyb3JIYW5kbGVyczoge30sXG5cdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcblx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcblx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcblx0XHRfc2VsZkludmFsaWRhdGVkOiBmYWxzZSxcblx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcblx0XHRfbWFpbjogX21haW4sXG5cdFx0X3JlcXVpcmVTZWxmOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IG1lLnBhcmVudHMuc2xpY2UoKTtcblx0XHRcdGN1cnJlbnRDaGlsZE1vZHVsZSA9IF9tYWluID8gdW5kZWZpbmVkIDogbW9kdWxlSWQ7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcblx0XHR9LFxuXG5cdFx0Ly8gTW9kdWxlIEFQSVxuXHRcdGFjdGl2ZTogdHJ1ZSxcblx0XHRhY2NlcHQ6IGZ1bmN0aW9uIChkZXAsIGNhbGxiYWNrLCBlcnJvckhhbmRsZXIpIHtcblx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cdFx0XHRcdFx0aG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwW2ldXSA9IGVycm9ySGFuZGxlcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cdFx0XHRcdGhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcF0gPSBlcnJvckhhbmRsZXI7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRkZWNsaW5lOiBmdW5jdGlvbiAoZGVwKSB7XG5cdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKVxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcblx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuXHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuXHRcdH0sXG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuXHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHR9LFxuXHRcdGludmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoaXMuX3NlbGZJbnZhbGlkYXRlZCA9IHRydWU7XG5cdFx0XHRzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcblx0XHRcdFx0Y2FzZSBcImlkbGVcIjpcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicmVhZHlcIjpcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdFx0Y2FzZSBcImNoZWNrXCI6XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlXCI6XG5cdFx0XHRcdGNhc2UgXCJhcHBseVwiOlxuXHRcdFx0XHRcdChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgfHwgW10pLnB1c2goXG5cdFx0XHRcdFx0XHRtb2R1bGVJZFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0Ly8gaWdub3JlIHJlcXVlc3RzIGluIGVycm9yIHN0YXRlc1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuXHRcdGNoZWNrOiBob3RDaGVjayxcblx0XHRhcHBseTogaG90QXBwbHksXG5cdFx0c3RhdHVzOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0aWYgKCFsKSByZXR1cm4gY3VycmVudFN0YXR1cztcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHZhciBpZHggPSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcblx0XHRcdGlmIChpZHggPj0gMCkgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuXHRcdH0sXG5cblx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcblx0XHRkYXRhOiBjdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cblx0fTtcblx0Y3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuXHRyZXR1cm4gaG90O1xufVxuXG5mdW5jdGlvbiBzZXRTdGF0dXMobmV3U3RhdHVzKSB7XG5cdGN1cnJlbnRTdGF0dXMgPSBuZXdTdGF0dXM7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuXHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG59XG5cbmZ1bmN0aW9uIHRyYWNrQmxvY2tpbmdQcm9taXNlKHByb21pc2UpIHtcblx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRzZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuXHRcdFx0YmxvY2tpbmdQcm9taXNlcy5wdXNoKHByb21pc2UpO1xuXHRcdFx0d2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdGJsb2NraW5nUHJvbWlzZXMucHVzaChwcm9taXNlKTtcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0fVxufVxuXG5mdW5jdGlvbiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmbikge1xuXHRpZiAoYmxvY2tpbmdQcm9taXNlcy5sZW5ndGggPT09IDApIHJldHVybiBmbigpO1xuXHR2YXIgYmxvY2tlciA9IGJsb2NraW5nUHJvbWlzZXM7XG5cdGJsb2NraW5nUHJvbWlzZXMgPSBbXTtcblx0cmV0dXJuIFByb21pc2UuYWxsKGJsb2NrZXIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmbik7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBob3RDaGVjayhhcHBseU9uVXBkYXRlKSB7XG5cdGlmIChjdXJyZW50U3RhdHVzICE9PSBcImlkbGVcIikge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuXHR9XG5cdHNldFN0YXR1cyhcImNoZWNrXCIpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNKCkudGhlbihmdW5jdGlvbiAodXBkYXRlKSB7XG5cdFx0aWYgKCF1cGRhdGUpIHtcblx0XHRcdHNldFN0YXR1cyhhcHBseUludmFsaWRhdGVkTW9kdWxlcygpID8gXCJyZWFkeVwiIDogXCJpZGxlXCIpO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0c2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcblxuXHRcdHZhciB1cGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRcdGJsb2NraW5nUHJvbWlzZXMgPSBbXTtcblx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKFxuXHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDKS5yZWR1Y2UoZnVuY3Rpb24gKFxuXHRcdFx0XHRwcm9taXNlcyxcblx0XHRcdFx0a2V5XG5cdFx0XHQpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJDW2tleV0oXG5cdFx0XHRcdFx0dXBkYXRlLmMsXG5cdFx0XHRcdFx0dXBkYXRlLnIsXG5cdFx0XHRcdFx0dXBkYXRlLm0sXG5cdFx0XHRcdFx0cHJvbWlzZXMsXG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMsXG5cdFx0XHRcdFx0dXBkYXRlZE1vZHVsZXNcblx0XHRcdFx0KTtcblx0XHRcdFx0cmV0dXJuIHByb21pc2VzO1xuXHRcdFx0fSxcblx0XHRcdFtdKVxuXHRcdCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRpZiAoYXBwbHlPblVwZGF0ZSkge1xuXHRcdFx0XHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KGFwcGx5T25VcGRhdGUpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHVwZGF0ZWRNb2R1bGVzO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwicmVhZHlcIikge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxBcHBseShvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCk7XG5cblx0dmFyIHJlc3VsdHMgPSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycy5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHtcblx0XHRyZXR1cm4gaGFuZGxlcihvcHRpb25zKTtcblx0fSk7XG5cdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gdW5kZWZpbmVkO1xuXG5cdHZhciBlcnJvcnMgPSByZXN1bHRzXG5cdFx0Lm1hcChmdW5jdGlvbiAocikge1xuXHRcdFx0cmV0dXJuIHIuZXJyb3I7XG5cdFx0fSlcblx0XHQuZmlsdGVyKEJvb2xlYW4pO1xuXG5cdGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuXHRcdHNldFN0YXR1cyhcImFib3J0XCIpO1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IGVycm9yc1swXTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuXHRzZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuXG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5kaXNwb3NlKSByZXN1bHQuZGlzcG9zZSgpO1xuXHR9KTtcblxuXHQvLyBOb3cgaW4gXCJhcHBseVwiIHBoYXNlXG5cdHNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG5cdHZhciBlcnJvcjtcblx0dmFyIHJlcG9ydEVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuXHR9O1xuXG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0cmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRpZiAocmVzdWx0LmFwcGx5KSB7XG5cdFx0XHR2YXIgbW9kdWxlcyA9IHJlc3VsdC5hcHBseShyZXBvcnRFcnJvcik7XG5cdFx0XHRpZiAobW9kdWxlcykge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChtb2R1bGVzW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcblx0aWYgKGVycm9yKSB7XG5cdFx0c2V0U3RhdHVzKFwiZmFpbFwiKTtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9KTtcblx0fVxuXG5cdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChsaXN0KSB7XG5cdFx0XHRvdXRkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0aWYgKGxpc3QuaW5kZXhPZihtb2R1bGVJZCkgPCAwKSBsaXN0LnB1c2gobW9kdWxlSWQpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gbGlzdDtcblx0XHR9KTtcblx0fVxuXG5cdHNldFN0YXR1cyhcImlkbGVcIik7XG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSB7XG5cdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRpZiAoIWN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzKSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHVuZGVmaW5lZDtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSIsIl9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG52YXIgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdDtcbnZhciB3YWl0aW5nVXBkYXRlUmVzb2x2ZXMgPSB7fTtcbmZ1bmN0aW9uIGxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gcmVzb2x2ZTtcblx0XHQvLyBzdGFydCB1cGRhdGUgY2h1bmsgbG9hZGluZ1xuXHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmh1KGNodW5rSWQpO1xuXHRcdC8vIGNyZWF0ZSBlcnJvciBiZWZvcmUgc3RhY2sgdW53b3VuZCB0byBnZXQgdXNlZnVsIHN0YWNrdHJhY2UgbGF0ZXJcblx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcblx0XHR2YXIgbG9hZGluZ0VuZGVkID0gKGV2ZW50KSA9PiB7XG5cdFx0XHRpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHtcblx0XHRcdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gdW5kZWZpbmVkXG5cdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG5cdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBob3QgdXBkYXRlIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcblx0XHRcdFx0ZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7XG5cdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkKTtcblx0fSk7XG59XG5cbnNlbGZbXCJ3ZWJwYWNrSG90VXBkYXRlbXJzcGVycnlfZ2l0aHViX2lvXCJdID0gKGNodW5rSWQsIG1vcmVNb2R1bGVzLCBydW50aW1lKSA9PiB7XG5cdGZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0Y3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHRpZihjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0KSBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0LnB1c2gobW9kdWxlSWQpO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSBjdXJyZW50VXBkYXRlUnVudGltZS5wdXNoKHJ1bnRpbWUpO1xuXHRpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0oKTtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdH1cbn07XG5cbnZhciBjdXJyZW50VXBkYXRlQ2h1bmtzO1xudmFyIGN1cnJlbnRVcGRhdGU7XG52YXIgY3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZVJ1bnRpbWU7XG5mdW5jdGlvbiBhcHBseUhhbmRsZXIob3B0aW9ucykge1xuXHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5mKSBkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5mLmpzb25wSG1yO1xuXHRjdXJyZW50VXBkYXRlQ2h1bmtzID0gdW5kZWZpbmVkO1xuXHRmdW5jdGlvbiBnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHModXBkYXRlTW9kdWxlSWQpIHtcblx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW3VwZGF0ZU1vZHVsZUlkXTtcblx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblxuXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5tYXAoZnVuY3Rpb24gKGlkKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRjaGFpbjogW2lkXSxcblx0XHRcdFx0aWQ6IGlkXG5cdFx0XHR9O1xuXHRcdH0pO1xuXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG5cdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG5cdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG5cdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblx0XHRcdGlmIChcblx0XHRcdFx0IW1vZHVsZSB8fFxuXHRcdFx0XHQobW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkICYmICFtb2R1bGUuaG90Ll9zZWxmSW52YWxpZGF0ZWQpXG5cdFx0XHQpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuXHRcdFx0XHRcdGNoYWluOiBjaGFpbixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcblx0XHRcdFx0dmFyIHBhcmVudCA9IF9fd2VicGFja19yZXF1aXJlX18uY1twYXJlbnRJZF07XG5cdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG5cdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcblx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcblx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcblx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuXHRcdFx0XHRxdWV1ZS5wdXNoKHtcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuXHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuXHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuXHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXG5cdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuXHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcblx0XHR9XG5cdH1cblxuXHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuXHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG5cdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG5cdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG5cblx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZShtb2R1bGUpIHtcblx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIG1vZHVsZS5pZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuXHRcdCk7XG5cdH07XG5cblx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gY3VycmVudFVwZGF0ZSkge1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG5cdFx0XHR2YXIgbmV3TW9kdWxlRmFjdG9yeSA9IGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdO1xuXHRcdFx0LyoqIEB0eXBlIHtUT0RPfSAqL1xuXHRcdFx0dmFyIHJlc3VsdDtcblx0XHRcdGlmIChuZXdNb2R1bGVGYWN0b3J5KSB7XG5cdFx0XHRcdHJlc3VsdCA9IGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyhtb2R1bGVJZCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHQgPSB7XG5cdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cblx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuXHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuXHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG5cdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG5cdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcblx0XHRcdH1cblx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuXHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcblx0XHRcdH1cblx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZXJyb3I6IGFib3J0RXJyb3Jcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmIChkb0FwcGx5KSB7XG5cdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gbmV3TW9kdWxlRmFjdG9yeTtcblx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcblx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG5cdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuXHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGN1cnJlbnRVcGRhdGUgPSB1bmRlZmluZWQ7XG5cblx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuXHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG5cdGZvciAodmFyIGogPSAwOyBqIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaisrKSB7XG5cdFx0dmFyIG91dGRhdGVkTW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbal07XG5cdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRpZiAoXG5cdFx0XHRtb2R1bGUgJiZcblx0XHRcdChtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgfHwgbW9kdWxlLmhvdC5fbWFpbikgJiZcblx0XHRcdC8vIHJlbW92ZWQgc2VsZi1hY2NlcHRlZCBtb2R1bGVzIHNob3VsZCBub3QgYmUgcmVxdWlyZWRcblx0XHRcdGFwcGxpZWRVcGRhdGVbb3V0ZGF0ZWRNb2R1bGVJZF0gIT09IHdhcm5VbmV4cGVjdGVkUmVxdWlyZSAmJlxuXHRcdFx0Ly8gd2hlbiBjYWxsZWQgaW52YWxpZGF0ZSBzZWxmLWFjY2VwdGluZyBpcyBub3QgcG9zc2libGVcblx0XHRcdCFtb2R1bGUuaG90Ll9zZWxmSW52YWxpZGF0ZWRcblx0XHQpIHtcblx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcblx0XHRcdFx0bW9kdWxlOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRyZXF1aXJlOiBtb2R1bGUuaG90Ll9yZXF1aXJlU2VsZixcblx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWRcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcblxuXHRyZXR1cm4ge1xuXHRcdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdH0pO1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSB1bmRlZmluZWQ7XG5cblx0XHRcdHZhciBpZHg7XG5cdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcblx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuXHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblx0XHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG5cdFx0XHRcdHZhciBkYXRhID0ge307XG5cblx0XHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG5cdFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRkaXNwb3NlSGFuZGxlcnNbal0uY2FsbChudWxsLCBkYXRhKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckRbbW9kdWxlSWRdID0gZGF0YTtcblxuXHRcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuXHRcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuXHRcdFx0XHRkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG5cdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdHZhciBjaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuXHRcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG5cdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG5cdFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuXHRcdFx0dmFyIGRlcGVuZGVuY3k7XG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0bW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcblx0XHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhcHBseTogZnVuY3Rpb24gKHJlcG9ydEVycm9yKSB7XG5cdFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcblx0XHRcdGZvciAodmFyIHVwZGF0ZU1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhhcHBsaWVkVXBkYXRlLCB1cGRhdGVNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bdXBkYXRlTW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVt1cGRhdGVNb2R1bGVJZF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcnVuIG5ldyBydW50aW1lIG1vZHVsZXNcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudFVwZGF0ZVJ1bnRpbWUubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWVbaV0oX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRpZiAobW9kdWxlKSB7XG5cdFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9XG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIGVycm9ySGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRcdHZhciBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MgPSBbXTtcblx0XHRcdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcblx0XHRcdFx0XHRcdFx0dmFyIGFjY2VwdENhbGxiYWNrID1cblx0XHRcdFx0XHRcdFx0XHRtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcblx0XHRcdFx0XHRcdFx0dmFyIGVycm9ySGFuZGxlciA9XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlLmhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcGVuZGVuY3ldO1xuXHRcdFx0XHRcdFx0XHRpZiAoYWNjZXB0Q2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoYWNjZXB0Q2FsbGJhY2spICE9PSAtMSkgY29udGludWU7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goYWNjZXB0Q2FsbGJhY2spO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9ySGFuZGxlcnMucHVzaChlcnJvckhhbmRsZXIpO1xuXHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcy5wdXNoKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IGNhbGxiYWNrcy5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrc1trXS5jYWxsKG51bGwsIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcblx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBlcnJvckhhbmRsZXJzW2tdID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9ySGFuZGxlcnNba10oZXJyLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba11cblx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIyKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xuXHRcdFx0Zm9yICh2YXIgbyA9IDA7IG8gPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBvKyspIHtcblx0XHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbb107XG5cdFx0XHRcdHZhciBtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGl0ZW0ucmVxdWlyZShtb2R1bGVJZCk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyLCB7XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZTogX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcblx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuXHRcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIyKTtcblx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzO1xuXHRcdH1cblx0fTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1ySS5qc29ucCA9IGZ1bmN0aW9uIChtb2R1bGVJZCwgYXBwbHlIYW5kbGVycykge1xuXHRpZiAoIWN1cnJlbnRVcGRhdGUpIHtcblx0XHRjdXJyZW50VXBkYXRlID0ge307XG5cdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWUgPSBbXTtcblx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IFtdO1xuXHRcdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHR9XG5cdGlmICghX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkge1xuXHRcdGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdID0gX193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXTtcblx0fVxufTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5qc29ucCA9IGZ1bmN0aW9uIChcblx0Y2h1bmtJZHMsXG5cdHJlbW92ZWRDaHVua3MsXG5cdHJlbW92ZWRNb2R1bGVzLFxuXHRwcm9taXNlcyxcblx0YXBwbHlIYW5kbGVycyxcblx0dXBkYXRlZE1vZHVsZXNMaXN0XG4pIHtcblx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB7fTtcblx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSByZW1vdmVkQ2h1bmtzO1xuXHRjdXJyZW50VXBkYXRlID0gcmVtb3ZlZE1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuXHRcdG9ialtrZXldID0gZmFsc2U7XG5cdFx0cmV0dXJuIG9iajtcblx0fSwge30pO1xuXHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRjaHVua0lkcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0aWYgKFxuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSAhPT0gdW5kZWZpbmVkXG5cdFx0KSB7XG5cdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRVcGRhdGVDaHVuayhjaHVua0lkLCB1cGRhdGVkTW9kdWxlc0xpc3QpKTtcblx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSB0cnVlO1xuXHRcdH1cblx0fSk7XG5cdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXIgPSBmdW5jdGlvbiAoY2h1bmtJZCwgcHJvbWlzZXMpIHtcblx0XHRcdGlmIChcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rcyAmJlxuXHRcdFx0XHQhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGVDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSAhPT0gdW5kZWZpbmVkXG5cdFx0XHQpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkpO1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0gPSAoKSA9PiB7XG5cdGlmICh0eXBlb2YgZmV0Y2ggPT09IFwidW5kZWZpbmVkXCIpIHRocm93IG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydDogbmVlZCBmZXRjaCBBUElcIik7XG5cdHJldHVybiBmZXRjaChfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckYoKSkudGhlbigocmVzcG9uc2UpID0+IHtcblx0XHRpZihyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkgcmV0dXJuOyAvLyBubyB1cGRhdGUgYXZhaWxhYmxlXG5cdFx0aWYoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggdXBkYXRlIG1hbmlmZXN0IFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG5cdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcblx0fSk7XG59O1xuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiLy8gbW9kdWxlIGNhY2hlIGFyZSB1c2VkIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkXG4vLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MzIzKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=